<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b123"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="3"
 schemaVersion="1052"
 universal="password">
    <Things>
        <Thing
         description="Библиотека сервисов SMoPP"
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         name="connSmoppLibrary"
         projectName="Connectors"
         published="false"
         tags=""
         thingTemplate="connSmoppLibraryTemplate"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read>
                    <Principal
                     isPermitted="true"
                     name="ПройдаковИА"
                     type="User"></Principal>
                </Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="KAZS"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="ПройдаковИА"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="KAZS"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="ПройдаковИА"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KAZS"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="ПройдаковИА"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="KAZS"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="ПройдаковИА"
                         type="User"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="KAZS"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="ПройдаковИА"
                         type="User"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="Everyone"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="Тесты"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="ASU_URL"
                     ordinal="2"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description="Тестовый URL для записи данных по замечаниям"
                     isLocalOnly="false"
                     name="ASU_URL_TEST"
                     ordinal="4"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="ASU_URL_TEST_1"
                     ordinal="6"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="ASU_URL_TEST_2"
                     ordinal="7"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="DATETIME"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="DateTest"
                     ordinal="5"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="PLACE_ID"
                     ordinal="3"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="producedActions"
                     ordinal="8"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="rfidStatuses"
                     ordinal="9"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="rfidTypes"
                     ordinal="10"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="transferStatuses"
                     ordinal="11"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="zoneTypes"
                     ordinal="12"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Записать факт проведения приемки"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="add_completed_work">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="diagnosticCard"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="endTime"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="engineer"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inspectionId"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="isSCWorksNeeded"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="otcEmployee"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="startTime"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="worker"
                             ordinal="8"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Создать замечание секции по ДК в АСУ СГ"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="add_remark">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="description"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="diagnosticMap"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="isSCWorksNeeded"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="plant"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="source"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="worker"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Принять Запрос (SMoPP от ЕИПП) на проведение осмотра на дату и время"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="add_work">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="diagnosticMap"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotive_serie"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="typeOfRepair"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Принять Запрос (от ЕИПП в SMoPP) на проверку RFID-метки секции Проверить RFID-метку"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="add_work_rfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="series"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddCompletedWork">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="diagnosticCard"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="endTime"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="engineer"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inspectionId"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="isSCWorksNeeded"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="otcEmployee"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="startTime"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="worker"
                             ordinal="9"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddRemark">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="description"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="diagnosticMap"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="isSCWorksNeeded"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="plant"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="source"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="worker"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddWork">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="diagnosticMap"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotive_serie"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="typeOfRepair"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddWorkRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="series"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnumber"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="convert_date">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение комментариев"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_comment">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="commentId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить статус сотрудника"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_employee_status">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="worker"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение локомотива по наименованию в ЕИПП или в АСУ СГ"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_locomotivename">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить наименование должности сотрудника по её ID"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_position_list">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="uId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить список мест ремонта"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_repair_sites">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) получить информацию по секции"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_section_info">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="mes_time"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnum_section"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить список секций на дату"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_section_list">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="place"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить список секций на дату"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_section_list_v2">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="Date"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="place"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение наименования секции"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_section_name">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_section_remarks">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_id"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить список СЛД"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_sld_list">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_sources_of_coments">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="uId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Справочник Источников замечаний"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_sources_of_comments">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="uId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение типа ремонта"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_type_of_repair">
                        <ResultType
                         baseType="TEXT"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить график по исполнителю на дату"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_worker_timetable">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sId"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Запрос (от SMoPP в ЕИПП) Получить список исполнителей по должности"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="get_workers">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="end"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="SLD"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="start"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetComment">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="commentId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetEmployeeStatus">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="worker"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveName">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveSectionDate">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnum_section"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveSeries">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotive_serie"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPositionList">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="uId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRepairSites">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSection">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionList">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotiveSeries"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="place"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionName">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionRemarks">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSLDList">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSourceOfComments">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="uId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTypeOfRepair">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetWorkers">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sId"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetWorkerTimetable">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sId"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение SHA1 хэша от строки"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="sha1">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="A"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="add_completed_work">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var obj = {};
                                        obj.id = "";
                                        var result = [];
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        // Проверка входных параметров
                                        if (subnumber !== undefined && subnumber.length && diagnosticCard !== undefined && diagnosticCard.length && startTime !== undefined && startTime.length) {
                                            var dateText =  me.convert_date({ date: undefined });
                                            obj.id =  me.sha1({ A: subnumber+diagnosticCard });
                                            if (Things[obj.id] !== null && Things[obj.id].thingTemplate === "connAccepting") {
                                            } else {
                                                var params = {
                                                    name: obj.id,
                                                    description: "экзампляр объекта факт приёмки секции - "+subnumber,
                                                    thingTemplateName: "connAccepting",
                                                    tags: undefined
                                                };
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[obj.id].EnableThing();
                                                Things[obj.id].RestartThing();
                                            }
                                            Things[obj.id].SectionNumber = number;
                                            Things[obj.id].SectionSubnumber = subnumber;
                                            Things[obj.id].DiagnosticMap = diagnosticCard;
                                            Things[obj.id].InspectionID = inspectionId;
                                            Things[obj.id].isSCWorksNeeded = isSCWorksNeeded;
                                            Things[obj.id].startTime = startTime;
                                            Things[obj.id].endTime = endTime;
                                            Things[obj.id].worker = worker;
                                            Things[obj.id].engineer = engineer;
                                            Things[obj.id].otcEmployee = otcEmployee;
                                        } else {
                                        	obj.Error = "Next parameters are required: subnumber, diagnosticCard, startTime";
                                        }
                                        result = obj;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="add_remark">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: CreateNoteconnectionResponse.*[1];
                                            var containsError = resultXML.*:: ErrorDescription.toString() !== "";
                                            if (containsError) {
                                                return {
                                                    Error: 'Ошибка в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            } else {
                                                return {
                                                    Guid: resultXML.*:: Guid.toString(),
                                                    Kod: resultXML.*:: Kod.toString()
                                                };
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            var dateText = me.convert_date({ date: date /* STRING */});
                                            // Сборка тела soap запроса для АСУ СГ
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                           <soap:Header/>\
                                           <soap:Body>\
                                              <eipp:CreateNoteconnection>\
                                                 <eipp:Parameter>\
                                                    <eipp:Sotrudnik>' + worker + '</eipp:Sotrudnik>\
                                                    <eipp:DiagnosticMapslocomotive>' + diagnosticMap + '</eipp:DiagnosticMapslocomotive>\
                                                    <eipp:Source>' + source + '</eipp:Source>\
                                                    <eipp:Description>' + description + '</eipp:Description>\
                                                    <eipp:Date>' + dateText + '</eipp:Date>\
                                                    <eipp:Plant>' + (plant || '') + '</eipp:Plant>\
                                                 </eipp:Parameter>\
                                              </eipp:CreateNoteconnection>\
                                            </soap:Body>\
                                            </soap:Envelope>';
                                        
                                            var sha1 = me.sha1({ A: dateText /* STRING */ });
                                            var remark_id = sha1;
                                        
                                            // Создание нового замечания на платформе
                                            var thing = Things[remark_id];
                                            if (thing) {
                                                if (thing.thingTemplate === "2050ЭкземплярЗамечания") {
                                                    thing.ID_ASU = remark_id;
                                                    thing.АВТОР_ЗАМЕЧАНИЯ = worker;
                                                    thing.ДАТА_ЗАМЕЧАНИЯ = dateText;
                                                    thing.ДК = diagnosticMap;
                                                    thing.ИСТОЧНИК_ЗАМЕЧАНИЯ = source;
                                                    thing.НАИМЕНОВАНИЕ = description;
                                                    thing.СЕКЦИЯ = sectionId;
                                                    thing.НЕОБХОДИМОСТЬ_СВЕРХЦИКЛОВЫХ_РАБОТ = isSCWorksNeeded;
                                                }
                                            } else {
                                                var remarkParams = {
                                                    name: remark_id,
                                                    description: description,
                                                    thingTemplateName: "2050ЭкземплярЗамечания",
                                                    tags: undefined
                                                };
                                                Resources["EntityServices"].CreateThing(remarkParams);
                                                thing = Things[remark_id];
                                                // Активируем и рестартим сущность
                                                thing.EnableThing();
                                                thing.RestartThing();
                                                // Наполняем данными новую сущность
                                                thing.ID_ASU = remark_id;
                                                thing.АВТОР_ЗАМЕЧАНИЯ = worker;
                                                thing.ДАТА_ЗАМЕЧАНИЯ = dateText;
                                                thing.ДК = diagnosticMap;
                                                thing.ИСТОЧНИК_ЗАМЕЧАНИЯ = source;
                                                thing.НАИМЕНОВАНИЕ = description;
                                                thing.СЕКЦИЯ = sectionId;
                                                thing.НЕОБХОДИМОСТЬ_СВЕРХЦИКЛОВЫХ_РАБОТ = isSCWorksNeeded;
                                            }
                                        
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            if (response.Kod) {
                                                //Set the 1C code if one was received
                                                thing.КОД1С = response.Kod;
                                            }
                                            result = response;
                                            result.RemarkId = thing.ID_ASU;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="add_work">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_INSECTION_PLAN = 'connInspectionPlan';
                                        var result = {};
                                        
                                        // Отправка запроса в Smopp на добавление новой работы
                                        function sendRequest(params) {
                                            var response = Resources["ContentLoaderFunctions"].PostText(params);
                                            logger.info(response);
                                            var lastIndexOf = response.lastIndexOf("^");
                                            if (lastIndexOf !== -1) { response = response.substring(0, lastIndexOf); }
                                            try {
                                                return JSON.parse(response);
                                            } catch (err) {
                                                throw new Error('Ошибка при обращении к сервису SMoPP: ' + response);
                                            }
                                        }
                                        
                                        // Устанавливаем свойства экземпляра приемки
                                        function setupThing(user, thing) {
                                            thing.Date = user.Date;
                                            thing.DiagnosticMap = diagnosticMap;
                                            thing.Employee = user.Employee;
                                            thing.ID = user.ID;
                                            thing.LocomotiveSerie = locomotive_serie;
                                            thing.SectionNumber = number;
                                            thing.SectionSubnumber = subnumber;
                                            thing.TypeOfRepair = typeOfRepair;
                                            thing.SectionId = sectionId;
                                        }
                                        
                                        // Сохранение экземпляра приемки на ЕИПП
                                        function parseThing(user) {
                                            var thing = Things[user.insectionId];
                                            if (thing !== undefined && thing !== null) {
                                                if (thing.thingTemplate === CONN_INSECTION_PLAN) {
                                                    thing.Date = dateTime;
                                                    setupThing(user, thing);
                                                }
                                            } else {
                                                var planParams = {
                                                    name: user.ID /* STRING */,
                                                    description: "План проверки секции " + number /* STRING */,
                                                    thingTemplateName: CONN_INSECTION_PLAN /* THINGTEMPLATENAME */,
                                                    tags: undefined /* TAGS */
                                                };
                                                Resources["EntityServices"].CreateThing(planParams);
                                                thing = Things[user.ID];
                                                // Активируем и рестартим сущность
                                                thing.EnableThing();
                                                thing.RestartThing();
                                                // Наполняем данными новую сущность
                                                setupThing(user, thing);
                                            }
                                            result = {
                                                ID: thing.ID,
                                                Date: thing.Date,
                                                Employee: thing.Employee
                                            };
                                        }
                                        
                                        // Парсинг и проверка ответа от Smopp
                                        function parseResponse(response) {
                                            if (response.error_code === 200) {
                                                var users = response.users;
                                                if (users !== undefined) {
                                                    users.forEach(function (user) {
                                                        parseThing(user);
                                                    });
                                                } else {
                                                    if (response.Employee) {
                                                        parseThing(response);
                                                    } else {
                                                        throw new Error('Некорректный формат ответа от сервера при вызове api/service/addWork');
                                                    } 
                                                   
                                                }
                                            } else {
                                                //Something goes wrong
                                                if (response.error_message !== undefined) {
                                                    result.error = response.error_message;
                                                } else {
                                                    result = {
                                                        error: 'Неизвестная ошибка на сервере',
                                                        errorDescription: response
                                                    };
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            if (number && subnumber && diagnosticMap && dateTime && typeOfRepair && locomotive_serie) {
                                                var headers = {
                                                    "Content-Type": "application/json",
                                                    "Accept": "application/json",
                                                    "authAppKey": "07a13c8907d1-6a7bdba1-a2fz-aatgu4j"
                                                };
                                                var content = {
                                                    series: locomotive_serie,
                                                    number: number,
                                                    subnumber: subnumber,
                                                    diagnosticCard: diagnosticMap,
                                                    kind: typeOfRepair,
                                                    dateTime: dateTime,
                                                    sectionId: sectionId
                                                };
                                                
                                            
                                                var requestParams = {
                                                    proxyScheme: undefined,
                                                    headers: headers,
                                                    ignoreSSLErrors: true,
                                                    useNTLM: undefined,
                                                    workstation: undefined,
                                                    useProxy: undefined,
                                                    withCookies: undefined,
                                                    proxyHost: undefined,
                                                    url: 'http://corp.prmsys.net/api/service/addwork',
                                                    content: content,
                                                    timeout: undefined,
                                                    proxyPort: undefined,
                                                    password: undefined,
                                                    domain: undefined,
                                                    contentType: undefined,
                                                    username: undefined
                                                };
                                                logger.info(JSON.stringify(requestParams));
                                           
                                                var response = sendRequest(requestParams);
                                                
                                                if (response !== undefined) {
                                                    parseResponse(response);
                                                } else {
                                                    result = {
                                                        Error: 'Ошибка при обращении к сервису SMoPP: ' + response
                                                    };
                                                }
                                            } else throw new Error('Проверьте входные параметры');
                                        } catch (err) {
                                            // Обработка ошибок
                                            result = {
                                                request: {
                                                    requestParams: requestParams,
                                                    headers: headers
                                                },
                                                response: response,
                                                message: err.message,
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="add_work_rfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_RFID_INSECTION_PLAN = 'connRFIDInspectionPlan';
                                        var result = {};
                                        
                                        // Метод для отправки запроса Smopp на проверку rfid метки 
                                        function sendRequest(params) {
                                            var response = Resources["ContentLoaderFunctions"].PostText(params);
                                            logger.info(response);
                                            var lastIndexOf = response.lastIndexOf("^");
                                            if (lastIndexOf !== -1) { response = response.substring(0, lastIndexOf); }
                                            try {
                                                return JSON.parse(response);
                                            } catch (err) {
                                                throw new Error('Ошибка при обращении к сервису SMoPP: ' + response);
                                            }
                                        }
                                        
                                        // Метод для установки параметров rfid метки
                                        function setupThing(user, thing) {
                                            thing.Date = user.dateTime;
                                            thing.Employee = user.workers;
                                            thing.ID = user.inspectionId;
                                            thing.LocomotiveSerie = series;
                                            thing.RFID = rfid;
                                            thing.SectionNumber = number;
                                            thing.SectionSubnumber = subnumber;
                                            thing.SectionId = sectionId;
                                        }
                                        
                                        // Сохранение rfid метки на ЕИПП
                                        function parseThing(user) {
                                            var thing = Things[user.insectionId];
                                            if (thing !== undefined && thing !== null) {
                                                if (thing.thingTemplate === CONN_RFID_INSECTION_PLAN) {
                                                    thing.Date = dateTime;
                                                    setupThing(user, thing);
                                                }
                                            } else {
                                                var planParams = {
                                                    name: user.inspectionId /* STRING */,
                                                    description: "План проверки секции " + number /* STRING */,
                                                    thingTemplateName: CONN_RFID_INSECTION_PLAN /* THINGTEMPLATENAME */,
                                                    tags: undefined /* TAGS */
                                                };
                                                Resources["EntityServices"].CreateThing(planParams);
                                                thing = Things[user.inspectionId];
                                                // Активируем и рестартим сущность
                                                thing.EnableThing();
                                                thing.RestartThing();
                                                // Наполняем данными новую сущность
                                                setupThing(user, thing);
                                            }
                                            result = {
                                                ID: thing.ID,
                                                Date: thing.Date,
                                                Employee: thing.Employee
                                            };
                                        }
                                        
                                        // Метод для парсинга и проверки ответа от Smopp
                                        function parseResponse(response) {
                                            if (response.error_code === 200) {
                                                var users = response.users;
                                                if (users !== undefined) {
                                                    users.forEach(function (user) {
                                                        parseThing(user);
                                                    });
                                                } else {
                                                    if (response.inspectionId) {
                                                        parseThing(response);
                                                    } else throw new Error('Некорректный формат ответа от сервера при вызове api/service/checkrfid');
                                                }
                                            } else {
                                                //Something goes wrong
                                                if (response.error_message !== undefined) {
                                                    result.error = response.error_message;
                                                } else {
                                                    result = {
                                                        error: 'Неизвестная ошибка на сервере'
                                                    };
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основеное тело скрипта
                                        **/
                                        try {
                                            if (series && number && subnumber && rfid && dateTime) {
                                                var headers = {
                                                    "Content-Type": "application/json",
                                                    "Accept": "application/json",
                                                    "authAppKey": "07a13c8907d1-6a7bdba1-a2fz-aatgu4j"
                                                };
                                                var content = {
                                                    series: series,
                                                    number: number,
                                                    rfid: rfid,
                                                    subnumber: subnumber,
                                                    dateTime: dateTime,
                                                    sectionId: sectionId
                                                };
                                               
                                                var requestParams = {
                                                    proxyScheme: undefined,
                                                    headers: headers,
                                                    ignoreSSLErrors: true,
                                                    useNTLM: undefined,
                                                    workstation: undefined,
                                                    useProxy: undefined,
                                                    withCookies: undefined,
                                                    proxyHost: undefined,
                                                    url: 'http://corp.prmsys.net/api/service/checkrfid',
                                                    content: content,
                                                    timeout: undefined,
                                                    proxyPort: undefined,
                                                    password: undefined,
                                                    domain: undefined,
                                                    contentType: undefined,
                                                    username: undefined
                                                };
                                                logger.info(JSON.stringify(requestParams));
                                            
                                                var response = sendRequest(requestParams);
                                                if (response !== undefined) {
                                                    parseResponse(response);
                                                } else {
                                                    //Something goes wrong 
                                                    result = {
                                                        Error: 'Ошибка при обращении к сервису SMoPP: ' + response
                                                    };
                                                }
                                            } else throw new Error('Проверьте входные параметры');
                                        } catch (err) {
                                            // Обработка ошибок
                                            result = {
                                                request: {
                                                    requestParams: requestParams,
                                                    headers: headers
                                                },
                                                response: response,
                                                message: err.message,
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddCompletedWork">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var obj = {};
                                        obj.id = "";
                                        var result = [];
                                        
                                        if (subnumber !== undefined && subnumber.length && diagnosticCard !== undefined && diagnosticCard.length && startTime !== undefined && startTime.length) {
                                            var dateText =  me.convert_date({ date: undefined });
                                            obj.id =  me.sha1({ A: subnumber+diagnosticCard });
                                            if (Things[obj.id] !== null && Things[obj.id].thingTemplate === "connAccepting") {
                                            } else {
                                                var params = {
                                                    name: obj.id,
                                                    description: "экзампляр объекта факт приёмки секции - "+subnumber,
                                                    thingTemplateName: "connAccepting",
                                                    tags: undefined
                                                };
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[obj.id].EnableThing();
                                                Things[obj.id].RestartThing();
                                            }
                                            Things[obj.id].SectionNumber = number;
                                            Things[obj.id].SectionSubnumber = subnumber;
                                            Things[obj.id].DiagnosticMap = diagnosticCard;
                                            Things[obj.id].InspectionID = inspectionId;
                                            Things[obj.id].isSCWorksNeeded = isSCWorksNeeded;
                                            Things[obj.id].startTime = startTime;
                                            Things[obj.id].endTime = endTime;
                                            Things[obj.id].worker = worker;
                                            Things[obj.id].engineer = engineer;
                                            Things[obj.id].otcEmployee = otcEmployee;
                                        } else {
                                        	obj.Error = "Next parameters are required: subnumber, diagnosticCard, startTime";
                                        }
                                        result = obj;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddRemark">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: CreateNoteconnectionResponse.*[1];
                                            var containsError = resultXML.*:: ErrorDescription.toString() !== "";
                                            if (containsError) {
                                                return {
                                                    Error: 'Ошибка в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            } else {
                                                return {
                                                    Guid: resultXML.*:: Guid.toString(),
                                                    Kod: resultXML.*:: Kod.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            var dateText = me.convert_date({ date: date /* STRING */});
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                           <soap:Header/>\
                                           <soap:Body>\
                                              <eipp:CreateNoteconnection>\
                                                 <eipp:Parameter>\
                                                    <eipp:Sotrudnik>' + worker + '</eipp:Sotrudnik>\
                                                    <eipp:DiagnosticMapslocomotive>' + diagnosticMap + '</eipp:DiagnosticMapslocomotive>\
                                                    <eipp:Source>' + source + '</eipp:Source>\
                                                    <eipp:Description>' + description + '</eipp:Description>\
                                                    <eipp:Date>' + dateText + '</eipp:Date>\
                                                    <eipp:Plant>' + plant + '</eipp:Plant>\
                                                 </eipp:Parameter>\
                                              </eipp:CreateNoteconnection>\
                                            </soap:Body>\
                                            </soap:Envelope>';
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1/* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                        
                                            // result: STRING
                                            var responce = Resources["ContentLoaderFunctions"].PostText(params);
                                            var sha1 = me.sha1({ A: dateText /* STRING */ });
                                            var remark_id = sha1;
                                        
                                            // создание нового замечания на платформе
                                            var thing = Things[remark_id];
                                            if (thing) {
                                                if (thing.thingTemplate === "2050ЭкземплярЗамечания") {
                                                    thing.ID_ASU = remark_id;
                                                    thing.АВТОР_ЗАМЕЧАНИЯ = worker;
                                                    thing.ДАТА_ЗАМЕЧАНИЯ = dateText;
                                                    thing.ДК = diagnosticMap;
                                                    thing.ИСТОЧНИК_ЗАМЕЧАНИЯ = source;
                                                    thing.НАИМЕНОВАНИЕ = description;
                                                    thing.СЕКЦИЯ = sectionId;
                                                    thing.НЕОБХОДИМОСТЬ_СВЕРХЦИКЛОВЫХ_РАБОТ = isSCWorksNeeded;
                                                }
                                            } else {
                                                var remarkParams = {
                                                    name: remark_id,
                                                    description: description,
                                                    thingTemplateName: "2050ЭкземплярЗамечания",
                                                    tags: undefined
                                                };
                                                Resources["EntityServices"].CreateThing(remarkParams);
                                                thing = Things[remark_id];
                                                // Активируем и рестартим сущность
                                                thing.EnableThing();
                                                thing.RestartThing();
                                                // Наполняем данными новую сущность
                                                thing.ID_ASU = remark_id;
                                                thing.АВТОР_ЗАМЕЧАНИЯ = worker;
                                                thing.ДАТА_ЗАМЕЧАНИЯ = dateText;
                                                thing.ДК = diagnosticMap;
                                                thing.ИСТОЧНИК_ЗАМЕЧАНИЯ = source;
                                                thing.НАИМЕНОВАНИЕ = description;
                                                thing.СЕКЦИЯ = sectionId;
                                                thing.НЕОБХОДИМОСТЬ_СВЕРХЦИКЛОВЫХ_РАБОТ = isSCWorksNeeded;
                                            }
                                        
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            if (response.Kod) {
                                                //Set the 1C code if one was received
                                                thing.КОД1С = response.Kod;
                                            }
                                            result = response;
                                            result.RemarkId = thing.ID_ASU;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddWork">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var CONN_INSECTION_PLAN = 'connInspectionPlan';
                                        var result = {};
                                        
                                        function sendRequest(params) {
                                            var response = Resources["ContentLoaderFunctions"].PostText(params);
                                            var lastIndexOf = response.lastIndexOf("^");
                                            if (lastIndexOf !== -1) { response = response.substring(0, lastIndexOf); }
                                            try {
                                                return JSON.parse(response);
                                            } catch (err) {
                                                throw new Error('Ошибка при обращении к сервису SMoPP: ' + response);
                                            }
                                        }
                                        
                                        function setupThing(user, thing) {
                                            thing.Date = dateTime;
                                            thing.DiagnosticMap = diagnosticMap;
                                            thing.Employee = user.workers;
                                            thing.ID = user.inspectionId;
                                            thing.LocomotiveSerie = locomotive_serie;
                                            thing.SectionNumber = number;
                                            thing.SectionSubnumber = subnumber;
                                            thing.TypeOfRepair = typeOfRepair;
                                        }
                                        
                                        function parseThing(user) {
                                            var thing = Things[user.insectionId];
                                            if (thing !== undefined && thing !== null) {
                                                if (thing.thingTemplate === CONN_INSECTION_PLAN) {
                                                    thing.Date = dateTime;
                                                    setupThing(user, thing);
                                                }
                                            } else {
                                                var planParams = {
                                                    name: user.inspectionId /* STRING */,
                                                    description: "План проверки секции " + number /* STRING */,
                                                    thingTemplateName: CONN_INSECTION_PLAN /* THINGTEMPLATENAME */,
                                                    tags: undefined /* TAGS */
                                                };
                                                Resources["EntityServices"].CreateThing(planParams);
                                                thing = Things[user.inspectionId];
                                                // Активируем и рестартим сущность
                                                thing.EnableThing();
                                                thing.RestartThing();
                                                // Наполняем данными новую сущность
                                                setupThing(user, thing);
                                            }
                                            result = {
                                                ID: thing.ID,
                                                Date: thing.Date,
                                                Employee: thing.Employee
                                            };
                                        }
                                        
                                        function parseResponse(response) {
                                            if (response.error_code === 200) {
                                                var users = response.users;
                                                if (users !== undefined) {
                                                    users.forEach(function (user) {
                                                        parseThing(user);
                                                        result.push({
                                                            InspectionPlan: user.inspectionId,
                                                            Employee: user.workers
                                                        });
                                                    });
                                                } else {
                                                    if (response.workers) {
                                                        parseThing(response);
                                                    } else {
                                                        throw new Error('Некорректный формат ответа от сервера при вызове api/service/addWork');
                                                    } 
                                                   
                                                }
                                            } else {
                                                //Something goes wrong
                                                if (response.error_message !== undefined) {
                                                    result.error = response.error_message;
                                                } else {
                                                    result = {
                                                        error: 'Неизвестная ошибка на сервере',
                                                        errorDescription: response
                                                    };
                                                }
                                            }
                                        }
                                        
                                        try {
                                            if (number && subnumber && diagnosticMap && dateTime && typeOfRepair && locomotive_serie) {
                                                var headers = {
                                                    "Content-Type": "application/json",
                                                    "Accept": "application/json",
                                                    "authAppKey": "07a13c8907d1-6a7bdba1-a2fz-aatgu4j"
                                                };
                                                var content = {
                                                    series: locomotive_serie,
                                                    number: number,
                                                    subnumber: subnumber,
                                                    diagnosticCard: diagnosticMap,
                                                    kind: typeOfRepair,
                                                    dateTime: dateTime
                                                };
                                                
                                            
                                                var requestParams = {
                                                    proxyScheme: undefined,
                                                    headers: headers,
                                                    ignoreSSLErrors: true,
                                                    useNTLM: undefined,
                                                    workstation: undefined,
                                                    useProxy: undefined,
                                                    withCookies: undefined,
                                                    proxyHost: undefined,
                                                    url: 'http://corp.prmsys.net/api/service/addwork',
                                                    content: content,
                                                    timeout: undefined,
                                                    proxyPort: undefined,
                                                    password: undefined,
                                                    domain: undefined,
                                                    contentType: undefined,
                                                    username: undefined
                                                };
                                           
                                                var response = sendRequest(requestParams);
                                                logger.debug(response);
                                                if (response !== undefined) {
                                                    parseResponse(response);
                                                } else {
                                                    result = {
                                                        Error: 'Ошибка при обращении к сервису SMoPP: ' + response
                                                    };
                                                }
                                            } else throw new Error('Проверьте входные параметры');
                                        } catch (err) {
                                            result.error = {
                                                request: {
                                                    requestParams: requestParams,
                                                    headers: headers
                                                },
                                                response: response,
                                                message: err.message,
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddWorkRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var CONN_RFID_INSECTION_PLAN = 'connRFIDInspectionPlan';
                                        var result = {};
                                        
                                        function sendRequest(params) {
                                            var response = Resources["ContentLoaderFunctions"].PostText(params);
                                            var lastIndexOf = response.lastIndexOf("^");
                                            if (lastIndexOf !== -1) { response = response.substring(0, lastIndexOf); }
                                            try {
                                                return JSON.parse(response);
                                            } catch (err) {
                                                throw new Error('Ошибка при обращении к сервису SMoPP: ' + response);
                                            }
                                        }
                                        
                                        function setupThing(user, thing) {
                                            thing.Date = dateTime;
                                            thing.Employee = user.workers;
                                            thing.ID = user.inspectionId;
                                            thing.LocomotiveSerie = series;
                                            thing.RFID = rfid;
                                            thing.SectionNumber = number;
                                            thing.SectionSubnumber = subnumber;
                                        }
                                        
                                        function parseThing(user) {
                                            var thing = Things[user.insectionId];
                                            if (thing !== undefined && thing !== null) {
                                                if (thing.thingTemplate === CONN_RFID_INSECTION_PLAN) {
                                                    thing.Date = dateTime;
                                                    setupThing(user, thing);
                                                }
                                            } else {
                                                var planParams = {
                                                    name: user.inspectionId /* STRING */,
                                                    description: "План проверки секции " + number /* STRING */,
                                                    thingTemplateName: CONN_RFID_INSECTION_PLAN /* THINGTEMPLATENAME */,
                                                    tags: undefined /* TAGS */
                                                };
                                                Resources["EntityServices"].CreateThing(planParams);
                                                thing = Things[user.inspectionId];
                                                // Активируем и рестартим сущность
                                                thing.EnableThing();
                                                thing.RestartThing();
                                                // Наполняем данными новую сущность
                                                setupThing(user, thing);
                                            }
                                            result = {
                                                ID: thing.ID,
                                                Date: thing.Date,
                                                Employee: thing.Employee
                                            };
                                        }
                                        
                                        function parseResponse(response) {
                                            if (response.error_code === 200) {
                                                var users = response.users;
                                                if (users !== undefined) {
                                                    users.forEach(function (user) {
                                                        parseThing(user);
                                                        result.push({
                                                            InspectionPlan: user.inspectionId,
                                                            Employee: user.workers
                                                        });
                                                    });
                                                } else {
                                                    if (response.workers) {
                                                        parseThing(response);
                                                    } else throw new Error('Некорректный формат ответа от сервера при вызове api/service/checkrfid');
                                                }
                                            } else {
                                                //Something goes wrong
                                                if (response.error_message !== undefined) {
                                                    result.error = response.error_message;
                                                } else {
                                                    result = {
                                                        error: 'Неизвестная ошибка на сервере'
                                                    };
                                                }
                                            }
                                        }
                                        
                                        try {
                                            if (series && number && subnumber && rfid && dateTime) {
                                                var headers = {
                                                    "Content-Type": "application/json",
                                                    "Accept": "application/json",
                                                    "authAppKey": "07a13c8907d1-6a7bdba1-a2fz-aatgu4j"
                                                };
                                                var content = {
                                                    series: series,
                                                    number: number,
                                                    subnumber: subnumber,
                                                    dateTime: dateTime
                                                };
                                               
                                                var requestParams = {
                                                    proxyScheme: undefined,
                                                    headers: headers,
                                                    ignoreSSLErrors: true,
                                                    useNTLM: undefined,
                                                    workstation: undefined,
                                                    useProxy: undefined,
                                                    withCookies: undefined,
                                                    proxyHost: undefined,
                                                    url: 'http://corp.prmsys.net/api/service/checkrfid',
                                                    content: content,
                                                    timeout: undefined,
                                                    proxyPort: undefined,
                                                    password: undefined,
                                                    domain: undefined,
                                                    contentType: undefined,
                                                    username: undefined
                                                };
                                            
                                                var response = sendRequest(requestParams);
                                                logger.debug(response);
                                                if (response !== undefined) {
                                                    parseResponse(response);
                                                } else {
                                                    //Something goes wrong 
                                                    result = {
                                                        Error: 'Ошибка при обращении к сервису SMoPP: ' + response
                                                    };
                                                }
                                            } else throw new Error('Проверьте входные параметры');
                                        } catch (err) {
                                            result.error = {
                                                request: {
                                                    requestParams: requestParams,
                                                    headers: headers
                                                },
                                                response: response,
                                                message: err.message,
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="convert_date">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**
                                        * Конвертация текущего времени в строку для АСУ СГ
                                        **/
                                        if (date !== undefined /*&& date.length*/) {
                                           	var d = new Date(parseInt(date)*1000);
                                        } else {
                                        	var d = new Date();
                                        }
                                        
                                        var day = (d.getDate() < 10 ? '0' : '') + d.getDate();
                                        var month = (d.getMonth()+1 < 10 ? '0' : '') + (d.getMonth()+1);
                                        var year = d.getFullYear();
                                        
                                        var result = year+"-"+month+"-"+day;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_comment">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetCommentsResponse.*[1];
                                            var containsCommentsLine = resultXML.*:: CommentsLine.length() !== 0;
                                            if (containsCommentsLine) {
                                                var node = resultXML.* :: CommentsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Description: node.*:: Description.toString(),
                                                    SourceOfComment: node.*:: SourceOfComment.toString(),
                                                    CreationDate: node.*:: CreationDate.toString(),
                                                    Plant: node.*:: Plant.toString(),
                                                    ViewOwner: node.*:: ViewOwner.toString(),
                                                    Owner: node.*:: Owner.toString()
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных праметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Проверка входных параметров и проброс ошибки если параметры не верные
                                            if (!commentId) throw new Error('Укажите id комментария');
                                            // Сборка тела soap запроса
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                            <soap:Header/>\
                                            <soap:Body>\
                                               <eipp:GetComments>\
                                                  <eipp:Guid>\
                                                     <!--Zero or more repetitions:-->\
                                                     <eipp:GuidLine>' + commentId + '</eipp:GuidLine>\
                                                     <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                     <eipp:Start></eipp:Start>\
                                                     <eipp:End></eipp:End>\
                                                  </eipp:Guid>\
                                               </eipp:GetComments>\
                                            </soap:Body>\
                                            </soap:Envelope>';
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            // Обработка ошибок
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_employee_status">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: ObtainTheStatusOfTheEmployeeResponse.* [1];
                                            var containsStatus = resultXML.*:: ObtainTheStatusOfTheEmployeeLine.length() !== 0;
                                            if (containsStatus) {
                                                var node = resultXML.*:: ObtainTheStatusOfTheEmployeeLine;
                                                return {
                                                    Sotrudnik: node.*:: Sotrudnik.toString(),
                                                    Status: node.*:: Status.toString(),
                                                    Date: node. *:: Date.toString()
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            if (date) {
                                                if (worker) {
                                                    var dateText = me.convert_date({ date: date /* STRING */ });
                                                    var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org"><soapenv:Header/><soapenv:Body><eipp:ObtainTheStatusOfTheEmployee><eipp:Parameter><eipp:Sotrudnik>' + worker + '</eipp:Sotrudnik><eipp:Date>' + dateText + '</eipp:Date></eipp:Parameter></eipp:ObtainTheStatusOfTheEmployee></soapenv:Body></soapenv:Envelope>';
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                                    var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                                    var response = parseXMLResponse(xmlResponse);
                                                    this.result = response;
                                                } else throw new Error('Укажите id сотрудника');
                                            } else throw new Error('Укажите дату');
                                        } catch (err) {
                                            // Обработка ошибок
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_locomotivename">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var obj = {};
                                        var result = [];
                                        obj.LocoNumber = "";
                                        
                                        // Поиск локомотива в ЕИПП, если такого нет, то ищем в АСУ СГ
                                        if (Things[id] !== null && Things[id].thingTemplate === "2050Lokomotiv") {
                                            obj.LocoNumber = Things[id].БОРТОВОЙ_НОМЕР;
                                        } else { 
                                        		if (id !== undefined && id.length) {
                                                    // Сборка тела soap запроса
                                                    var content ='<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                                <soap:Header/>\
                                                                <soap:Body>\
                                                                      <eipp:GetLocomotiveSeries>\
                                                                         <eipp:Guid>\
                                                                            <eipp:GuidLine>'+id+'</eipp:GuidLine>\
                                                                         </eipp:Guid>\
                                                                      </eipp:GetLocomotiveSeries>\
                                                                </soap:Body>\
                                                                </soap:Envelope>';
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                                    var text = Resources["ContentLoaderFunctions"].PostText(params);
                                                    if ((typeof text != "undefined") && (text.indexOf("</soap:Envelope") >= 0) && (text.indexOf("<m:ErrorDescription>") === -1)) {
                                                        text = text.replace(/\b/g,'');
                                                        text = text.replace(/\r/g,'');
                                                        text = text.replace(/\t/g,'');
                                                        text = text.replace(/\n/g,'');
                                                       	text = text.replace('</m:LocomotiveSeriesLine>','');
                                                        text = text.replace('</m:return>','');
                                                        text = text.replace('</m:GetLocomotiveSeriesResponse>','');
                                                        text = text.replace('</soap:Body>','');
                                                        text = text.replace('</soap:Envelope>','');
                                        				var arr1 = text.split('<m:LocomotiveSeriesLine>');
                                        
                                                        var arr = [];
                                                        var rest = {};
                                                        var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                        
                                                        if (arr1.length > 0) {
                                                            for (var j = 1; j < arr1.length; j++) {
                                                                if (arr1[j].length) {
                                                                    // multipurpose parser to JSON - dataObj
                                                                    arr1[j] = arr1[j].replace(/(\<m\:)/g,'<').replace(/(\<\/m\:)/g,'</').replace('</PlanDateLine>', '');
                                                                    var m;
                                                                    var dataObj = {};
                                                                    while ((m = regex.exec(arr1[j])) !== null) {
                                                                        if (m.index === regex.lastIndex) {
                                                                            regex.lastIndex++;
                                                                        }    
                                                                        var lastKey = "";
                                                                        m.forEach(function (match, groupIndex, i) {
                                                                          if (parseInt(groupIndex) > 0) {
                                                                            if (groupIndex == 1) {
                                                                              lastKey = match;
                                                                              dataObj[lastKey] = null;
                                                                            } else if (groupIndex == 2) {
                                                                              dataObj[lastKey] = match;
                                                                            }
                                                                          }
                                                                        });
                                                                    }
                                                                    arr.push(dataObj);
                                                                }
                                                             }
                                                            obj.LocoNumber = arr[0].Name;
                                                        }
                                                        
                                                } else {
                                                    obj.Error = "ThingWorx Data Error";
                                                }
                                            }	
                                        }
                                        result = obj;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_position_list">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*::Body.*::GetPositionsResponse.*[1];
                                            var containsPositionsLines = resultXML.*::PositionsLine.length() !== 0;
                                            if (containsPositionsLines) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*::PositionsLine.length(); i++) {
                                                    var node = resultXML.*::PositionsLine[i];
                                                    result.push({
                                                        ID: node.*::ID.toString(),
                                                        Kod: node.*::Kod.toString(),
                                                        Name: node.*::Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*::ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основеное тело скрипта
                                        **/
                                        // Если идентификатор определен, собираем тело soap запроса с полем GuidLine, иначе без него
                                        if (uId) {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetPositions>\
                                                        <eipp:Guid>\
                                                            <eipp:GuidLine>' + uId + '</eipp:GuidLine>\
                                                        </eipp:Guid>\
                                                    </eipp:GetPositions>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        } else {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetPositions>\
                                                        <eipp:Guid>\
                                                        </eipp:Guid>\
                                                    </eipp:GetPositions>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        }
                                        
                                        var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: me.ASU_URL_TEST_1 /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        });
                                        var response = parseXMLResponse(xmlResponse);
                                        this.result = response;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_repair_sites">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = [];
                                        
                                        // Сборка тела soap запроса для АСУ СГ  
                                        var content ='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org"><soapenv:Header/><soapenv:Body><eipp:GetRepairSites><eipp:Guid></eipp:Guid></eipp:GetRepairSites></soapenv:Body></soapenv:Envelope>';
                                        var params = {
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: 'http://1cdev.locotech.ru/urp_TB_02/ru_RU/ws/IntegrationEIPP' /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        };
                                        var text = Resources["ContentLoaderFunctions"].PostText(params);
                                        
                                        /**
                                        * Алгоритм парсинга ответа от АСУ СГ
                                        **/
                                        // Проверка на наличие ошибки в ответе от АСУ СГ
                                        if ((typeof text != "undefined") && (text.indexOf("</soap:Envelope") >= 0) && (text.indexOf("<m:ErrorDescription>") === -1) && (text.indexOf("ошибка") === -1)) {
                                            // Удаление знаков табуляции и переноса из овтета
                                            text = text.replace(/\b/g,'');
                                            text = text.replace(/\r/g,'');
                                            text = text.replace(/\t/g,'');
                                            text = text.replace(/\n/g,'');
                                            // Удаление служебных и прочих тегов из ответа
                                            text = text.replace('</m:return>','');
                                            text = text.replace('</m:GetRepairSitesResponse>','');
                                            text = text.replace('</soap:Body>','');
                                            text = text.replace('</soap:Envelope>','');
                                            var arr1 = text.split('<m:RepairSitesLine>');
                                        
                                            var arr = [];
                                            var rest = {};
                                            var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                        
                                            if (arr1.length > 0) {
                                                for (var j = 1; j < arr1.length; j++) {
                                                    if (arr1[j].length) {
                                                        // multipurpose parser to JSON - dataObj
                                                        arr1[j] = arr1[j].replace(/(\<m\:)/g,'<').replace(/(\<\/m\:)/g,'</').replace('</m:RepairSitesLine>', '');
                                                        var m;
                                                        var dataObj = {};
                                                        var obj = {};
                                                        while ((m = regex.exec(arr1[j])) !== null) {
                                                            if (m.index === regex.lastIndex) {
                                                                regex.lastIndex++;
                                                            }    
                                                            var lastKey = "";
                                                            m.forEach(function (match, groupIndex, i) {
                                                              if (parseInt(groupIndex) > 0) {
                                                                if (groupIndex == 1) {
                                                                  lastKey = match;
                                                                  dataObj[lastKey] = null;
                                                                } else if (groupIndex == 2) {
                                                                  dataObj[lastKey] = match;
                                                                }
                                                              }
                                                            });
                                                        }
                                                        arr.push(dataObj);
                                                        obj.ID = dataObj.ID;
                                                    	obj.Name = dataObj.Name;
                                                        result.push(obj);
                                                    }
                                                }
                                            }
                                        } else {
                                            // Обработка ошибок
                                            err = {};
                                            err.Error = "ThingWorx Data Error";
                                            result.push(obj);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_section_info">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var SECTION_TEMPLATE = '2050Секция';
                                        var result = {};
                                        var rfidlib = Things['connRfidLibrary'];
                                        
                                        // Метод для поиска секции по субномеру
                                        function findBySubnumber(subnumber) {
                                           var params = {
                                                maxItems: 1,
                                                nameMask: undefined,
                                                query: {
                                                    filters: { type: 'MATCHES', fieldName: 'НОМЕР', expression: subnumber }
                                                },
                                                thingTemplate: SECTION_TEMPLATE,
                                                tags: undefined
                                            };
                                            return Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        }
                                        
                                        // Метод для получения форматированного формата строки текущей даты
                                        function getCurrentDate() {
                                            var date = new Date();
                                            var day = (date.getDate() < 10 ? '0' : '') + date.getDate();
                                            var month = (date.getMonth() + 1 < 10 ? '0' : '') + (date.getMonth() + 1);
                                            var year = date.getFullYear();
                                            return year + '-' + month + '-' + day;
                                        }
                                        
                                        // Метод для валидации даты и времени
                                        function validateTime(mestime) {
                                            return mes_time && (/^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2})?(\+\d{2}:\d{2})?$/g.test(mes_time));
                                        }
                                        
                                        // Метод для обработки времени
                                        function timeHandling(mes_time) {
                                            var res = {};
                                            res.error = 0;
                                            res.errorDescription = "";
                                            res.date = "";
                                            if (validateTime(mes_time)) {
                                            	if (mes_time.indexOf('+') !== -1) {
                                                    res.date = mes_time.substring(0, mes_time.indexOf('+'));
                                                } else {
                                                    res.date = mes_time;
                                                }
                                            } else {
                                            	res.date = mes_time;
                                                res.error = 1;
                                            	res.errorDescription = "Некорректный формат времени. Время должно быть преставлено в форматах 'YYYY-MM-DD HH:MM:SS' или 'YYYY-MM-DD HH:MM:SS+HH:MM'";
                                            }
                                            return res;
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Проверка входных параметов и проброс ошибки если параметры не верные
                                            if (subnum_section) {
                                                if (subnum_section.length !== 8) throw new Error('Некорректный субномер секции');
                                                
                                                var date = timeHandling(mes_time);
                                                if (date.error) throw new Error(date.errorDescription);
                                                
                                                
                                                var section = findBySubnumber(subnum_section);
                                                var locomotive = me.GetLocomotiveSectionDate({
                                                    date: date.date,
                                                    subnum_section: subnum_section,
                                                    placeOfRepair: placeOfRepair
                                                });
                                                //logger.info(getCurrentDate());
                                                if (locomotive) {
                                                    // Поиск локомотива по серии
                                                    var locomotiveSeries = rfidlib.GetLocomotiveSeries({ locomotive_serie: locomotive.LocomotiveSeries /* STRING */ });
                                                    if (locomotiveSeries.Name) {
                                                        // Получение секций локомотива
                                                        var sectionsInfo = locomotive.Sections.map(function(item) { return rfidlib.GetSection({ sectionId: item /* STRING */ }); });
                                                        var sectionInfo = sectionsInfo.filter(function(item) { 
                                                           return item && !item.error && item.Number === subnum_section; 
                                                        })[0]; //Берем первое значение, где субномер секции совпадает с входным субномером
                                                        if (sectionInfo) {
                                                            this.result = {
                                                                locomotive_ser: locomotiveSeries.ID,
                                                                locomotive_num: locomotiveSeries.Name,
                                                                diagnosticMap: locomotive.DiagnosticMapslocomotive,
                                                                sld: sectionInfo.HomeDepot,
                                                                sld_toir: '',
                                                                section_id: sectionInfo.ID,
                                                                section_subnum: sectionInfo.Number,
                                                                section_num: sectionInfo.Name,
                                                                //time: date.date
                                                            };
                                                        } else throw new Error('Информация о секции не найдена');
                                                    } else throw new Error('Информация о секции не найдена');
                                                } else throw new Error('Информация о секции не найдена');
                                            } else throw new Error('Укажите субномер секции');
                                        } catch (err) {
                                            // Обработка ошибок
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_section_list">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга запроса от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var response = xmlResponse.toString();
                                            // Проверка на наличие ошибок в ответе
                                            if (response && response.indexOf("<m:ErrorDescription>") === -1) {
                                                // Удаление знаков табуляции и переносов из ответа
                                                response = response.replace(/\b/g, '')
                                                    .replace(/\r/g, '')
                                                    .replace(/\t/g, '')
                                                    .replace(/\n/g, '');
                                                // Удаление служебных и прочих тэгов из овтета
                                                response = response.replace('</m:return>', '')
                                                    .replace('</m:GetSections>', '')
                                                    .replace('</soap:Body>', '')
                                                    .replace('</soap:Envelope>', '')
                                                    .replace('</m:GetPlanDateResponse>', '');
                                                var arr1 = response.split('<m:PlanDateLine>');
                                        
                                                var arr = [];
                                                var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                                if (arr1.length > 0) {
                                                    for (var j = 1; j < arr1.length; j++) {
                                                        if (arr1[j].length) {
                                                            // multipurpose parser to JSON - dataObj
                                                            arr1[j] = arr1[j].replace(/(\<m\:)/g, '<').replace(/(\<\/m\:)/g, '</').replace('</PlanDateLine>', '');
                                                            var m;
                                                            var dataObj = {};
                                                            while ((m = regex.exec(arr1[j])) !== null) {
                                                                if (m.index === regex.lastIndex) {
                                                                    regex.lastIndex++;
                                                                }
                                                                var lastKey = "";
                                                                m.forEach(function (match, groupIndex, i) {
                                                                    if (parseInt(groupIndex) > 0) {
                                                                        if (groupIndex == 1) {
                                                                            lastKey = match;
                                                                            dataObj[lastKey] = null;
                                                                        } else if (groupIndex == 2) {
                                                                            dataObj[lastKey] = match;
                                                                        }
                                                                    }
                                                                });
                                                            }
                                        
                                                            // Additional data
                                                            // Section Number & Section Subnumber
                                                            var res = me.get_section_name({
                                                                id: dataObj.Section
                                                            });
                                                            dataObj.SectionSubnumber = res.Number;
                                                            dataObj.SectionNumber = res.Name;
                                        
                                                            // Lokomotive Number
                                                            var res = me.get_locomotivename({
                                                                id: dataObj.LocomotiveSeries
                                                            });
                                                            dataObj.LocomotiveNumber = res.LocoNumber;
                                        
                                                            // Type of Repair
                                                            var repair = me.get_type_of_repair({
                                                                id: dataObj.TypeOfRepair
                                                            });
                                                            dataObj.TypeOfRepair = repair;
                                        
                                                            // Push
                                                            arr.push(dataObj);
                                                        }
                                                    }
                                                }
                                                return arr;
                                            } else throw new Error('Нет данных в АСУ СГ');
                                        }
                                        
                                        /** SCRIPT **/
                                        //try {
                                            if (date) {
                                                if (place) {
                                                    var date_text = me.convert_date({ date: date /* STRING */ });
                                                    var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                    <soap:Header/>\
                                                    <soap:Body>\
                                                    <eipp:GetPlanDate>\
                                                    <eipp:Parameter>\
                                                    <eipp:Date>' + date_text + '</eipp:Date>\
                                                    <eipp:PlaceOfRepair>' + place + '</eipp:PlaceOfRepair>\
                                                    <eipp:TypeOfRepair/>\
                                                    <eipp:LocomotiveSeries/>\
                                                    <eipp:HomeDepot></eipp:HomeDepot>\
                                                    </eipp:Parameter>\
                                                    </eipp:GetPlanDate>\
                                                    </soap:Body>\
                                                    </soap:Envelope>';
                                        			//logger.info("content "+content);
                                        
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: "http://1cdev.locotech.ru/urp_TB_02/ru_RU/ws/IntegrationEIPP" /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 5000 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                        			
                                                    var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                                    //logger.info("xmlResponse "+xmlResponse);
                                        
                                                    var response = parseXMLResponse(xmlResponse);
                                                    this.result = response;
                                        
                                                } else throw new Error('Укажите место');
                                            } else throw new Error('Укажите дату');
                                        //} catch (err) {
                                         //   result.error = err.message;
                                        //}
                                        /** END SCRIPT **/
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_section_list_v2">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {
                                        	"result": true,
                                            "data": []
                                        };
                                        var params = {
                                        	maxItems: 3000 /* NUMBER */ ,
                                        	nameMask: undefined /* STRING */ ,
                                        	query: undefined /* QUERY */ ,
                                        	thingTemplate: "2050LokoRepair" /* THINGTEMPLATENAME */ ,
                                        	tags: undefined /* TAGS */
                                        };
                                        var repairs = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        if (typeof Date !== "undefined") {
                                        	var dateTo = Date.getTime() + 259200000;
                                        }
                                        
                                        for (var i = 0; i < repairs.length; i++) {
                                        	var repair = Things[repairs.getRow(i).name];
                                            
                                            if (place === repair.МЕСТО_ПРИВЯЗКИ) {
                                        		var sections = repair.СЕКЦИИ;
                                                
                                                for (var j = 0; j < sections.length; j++) {
                                                	var section = Things[sections.getRow(j).Секция];
                                                    if (section.НАЗНАЧЕННАЯ_ДАТА_ТО < dateTo && Date < section.НАЗНАЧЕННАЯ_ДАТА_ТО) {
                                        				var locomotive = Things[repair.ОБОРУДОВАНИЕ];
                                                        var JSON = new Object();
                                                        JSON.locSerial = locomotive.НАИМЕНОВАНИЕ;
                                                        JSON.sectionNumber = section.НАИМЕНОВАНИЕ;
                                                        JSON.sectionSubnumber = section.НОМЕР;
                                                        JSON.DK = section.ТЕКУЩАЯ_ДК;
                                                        JSON.typeOfRepair = repair.ТИП_РЕМОНТА;
                                                        JSON.date = section.НАЗНАЧЕННАЯ_ДАТА_ТО;
                                                        result.data.push(JSON);
                                                	}
                                                }
                                            }
                                        }
                                        
                                        
                                        //a044a70e-f049-11e1-8e8b-001517e6ca10
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_section_name">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetSectionsResponse.*[1];
                                            var containsSectionLine = resultXML.*:: SectionsLine.length() !== 0;
                                            if (containsSectionLine) {
                                                var node = resultXML.*:: SectionsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString(),
                                                    Number: node.*:: Number.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString()
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            if (id) {
                                                // Сборка тела soap запроса
                                                var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                <soap:Header/>\
                                                <soap:Body>\
                                                <eipp:GetSections>\
                                                 <eipp:Guid>\
                                                 <!--Zero or more repetitions:-->\
                                                    <eipp:GuidLine>' + id + '</eipp:GuidLine>\
                                                    <!--Optional:-->\
                                                    <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                    <!--Optional:-->\
                                                    <eipp:Start></eipp:Start>\
                                                    <!--Optional:-->\
                                                    <eipp:End></eipp:End>\
                                                </eipp:Guid>\
                                                </eipp:GetSections>\
                                                </soap:Body>\
                                                </soap:Envelope>';
                                        
                                                var requestParams = {
                                                    proxyScheme: undefined /* STRING */,
                                                    headers: undefined /* JSON */,
                                                    ignoreSSLErrors: undefined /* BOOLEAN */,
                                                    useNTLM: undefined /* BOOLEAN */,
                                                    workstation: undefined /* STRING */,
                                                    useProxy: undefined /* BOOLEAN */,
                                                    withCookies: undefined /* BOOLEAN */,
                                                    proxyHost: undefined /* STRING */,
                                                    url: me.ASU_URL_TEST_1 /* STRING */,
                                                    content: content /* STRING */,
                                                    timeout: 0 /* NUMBER */,
                                                    proxyPort: undefined /* INTEGER */,
                                                    password: "11012019" /* STRING */,
                                                    domain: undefined /* STRING */,
                                                    contentType: undefined /* STRING */,
                                                    username: "ws_eipp" /* STRING */
                                                };
                                                var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(requestParams);
                                                var response = parseXMLResponse(xmlResponse);
                                                this.result = response;
                                            } else throw new Error('Укажите id секции');
                                        } catch (err) {
                                            // Обработка ошибок
                                            result.error = {
                                                request: {
                                                    requestParams: requestParams
                                                },
                                                response: response,
                                                message: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_section_remarks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var SECTION_TEMPLATE = '2050Секция';
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetListCommentsOnRecreationCenterRenovationOfLocomotiveResponse.* [1];
                                            var containsRemarkLists = resultXML.*:: RemarkList.length() !== 0;
                                            if (containsRemarkLists) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: RemarkList.length(); i++) {
                                                    var node = resultXML.*:: RemarkList[i];
                                                    var listOfWork = [];
                                                    for (var j = 0; j < node.*:: ListOfWork.length(); j++) {
                                                        var internalNode = node.*:: ListOfWork[j];
                                                        listOfWork.push({
                                                            Work: internalNode.*:: Work.toString(),
                                                            Site: internalNode.*:: Site.toString(),
                                                            PercentageOfCompletion: internalNode.*:: PercentageOfCompletion.toString()
                                                        });
                                                    }
                                                    result.push({
                                                        CommentId: node.*:: Comment.toString(),
                                                        Comment: me.get_comment({ commentId: node.*:: Comment.toString() /* STRING */ }).Description,
                                                        Status: node.*:: Status.toString(),
                                                        //ListOfWork: listOfWork
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            // Получаем секцию на стороне ЕИПП
                                            var thing = Things[section_id];
                                            if (thing && thing.thingTemplate === SECTION_TEMPLATE) {
                                                var diagnosticMap = thing.ТЕКУЩАЯ_ДК;
                                                if (diagnosticMap) {
                                                    // Собираем тело soap запроса для АСУ СГ с диагностической картой
                                                    var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                        <soap:Header/>\
                                                        <soap:Body>\
                                                            <eipp:GetListCommentsOnRecreationCenterRenovationOfLocomotive>\
                                                            <eipp:Parameter>\
                                                                <eipp:DiagnosticMapslocomotive>' + diagnosticMap + '</eipp:DiagnosticMapslocomotive>\
                                                                <eipp:Comment></eipp:Comment>\
                                                            </eipp:Parameter>\
                                                            </eipp:GetListCommentsOnRecreationCenterRenovationOfLocomotive>\
                                                        </soap:Body>\
                                                    </soap:Envelope>';
                                                    var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    });
                                                    var response = parseXMLResponse(xmlResponse);
                                                    this.result = response;
                                                } else throw new Error('Невозможно найти диагностическую карту у секции с id ' + section_id);
                                            } else throw new Error('Невозможно найти секцию с id ' + section_id);
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_sld_list">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetSLDResponse.*[1];
                                            var containsSLDLines = resultXML.*:: GetSLDLine.length() !== 0;
                                            if (containsSLDLines) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: GetSLDLine.length(); i++) {
                                                    var node = resultXML.*:: GetSLDLine[i];
                                                    result.push({
                                                        ID: node.*:: ID.toString(),
                                                        Kod: node.*:: Kod.toString(),
                                                        Name: node.*:: Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Сборка тела soap запроса для АСУ СГ
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                            <soap:Header/>\
                                            <soap:Body>\
                                              <eipp:GetSLD>\
                                                 <eipp:Guid>\
                                                    <!--Zero or more repetitions:-->\
                                                 </eipp:Guid>\
                                              </eipp:GetSLD>\
                                            </soap:Body>\
                                            </soap:Envelope>';
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: "http://docs.tmh-service.ru/urp/ws/eipp.1cws" /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_sources_of_coments">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*::Body.*::GetSourcesOfCommentsResponse.*[1];
                                            var containsSourcesOfComments = resultXML.*::SourcesOfCommentsLine.length() !== 0;
                                            if (containsSourcesOfComments) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*::SourcesOfCommentsLine.length(); i++) {
                                                    var node = resultXML.*::SourcesOfCommentsLine[i];
                                                    result.push({
                                                        ID: node.*::ID.toString(),
                                                        Kod: node.*::Kod.toString(),
                                                        Name: node.*::Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    ErrorDescription: resultXML.*::ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        if (uId) {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetSourcesOfComments>\
                                                        <eipp:Guid>\
                                                            <eipp:GuidLine>' + uId + '</eipp:GuidLine>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSourcesOfComments>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        } else {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetSourcesOfComments>\
                                                        <eipp:Guid>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSourcesOfComments>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        }
                                        
                                        var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: me.ASU_URL_TEST_1 /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        });
                                        var response = parseXMLResponse(xmlResponse);
                                        this.result = response;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_sources_of_comments">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*::Body.*::GetSourcesOfCommentsResponse.*[1];
                                            var containsSourcesOfComments = resultXML.*::SourcesOfCommentsLine.length() !== 0;
                                            if (containsSourcesOfComments) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*::SourcesOfCommentsLine.length(); i++) {
                                                    var node = resultXML.*::SourcesOfCommentsLine[i];
                                                    result.push({
                                                        ID: node.*::ID.toString(),
                                                        Kod: node.*::Kod.toString(),
                                                        Name: node.*::Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    ErrorDescription: resultXML.*::ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Главное тело скрипта
                                        **/
                                        // Если идентификатор опредлен, собираем soap запрос с полем GuidLine, иначе без него
                                        if (uId) {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetSourcesOfComments>\
                                                        <eipp:Guid>\
                                                            <eipp:GuidLine>' + uId + '</eipp:GuidLine>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSourcesOfComments>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        } else {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetSourcesOfComments>\
                                                        <eipp:Guid>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSourcesOfComments>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        }
                                        
                                        var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: me.ASU_URL_TEST_1 /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        });
                                        var response = parseXMLResponse(xmlResponse);
                                        this.result = response;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_type_of_repair">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**
                                        * Внутренний метод для получения типа ремонта в ЕИПП или АСУ СГ
                                        **/
                                        if (Things[id]!=null && Things[id].thingTemplate==="2050TypeOfRepairs") {
                                            var result = Things[id].Name;
                                        } else { 
                                        		if (id !== undefined && id.length) {
                                                    var content ='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org"><soapenv:Header/><soapenv:Body><eipp:GetTypeOfRepair><eipp:Guid><!--Zero or more repetitions:--><eipp:GuidLine>'+id+'</eipp:GuidLine></eipp:Guid></eipp:GetTypeOfRepair></soapenv:Body></soapenv:Envelope>';
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                                    var text = Resources["ContentLoaderFunctions"].PostText(params);
                                        
                                                    // Парсинг ответа от АСУ СГ
                                                    text = text.replace(/\b/g,'');
                                                    text = text.replace(/\r/g,'');
                                                    text = text.replace(/\t/g,'');
                                                    text = text.replace(/\n/g,'');
                                                    text = text.replace('</m:GetTypeOfRepairResponse>','');
                                                    text = text.replace('</m:TypeOfRepairLine>','');
                                                    var arr1 = text.split('<m:TypeOfRepairLine>');
                                                    var arr = [];
                                                    var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                                    if (arr1.length > 0) {
                                                        for (var j = 1; j < arr1.length; j++) {
                                                            if (arr1[j].length) {
                                                                // multipurpose parser to JSON - dataObj
                                                                arr1[j] = arr1[j].replace(/(\<m\:)/g,'<').replace(/(\<\/m\:)/g,'</').replace('</PlanDateLine>', '');
                                                                var m;
                                                                var dataObj = {};
                                                                while ((m = regex.exec(arr1[j])) !== null) {
                                                                    if (m.index === regex.lastIndex) {
                                                                        regex.lastIndex++;
                                                                    }    
                                                                    var lastKey = "";
                                                                    m.forEach(function (match, groupIndex, i) {
                                                                      if (parseInt(groupIndex) > 0) {
                                                                        if (groupIndex == 1) {
                                                                          lastKey = match;
                                                                          dataObj[lastKey] = null;
                                                                        } else if (groupIndex == 2) {
                                                                          dataObj[lastKey] = match;
                                                                        }
                                                                      }
                                                                    });
                                                                }
                                                                // Push Data Object in Array
                                                                arr.push(dataObj);
                                                            }
                                                         } // end for
                                                    var params = {
                                                        name: arr[0].ID /* STRING */,
                                                        description: "экзампляр объекта тип ремонта. Название - "+arr[0].Name /* STRING */,
                                                        thingTemplateName: "2050TypeOfRepairs" /* THINGTEMPLATENAME */,
                                                        tags: undefined /* TAGS */
                                                    };
                                        			// no return
                                                    Resources["EntityServices"].CreateThing(params);
                                                    Things[arr[0].ID].EnableThing();
                                        			Things[arr[0].ID].RestartThing();
                                        			Things[arr[0].ID].Name = arr[0].Name;
                                                    Things[arr[0].ID].Kod = arr[0].Kod;
                                                    Things[arr[0].ID].ID = arr[0].ID;
                                                    } // end if
                                        		var result = arr[0].Name;
                                                } else {
                                                    var result = "";
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_worker_timetable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: WorkScheduleResponse.* [1];
                                            var containsShiftList = resultXML.*:: ShifList.length() !== 0;
                                            if (containsShiftList) {
                                                var shiftList = [];
                                                for (var i = 0; i < resultXML.*:: ShifList.length(); i++) {
                                                    var node = resultXML.*:: ShifList[i];
                                                    shiftList.push({
                                                        NumberDay: node.*:: NumberDay.toString(),
                                                        Сhange: node.*:: Сhange.toString()
                                                    });
                                                }
                                                return {
                                                    ID: resultXML.*:: ID.toString(),
                                                    Kod: resultXML.*:: Kod.toString(),
                                                    Name: resultXML.*:: Name.toString(),
                                                    Date: resultXML.*:: Date.toString(),
                                                    ShiftList: shiftList
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Получение информации о сотруднике по идентификатору
                                            var workerResult = me.get_workers({ sId: sId });
                                            // Обработка ошибки
                                            if (workerResult.ErrorDescription) {
                                                throw new Error(workerResult.ErrorDescription);
                                            } else {
                                                var worker = workerResult.array[0];
                                                // Сборка тела soap запроса для АСУ СГ
                                                var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                <soap:Header/>\
                                                    <soap:Body>\
                                                        <eipp:WorkSchedule>\
                                                            <eipp:Guid>\
                                                                <eipp:GuidLine>' + worker.WorkSchedule + '</eipp:GuidLine>\
                                                            </eipp:Guid>\
                                                        </eipp:WorkSchedule>\
                                                    </soap:Body>\
                                                </soap:Envelope>';
                                                var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                    proxyScheme: undefined /* STRING */,
                                                    headers: undefined /* JSON */,
                                                    ignoreSSLErrors: undefined /* BOOLEAN */,
                                                    useNTLM: undefined /* BOOLEAN */,
                                                    workstation: undefined /* STRING */,
                                                    useProxy: undefined /* BOOLEAN */,
                                                    withCookies: undefined /* BOOLEAN */,
                                                    proxyHost: undefined /* STRING */,
                                                    url: me.ASU_URL_TEST_1 /* STRING */,
                                                    content: content /* STRING */,
                                                    timeout: 0 /* NUMBER */,
                                                    proxyPort: undefined /* INTEGER */,
                                                    password: "11012019" /* STRING */,
                                                    domain: undefined /* STRING */,
                                                    contentType: undefined /* STRING */,
                                                    username: "ws_eipp" /* STRING */
                                                });
                                                var response = parseXMLResponse(xmlResponse);
                                                result = response;
                                            }
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="get_workers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var TIMEOUT = 90;
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetSotrudnikiResponse.* [1];
                                            var containsPersonLine = resultXML.*:: SotrudnikiLine.*.length() !== 0;
                                            if (containsPersonLine) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: SotrudnikiLine.length(); i++) {
                                                    var node = resultXML.*:: SotrudnikiLine[i]
                                                    result.push({
                                                        ID: node.*:: ID.toString(),
                                                        Kod: node.*:: Kod.toString().trim(),
                                                        GroupID: node.*:: GroupID.toString(),
                                                        Name: node.*:: Name.toString(),
                                                        NaturalPerson: node.*:: NaturalPerson.toString(),
                                                        Position: node.*:: Position.toString(),
                                                        DateDismissal: node.*:: DateDismissal.toString(),
                                                        DateEmployment: node.*:: DateEmployment.toString(),
                                                        Floor: node.*:: Floor.toString(),
                                                        DateOBirth: node.*:: DateOBirth.toString(),
                                                        ServiceNumber: node.*:: ServiceNumber.toString().trim(),
                                                        WorkSchedule: node.*:: WorkSchedule.toString(),
                                                        Subdivision: node.*:: Subdivision.toString(),
                                                        SLD: node.*:: SLD.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Проверка входных параметров, пробрасываение ошибки, если параметры неверны
                                            if ((start === undefined && end !== undefined) || 
                                                (start !== undefined && end === undefined)) throw new Error('Проверьте параметры ограничения выборки');
                                            if (start < 0 || end < 0) throw new Error('Границы выборки не должны быть меньше нуля');
                                            if (end <= start) throw new Error('Границы начала должны быть меньше границ конца выборки');
                                            
                                            // Сборка тела soap запроса для АСУ СГ
                                            var content = ['<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                <soap:Header/>\
                                                  <soap:Body>\
                                                    <eipp:GetSotrudniki>\
                                                      <eipp:Guid>',
                                                        (sId ? '<eipp:GuidLine>' + sId + '</eipp:GuidLine>' : ''),
                                                        (placeOfRepair ? '<eipp:PlaceOfRepair>' + placeOfRepair + '</eipp:PlaceOfRepair>' : ''),
                                                        '<eipp:SLD>' + (SLD || '') + '</eipp:SLD>\
                                                        <eipp:Start>' + (start || '') + '</eipp:Start>\
                                                        <eipp:End>' + (end || '') + '</eipp:End>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSotrudniki>\
                                                  </soap:Body>\
                                                </soap:Envelope>'].join('');
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: TIMEOUT /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetComment">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetCommentsResponse.*[1];
                                            var containsCommentsLine = resultXML.*:: CommentsLine.length() !== 0;
                                            if (containsCommentsLine) {
                                                var node = resultXML.* :: CommentsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Description: node.*:: Description.toString(),
                                                    SourceOfComment: node.*:: SourceOfComment.toString(),
                                                    CreationDate: node.*:: CreationDate.toString(),
                                                    Plant: node.*:: Plant.toString(),
                                                    ViewOwner: node.*:: ViewOwner.toString(),
                                                    Owner: node.*:: Owner.toString()
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных праметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            if (!commentId) throw new Error('Укажите id комментария');
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                            <soap:Header/>\
                                            <soap:Body>\
                                               <eipp:GetComments>\
                                                  <eipp:Guid>\
                                                     <!--Zero or more repetitions:-->\
                                                     <eipp:GuidLine>' + commentId + '</eipp:GuidLine>\
                                                     <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                     <eipp:Start></eipp:Start>\
                                                     <eipp:End></eipp:End>\
                                                  </eipp:Guid>\
                                               </eipp:GetComments>\
                                            </soap:Body>\
                                            </soap:Envelope>';
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetEmployeeStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: ObtainTheStatusOfTheEmployeeResponse.* [1];
                                            var containsStatus = resultXML.*:: ObtainTheStatusOfTheEmployeeLine.length() !== 0;
                                            if (containsStatus) {
                                                var node = resultXML.*:: ObtainTheStatusOfTheEmployeeLine;
                                                return {
                                                    Sotrudnik: node.*:: Sotrudnik.toString(),
                                                    Status: node.*:: Status.toString(),
                                                    Date: node. *:: Date.toString()
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        try {
                                            if (date) {
                                                if (worker) {
                                                    var dateText = me.convert_date({ date: date /* STRING */ });
                                                    var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org"><soapenv:Header/><soapenv:Body><eipp:ObtainTheStatusOfTheEmployee><eipp:Parameter><eipp:Sotrudnik>' + worker + '</eipp:Sotrudnik><eipp:Date>' + dateText + '</eipp:Date></eipp:Parameter></eipp:ObtainTheStatusOfTheEmployee></soapenv:Body></soapenv:Envelope>';
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                                    var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                                    var response = parseXMLResponse(xmlResponse);
                                                    this.result = response;
                                                } else throw new Error('Укажите id сотрудника');
                                            } else throw new Error('Укажите дату');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var obj = {};
                                        var result = [];
                                        obj.LocoNumber = "";
                                        
                                        if (Things[id] !== null && Things[id].thingTemplate === "2050Lokomotiv") {
                                            obj.LocoNumber = Things[id].БОРТОВОЙ_НОМЕР;
                                        } else { 
                                        		if (id !== undefined && id.length) {
                                                    var content ='<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                                <soap:Header/>\
                                                                <soap:Body>\
                                                                      <eipp:GetLocomotiveSeries>\
                                                                         <eipp:Guid>\
                                                                            <eipp:GuidLine>'+id+'</eipp:GuidLine>\
                                                                         </eipp:Guid>\
                                                                      </eipp:GetLocomotiveSeries>\
                                                                </soap:Body>\
                                                                </soap:Envelope>';
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                                    var text = Resources["ContentLoaderFunctions"].PostText(params);
                                                    if ((typeof text != "undefined") && (text.indexOf("</soap:Envelope") >= 0) && (text.indexOf("<m:ErrorDescription>") === -1)) {
                                                        text = text.replace(/\b/g,'');
                                                        text = text.replace(/\r/g,'');
                                                        text = text.replace(/\t/g,'');
                                                        text = text.replace(/\n/g,'');
                                                       	text = text.replace('</m:LocomotiveSeriesLine>','');
                                                        text = text.replace('</m:return>','');
                                                        text = text.replace('</m:GetLocomotiveSeriesResponse>','');
                                                        text = text.replace('</soap:Body>','');
                                                        text = text.replace('</soap:Envelope>','');
                                        				var arr1 = text.split('<m:LocomotiveSeriesLine>');
                                        
                                                        var arr = [];
                                                        var rest = {};
                                                        var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                        
                                                        if (arr1.length > 0) {
                                                            for (var j = 1; j < arr1.length; j++) {
                                                                if (arr1[j].length) {
                                                                    // multipurpose parser to JSON - dataObj
                                                                    arr1[j] = arr1[j].replace(/(\<m\:)/g,'<').replace(/(\<\/m\:)/g,'</').replace('</PlanDateLine>', '');
                                                                    var m;
                                                                    var dataObj = {};
                                                                    while ((m = regex.exec(arr1[j])) !== null) {
                                                                        if (m.index === regex.lastIndex) {
                                                                            regex.lastIndex++;
                                                                        }    
                                                                        var lastKey = "";
                                                                        m.forEach(function (match, groupIndex, i) {
                                                                          if (parseInt(groupIndex) > 0) {
                                                                            if (groupIndex == 1) {
                                                                              lastKey = match;
                                                                              dataObj[lastKey] = null;
                                                                            } else if (groupIndex == 2) {
                                                                              dataObj[lastKey] = match;
                                                                            }
                                                                          }
                                                                        });
                                                                    }
                                                                    arr.push(dataObj);
                                                                }
                                                             }
                                                            obj.LocoNumber = arr[0].Name;
                                                        }
                                                        
                                                } else {
                                                    obj.Error = "ThingWorx Data Error";
                                                }
                                            }	
                                        }
                                        result = obj;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveSectionDate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetCompositionLocomotiveSectionDateResponse.* [1];
                                            var containsLocomotiveSectionLine = resultXML.*:: CompositionLocomotiveSectionDateLine.*.length() !== 0;
                                            if (containsLocomotiveSectionLine) {
                                                var node = resultXML.*:: CompositionLocomotiveSectionDateLine;
                                                return {
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    ContractSO: node.*:: ContractSO.toString(),
                                                    DiagnosticMapslocomotive: node.*:: DiagnosticMapslocomotive.toString(),
                                                    Sections: [
                                                        node.*:: Section1.toString(), node.*:: Section2.toString(), node.*:: Section3.toString()
                                                    ]
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        try {
                                            var content = ['<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetCompositionLocomotiveSectionDate>\
                                                     <eipp:Parameter>\
                                                        <!--Optional:-->\
                                                        <eipp:Section_n>' + (section || '') + '</eipp:Section_n>\
                                                        <eipp:Date>' + (date || '') + '</eipp:Date>\
                                                        <!--Optional:-->\
                                                        <eipp:NumberSection>' + (subnum_section || '') + '</eipp:NumberSection>\
                                        <eipp:PlaceOfRepair_n>' + (placeOfRepair || '') + '</eipp:PlaceOfRepair_n>\
                                                     </eipp:Parameter>\
                                                  </eipp:GetCompositionLocomotiveSectionDate>\
                                               </soap:Body>\
                                            </soap:Envelope>'].join('');
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: "http://docs.tmh-service.ru/urp/ws/eipp.1cws" /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result = {
                                                error: err.message,
                                                xmlResponse: xmlResponse
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveSeries">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetLocomotiveSeriesResponse.*[1];
                                            var containsSeriesLine = resultXML.*:: LocomotiveSeriesLine.length() !== 0;
                                            if (containsSeriesLine) {
                                                var node = resultXML.*:: LocomotiveSeriesLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString()
                                                };
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            if (!locomotive_serie) throw new Error('');
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                            <soapenv:Body>\
                                              <eipp:GetLocomotiveSeries>\
                                                 <eipp:Guid>\
                                                    <!--Zero or more repetitions:-->\
                                                    <eipp:GuidLine>' + locomotive_serie + '</eipp:GuidLine>\
                                                 </eipp:Guid>\
                                              </eipp:GetLocomotiveSeries>\
                                            </soapenv:Body>\
                                            </soapenv:Envelope>';
                                            var xmlResponse = Resources['ContentLoaderFunctions'].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: "http://docs.tmh-service.ru/URP/ru_RU/ws/IntegrationEIPP?wsdl" /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPositionList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*::Body.*::GetPositionsResponse.*[1];
                                            var containsPositionsLines = resultXML.*::PositionsLine.length() !== 0;
                                            if (containsPositionsLines) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*::PositionsLine.length(); i++) {
                                                    var node = resultXML.*::PositionsLine[i];
                                                    result.push({
                                                        ID: node.*::ID.toString(),
                                                        Kod: node.*::Kod.toString(),
                                                        Name: node.*::Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*::ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        if (uId) {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetPositions>\
                                                        <eipp:Guid>\
                                                            <eipp:GuidLine>' + uId + '</eipp:GuidLine>\
                                                        </eipp:Guid>\
                                                    </eipp:GetPositions>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        } else {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetPositions>\
                                                        <eipp:Guid>\
                                                        </eipp:Guid>\
                                                    </eipp:GetPositions>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        }
                                        
                                        var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: me.ASU_URL_TEST_1 /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        });
                                        var response = parseXMLResponse(xmlResponse);
                                        this.result = response;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRepairSites">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = [];
                                        
                                        
                                        var content ='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org"><soapenv:Header/><soapenv:Body><eipp:GetRepairSites><eipp:Guid></eipp:Guid></eipp:GetRepairSites></soapenv:Body></soapenv:Envelope>';
                                        var params = {
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: me.ASU_URL_TEST_1 /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        };
                                        var text = Resources["ContentLoaderFunctions"].PostText(params);
                                        if ((typeof text != "undefined") && (text.indexOf("</soap:Envelope") >= 0) && (text.indexOf("<m:ErrorDescription>") === -1) && (text.indexOf("ошибка") === -1)) {
                                            text = text.replace(/\b/g,'');
                                            text = text.replace(/\r/g,'');
                                            text = text.replace(/\t/g,'');
                                            text = text.replace(/\n/g,'');
                                            text = text.replace('</m:return>','');
                                            text = text.replace('</m:GetRepairSitesResponse>','');
                                            text = text.replace('</soap:Body>','');
                                            text = text.replace('</soap:Envelope>','');
                                            var arr1 = text.split('<m:RepairSitesLine>');
                                        
                                            var arr = [];
                                            var rest = {};
                                            var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                        
                                            if (arr1.length > 0) {
                                                for (var j = 1; j < arr1.length; j++) {
                                                    if (arr1[j].length) {
                                                        // multipurpose parser to JSON - dataObj
                                                        arr1[j] = arr1[j].replace(/(\<m\:)/g,'<').replace(/(\<\/m\:)/g,'</').replace('</m:RepairSitesLine>', '');
                                                        var m;
                                                        var dataObj = {};
                                                        var obj = {};
                                                        while ((m = regex.exec(arr1[j])) !== null) {
                                                            if (m.index === regex.lastIndex) {
                                                                regex.lastIndex++;
                                                            }    
                                                            var lastKey = "";
                                                            m.forEach(function (match, groupIndex, i) {
                                                              if (parseInt(groupIndex) > 0) {
                                                                if (groupIndex == 1) {
                                                                  lastKey = match;
                                                                  dataObj[lastKey] = null;
                                                                } else if (groupIndex == 2) {
                                                                  dataObj[lastKey] = match;
                                                                }
                                                              }
                                                            });
                                                        }
                                                        arr.push(dataObj);
                                                        obj.ID = dataObj.ID;
                                                    	obj.Name = dataObj.Name;
                                                        result.push(obj);
                                                    }
                                                	
                                                    //result.push(obj)
                                                }
                                            }
                                        } else {
                                            err = {};
                                            err.Error = "ThingWorx Data Error";
                                            result.push(obj);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSection">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        //
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*::GetSectionsResponse.*[1];
                                            var containsSectionLines = resultXML.*::SectionsLine.length() !== 0;
                                            if (containsSectionLines) {
                                                var node = resultXML.*:: SectionsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString(),
                                                    Number: node.*:: Number.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString()
                                                };
                                            } else {
                                                return { error: resultXML.*:: Error.toString() }
                                            }
                                        }
                                        
                                        /** SCRIPT **/
                                        try {
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetSections>\
                                                     <eipp:Guid>\
                                                        <!--Zero or more repetitions:-->\
                                                        <eipp:GuidLine>' + sectionId + '</eipp:GuidLine>\
                                                        <!--Optional:-->\
                                                        <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                        <!--Optional:-->\
                                                        <eipp:Start></eipp:Start>\
                                                        <!--Optional:-->\
                                                        <eipp:End></eipp:End>\
                                                     </eipp:Guid>\
                                                  </eipp:GetSections>\
                                               </soap:Body>\
                                            </soap:Envelope>';
                                        
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 5000 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                        
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetPlanDateResponse.* [1];
                                            var containsPlanDateLines = resultXML.*:: PlanDateLine.length() !== 0;
                                            if (containsPlanDateLines) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: PlanDateLine.length(); i++) {
                                                    var node = resultXML.*:: PlanDateLine[i];
                                                    var section = node.*:: Section.toString();
                                                    var sectionName = me.get_section_name({ id: section });
                                                    result.push({
                                                        Section: section,
                                                        SectionNumber: sectionName.SectionNumber,
                                                        SectionSubnumber: sectionName.SectionSubnumber,
                                                        DiagnosticMapsLocomotive: node.*:: DiagnosticMapslocomotive.toString(),
                                                        PlaceOfRepair: node.*:: PlaceOfRepair.toString(),
                                                        TypeOfRepair: me.get_type_of_repair({ id: node.*:: TypeOfRepair.toString() }),
                                                        LocomotiveNumber: me.get_locomotivename({ id: node.*:: LocomotiveSeries.toString() }).LocoNumber,
                                                        HomeDepot: node.*:: HomeDepot.toString(),
                                                        RepairStartDatePlan: node.*:: RepairStartDatePlan.toString(),
                                                        RepairStartDateFact: node.*:: RepairStartDateFact.toString()
                                                    });
                                        
                                                }
                                                return result;
                                            } else {
                                                return { 
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /** SCRIPT **/
                                        try {
                                            if (date) {
                                                if (place) {
                                                    var date_text = me.convert_date({ date: date /* STRING */ });
                                                    var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                    <soap:Header/>\
                                                    <soap:Body>\
                                                       <eipp:GetPlanDate>\
                                                          <eipp:Parameter>\
                                                             <eipp:Date>'+ date_text + '</eipp:Date>\
                                                             <eipp:PlaceOfRepair>'+ place + '</eipp:PlaceOfRepair>\
                                                             <eipp:TypeOfRepair>' + (locomotiveSeries || '') + '</eipp:TypeOfRepair>\
                                                             <eipp:LocomotiveSeries></eipp:LocomotiveSeries>\
                                                             <eipp:HomeDepot></eipp:HomeDepot>\
                                                          </eipp:Parameter>\
                                                       </eipp:GetPlanDate>\
                                                    </soap:Body>\
                                                 </soap:Envelope>';
                                        
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 5000 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                        
                                                    var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                                    var response = parseXMLResponse(xmlResponse);
                                                    this.result = response;
                                                } else throw new Error('Укажите место');
                                            } else throw new Error('Укажите дату');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        /** END SCRIPT **/
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetSectionsResponse.*[1];
                                            var containsSectionLine = resultXML.*:: SectionsLine.length() !== 0;
                                            if (containsSectionLine) {
                                                var node = resultXML.*:: SectionsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString(),
                                                    Number: node.*:: Number.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString()
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            if (id) {
                                                var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                <soap:Header/>\
                                                <soap:Body>\
                                                <eipp:GetSections>\
                                                 <eipp:Guid>\
                                                 <!--Zero or more repetitions:-->\
                                                    <eipp:GuidLine>' + id + '</eipp:GuidLine>\
                                                    <!--Optional:-->\
                                                    <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                    <!--Optional:-->\
                                                    <eipp:Start></eipp:Start>\
                                                    <!--Optional:-->\
                                                    <eipp:End></eipp:End>\
                                                </eipp:Guid>\
                                                </eipp:GetSections>\
                                                </soap:Body>\
                                                </soap:Envelope>';
                                        
                                                var requestParams = {
                                                    proxyScheme: undefined /* STRING */,
                                                    headers: undefined /* JSON */,
                                                    ignoreSSLErrors: undefined /* BOOLEAN */,
                                                    useNTLM: undefined /* BOOLEAN */,
                                                    workstation: undefined /* STRING */,
                                                    useProxy: undefined /* BOOLEAN */,
                                                    withCookies: undefined /* BOOLEAN */,
                                                    proxyHost: undefined /* STRING */,
                                                    url: me.ASU_URL_TEST_1 /* STRING */,
                                                    content: content /* STRING */,
                                                    timeout: 0 /* NUMBER */,
                                                    proxyPort: undefined /* INTEGER */,
                                                    password: "11012019" /* STRING */,
                                                    domain: undefined /* STRING */,
                                                    contentType: undefined /* STRING */,
                                                    username: "ws_eipp" /* STRING */
                                                };
                                                var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(requestParams);
                                                var response = parseXMLResponse(xmlResponse);
                                                this.result = response;
                                            } else throw new Error('Укажите id секции');
                                        } catch (err) {
                                            result.error = {
                                                request: {
                                                    requestParams: requestParams
                                                },
                                                response: response,
                                                message: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionRemarks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var SECTION_TEMPLATE = '2050Секция';
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetListCommentsOnRecreationCenterRenovationOfLocomotiveResponse.* [1];
                                            var containsRemarkLists = resultXML.*:: RemarkList.length() !== 0;
                                            if (containsRemarkLists) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: RemarkList.length(); i++) {
                                                    var node = resultXML.*:: RemarkList[i];
                                                    var listOfWork = [];
                                                    for (var j = 0; j < node.*:: ListOfWork.length(); j++) {
                                                        var internalNode = node.*:: ListOfWork[j];
                                                        listOfWork.push({
                                                            Work: internalNode.*:: Work.toString(),
                                                            Site: internalNode.*:: Site.toString(),
                                                            PercentageOfCompletion: internalNode.*:: PercentageOfCompletion.toString()
                                                        });
                                                    }
                                                    result.push({
                                                        CommentId: node.*:: Comment.toString(),
                                                        Comment: me.get_comment({ commentId: node.*:: Comment.toString() /* STRING */ }).Description,
                                                        Status: node.*:: Status.toString(),
                                                        //ListOfWork: listOfWork
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            var thing = Things[section_id];
                                            if (thing && thing.thingTemplate === SECTION_TEMPLATE) {
                                                var diagnosticMap = thing.ТЕКУЩАЯ_ДК;
                                                if (diagnosticMap) {
                                                    var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                        <soap:Header/>\
                                                        <soap:Body>\
                                                            <eipp:GetListCommentsOnRecreationCenterRenovationOfLocomotive>\
                                                            <eipp:Parameter>\
                                                                <eipp:DiagnosticMapslocomotive>' + diagnosticMap + '</eipp:DiagnosticMapslocomotive>\
                                                                <eipp:Comment></eipp:Comment>\
                                                            </eipp:Parameter>\
                                                            </eipp:GetListCommentsOnRecreationCenterRenovationOfLocomotive>\
                                                        </soap:Body>\
                                                    </soap:Envelope>';
                                                    var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    });
                                                    var response = parseXMLResponse(xmlResponse);
                                                    this.result = response;
                                                } else throw new Error('Невозможно найти диагностическую карту у секции с id ' + section_id);
                                            } else throw new Error('Невозможно найти секцию с id ' + section_id);
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSLDList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetSLDResponse.*[1];
                                            var containsSLDLines = resultXML.*:: GetSLDLine.length() !== 0;
                                            if (containsSLDLines) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: GetSLDLine.length(); i++) {
                                                    var node = resultXML.*:: GetSLDLine[i];
                                                    result.push({
                                                        ID: node.*:: ID.toString(),
                                                        Kod: node.*:: Kod.toString(),
                                                        Name: node.*:: Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        try {
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                            <soap:Header/>\
                                            <soap:Body>\
                                              <eipp:GetSLD>\
                                                 <eipp:Guid>\
                                                    <!--Zero or more repetitions:-->\
                                                 </eipp:Guid>\
                                              </eipp:GetSLD>\
                                            </soap:Body>\
                                            </soap:Envelope>';
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSourceOfComments">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*::Body.*::GetSourcesOfCommentsResponse.*[1];
                                            var containsSourcesOfComments = resultXML.*::SourcesOfCommentsLine.length() !== 0;
                                            if (containsSourcesOfComments) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*::SourcesOfCommentsLine.length(); i++) {
                                                    var node = resultXML.*::SourcesOfCommentsLine[i];
                                                    result.push({
                                                        ID: node.*::ID.toString(),
                                                        Kod: node.*::Kod.toString(),
                                                        Name: node.*::Name.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    ErrorDescription: resultXML.*::ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        if (uId) {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetSourcesOfComments>\
                                                        <eipp:Guid>\
                                                            <eipp:GuidLine>' + uId + '</eipp:GuidLine>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSourcesOfComments>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        } else {
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                                <soapenv:Body>\
                                                    <eipp:GetSourcesOfComments>\
                                                        <eipp:Guid>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSourcesOfComments>\
                                                </soapenv:Body>\
                                            </soapenv:Envelope>'
                                        }
                                        
                                        var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                            proxyScheme: undefined /* STRING */,
                                            headers: undefined /* JSON */,
                                            ignoreSSLErrors: undefined /* BOOLEAN */,
                                            useNTLM: undefined /* BOOLEAN */,
                                            workstation: undefined /* STRING */,
                                            useProxy: undefined /* BOOLEAN */,
                                            withCookies: undefined /* BOOLEAN */,
                                            proxyHost: undefined /* STRING */,
                                            url: me.ASU_URL_TEST_1 /* STRING */,
                                            content: content /* STRING */,
                                            timeout: 0 /* NUMBER */,
                                            proxyPort: undefined /* INTEGER */,
                                            password: "11012019" /* STRING */,
                                            domain: undefined /* STRING */,
                                            contentType: undefined /* STRING */,
                                            username: "ws_eipp" /* STRING */
                                        });
                                        var response = parseXMLResponse(xmlResponse);
                                        this.result = response;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTypeOfRepair">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        if (Things[id]!=null && Things[id].thingTemplate==="2050TypeOfRepairs") {
                                            var result = Things[id].Name;
                                        } else { 
                                        		if (id !== undefined && id.length) {
                                                    var content ='<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org"><soapenv:Header/><soapenv:Body><eipp:GetTypeOfRepair><eipp:Guid><!--Zero or more repetitions:--><eipp:GuidLine>'+id+'</eipp:GuidLine></eipp:Guid></eipp:GetTypeOfRepair></soapenv:Body></soapenv:Envelope>';
                                                    var params = {
                                                        proxyScheme: undefined /* STRING */,
                                                        headers: undefined /* JSON */,
                                                        ignoreSSLErrors: undefined /* BOOLEAN */,
                                                        useNTLM: undefined /* BOOLEAN */,
                                                        workstation: undefined /* STRING */,
                                                        useProxy: undefined /* BOOLEAN */,
                                                        withCookies: undefined /* BOOLEAN */,
                                                        proxyHost: undefined /* STRING */,
                                                        url: me.ASU_URL_TEST_1 /* STRING */,
                                                        content: content /* STRING */,
                                                        timeout: 0 /* NUMBER */,
                                                        proxyPort: undefined /* INTEGER */,
                                                        password: "11012019" /* STRING */,
                                                        domain: undefined /* STRING */,
                                                        contentType: undefined /* STRING */,
                                                        username: "ws_eipp" /* STRING */
                                                    };
                                                    var text = Resources["ContentLoaderFunctions"].PostText(params);
                                        
                                                    text = text.replace(/\b/g,'');
                                                    text = text.replace(/\r/g,'');
                                                    text = text.replace(/\t/g,'');
                                                    text = text.replace(/\n/g,'');
                                                    text = text.replace('</m:GetTypeOfRepairResponse>','');
                                                    text = text.replace('</m:TypeOfRepairLine>','');
                                                    var arr1 = text.split('<m:TypeOfRepairLine>');
                                                    var arr = [];
                                                    var regex = /<([a-zA-Z]+)>(.*?)<\/[a-zA-Z]+>/gm;
                                                    if (arr1.length > 0) {
                                                        for (var j = 1; j < arr1.length; j++) {
                                                            if (arr1[j].length) {
                                                                // multipurpose parser to JSON - dataObj
                                                                arr1[j] = arr1[j].replace(/(\<m\:)/g,'<').replace(/(\<\/m\:)/g,'</').replace('</PlanDateLine>', '');
                                                                var m;
                                                                var dataObj = {};
                                                                while ((m = regex.exec(arr1[j])) !== null) {
                                                                    if (m.index === regex.lastIndex) {
                                                                        regex.lastIndex++;
                                                                    }    
                                                                    var lastKey = "";
                                                                    m.forEach(function (match, groupIndex, i) {
                                                                      if (parseInt(groupIndex) > 0) {
                                                                        if (groupIndex == 1) {
                                                                          lastKey = match;
                                                                          dataObj[lastKey] = null;
                                                                        } else if (groupIndex == 2) {
                                                                          dataObj[lastKey] = match;
                                                                        }
                                                                      }
                                                                    });
                                                                }
                                                                // Push Data Object in Array
                                                                arr.push(dataObj);
                                                            }
                                                         } // end for
                                                    var params = {
                                                        name: arr[0].ID /* STRING */,
                                                        description: "экзампляр объекта тип ремонта. Название - "+arr[0].Name /* STRING */,
                                                        thingTemplateName: "2050TypeOfRepairs" /* THINGTEMPLATENAME */,
                                                        tags: undefined /* TAGS */
                                                    };
                                        			// no return
                                                    Resources["EntityServices"].CreateThing(params);
                                                    Things[arr[0].ID].EnableThing();
                                        			Things[arr[0].ID].RestartThing();
                                        			Things[arr[0].ID].Name = arr[0].Name;
                                                    Things[arr[0].ID].Kod = arr[0].Kod;
                                                    Things[arr[0].ID].ID = arr[0].ID;
                                                    } // end if
                                        		var result = arr[0].Name;
                                                } else {
                                                    var result = "";
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetWorkers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetSotrudnikiResponse.* [1];
                                            var containsPersonLine = resultXML.*:: SotrudnikiLine.*.length() !== 0;
                                            if (containsPersonLine) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: SotrudnikiLine.length(); i++) {
                                                    var node = resultXML.*:: SotrudnikiLine[i]
                                                    result.push({
                                                        ID: node.*:: ID.toString(),
                                                        Kod: node.*:: Kod.toString(),
                                                        GroupID: node.*:: GroupID.toString(),
                                                        Name: node.*:: Name.toString(),
                                                        NaturalPerson: node.*:: NaturalPerson.toString(),
                                                        Position: node.*:: Position.toString(),
                                                        DateDismissal: node.*:: DateDismissal.toString(),
                                                        DateEmployment: node.*:: DateEmployment.toString(),
                                                        Floor: node.*:: Floor.toString(),
                                                        DateOBirth: node.*:: DateOBirth.toString(),
                                                        ServiceNumber: node.*:: ServiceNumber.toString(),
                                                        WorkSchedule: node.*:: WorkSchedule.toString(),
                                                        Subdivision: node.*:: Subdivision.toString(),
                                                        SLD: node.*:: SLD.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        try {
                                            if (!sId && !placeOfRepair) throw new Error('Укажите id сотрудника или место');
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                <soap:Header/>\
                                                  <soap:Body>\
                                                    <eipp:GetSotrudniki>\
                                                      <eipp:Guid>\
                                                        <!--Zero or more repetitions:-->' +
                                                        (sId ? '<eipp:GuidLine>' + sId + '</eipp:GuidLine>' : '') +
                                                        (placeOfRepair ? '<eipp:PlaceOfRepair>' + placeOfRepair + '</eipp:PlaceOfRepair>' : '') +
                                                        '<eipp:Start></eipp:Start>\
                                                        <eipp:End></eipp:End>\
                                                        </eipp:Guid>\
                                                    </eipp:GetSotrudniki>\
                                                  </soap:Body>\
                                                </soap:Envelope>';
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL_TEST_1 /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetWorkerTimetable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /**  
                                        * Deprecated
                                        **/
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: WorkScheduleResponse.* [1];
                                            var containsShiftList = resultXML.*:: ShifList.length() !== 0;
                                            if (containsShiftList) {
                                                var shiftList = [];
                                                for (var i = 0; i < resultXML.*:: ShifList.length(); i++) {
                                                    var node = resultXML.*:: ShifList[i];
                                                    shiftList.push({
                                                        NumberDay: node.*:: NumberDay.toString(),
                                                        Сhange: node.*:: Сhange.toString()
                                                    });
                                                }
                                                return {
                                                    ID: resultXML.*:: ID.toString(),
                                                    Kod: resultXML.*:: Kod.toString(),
                                                    Name: resultXML.*:: Name.toString(),
                                                    Date: resultXML.*:: Date.toString(),
                                                    ShiftList: shiftList
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        try {
                                            var workerResult = me.GetWorkers({ sId: sId });
                                            if (workerResult.ErrorDescription) {
                                                throw new Error(workerResult.ErrorDescription);
                                            } else {
                                                var worker = workerResult.array[0];
                                                var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                                <soap:Header/>\
                                                    <soap:Body>\
                                                        <eipp:WorkSchedule>\
                                                            <eipp:Guid>\
                                                                <eipp:GuidLine>' + worker.WorkSchedule + '</eipp:GuidLine>\
                                                            </eipp:Guid>\
                                                        </eipp:WorkSchedule>\
                                                    </soap:Body>\
                                                </soap:Envelope>';
                                                var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                    proxyScheme: undefined /* STRING */,
                                                    headers: undefined /* JSON */,
                                                    ignoreSSLErrors: undefined /* BOOLEAN */,
                                                    useNTLM: undefined /* BOOLEAN */,
                                                    workstation: undefined /* STRING */,
                                                    useProxy: undefined /* BOOLEAN */,
                                                    withCookies: undefined /* BOOLEAN */,
                                                    proxyHost: undefined /* STRING */,
                                                    url: me.ASU_URL_TEST_1 /* STRING */,
                                                    content: content /* STRING */,
                                                    timeout: 0 /* NUMBER */,
                                                    proxyPort: undefined /* INTEGER */,
                                                    password: "11012019" /* STRING */,
                                                    domain: undefined /* STRING */,
                                                    contentType: undefined /* STRING */,
                                                    username: "ws_eipp" /* STRING */
                                                });
                                                var response = parseXMLResponse(xmlResponse);
                                                result = response;
                                            }
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="sha1">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (A === undefined) A=1;
                                        
                                        /*
                                         * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
                                         * in FIPS PUB 180-1
                                         * Version 2.1a Copyright Paul Johnston 2000 - 2002.
                                         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
                                         * Distributed under the BSD License
                                         * See http://pajhome.org.uk/crypt/md5 for details.
                                         */
                                        
                                        /*
                                         * Configurable variables. You may need to tweak these to be compatible with
                                         * the server-side, but the defaults work in most cases.
                                         */
                                        var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
                                        var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */
                                        var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */
                                        
                                        /*
                                         * These are the functions you'll usually want to call
                                         * They take string arguments and return either hex or base-64 encoded strings
                                         */
                                        function hex_sha1(s){return binb2hex(core_sha1(str2binb(s),s.length * chrsz));}
                                        
                                        function b64_sha1(s){return binb2b64(core_sha1(str2binb(s),s.length * chrsz));}
                                        function str_sha1(s){return binb2str(core_sha1(str2binb(s),s.length * chrsz));}
                                        function hex_hmac_sha1(key, data){ return binb2hex(core_hmac_sha1(key, data));}
                                        function b64_hmac_sha1(key, data){ return binb2b64(core_hmac_sha1(key, data));}
                                        function str_hmac_sha1(key, data){ return binb2str(core_hmac_sha1(key, data));}
                                        
                                        /*
                                         * Perform a simple self-test to see if the VM is working
                                         */
                                        function sha1_vm_test()
                                        {
                                          return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
                                        }
                                        
                                        /*
                                         * Calculate the SHA-1 of an array of big-endian words, and a bit length
                                         */
                                        function core_sha1(x, len)
                                        {
                                          /* append padding */
                                          x[len >> 5] |= 0x80 << (24 - len % 32);
                                          x[((len + 64 >> 9) << 4) + 15] = len;
                                        
                                          var w = Array(80);
                                          var a =  1732584193;
                                          var b = -271733879;
                                          var c = -1732584194;
                                          var d =  271733878;
                                          var e = -1009589776;
                                        
                                          for(var i = 0; i < x.length; i += 16)
                                          {
                                            var olda = a;
                                            var oldb = b;
                                            var oldc = c;
                                            var oldd = d;
                                            var olde = e;
                                        
                                            for(var j = 0; j < 80; j++)
                                            {
                                              if(j < 16) w[j] = x[i + j];
                                              else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
                                              var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
                                                               safe_add(safe_add(e, w[j]), sha1_kt(j)));
                                              e = d;
                                              d = c;
                                              c = rol(b, 30);
                                              b = a;
                                              a = t;
                                            }
                                        
                                            a = safe_add(a, olda);
                                            b = safe_add(b, oldb);
                                            c = safe_add(c, oldc);
                                            d = safe_add(d, oldd);
                                            e = safe_add(e, olde);
                                          }
                                          return Array(a, b, c, d, e);
                                        
                                        }
                                        
                                        /*
                                         * Perform the appropriate triplet combination function for the current
                                         * iteration
                                         */
                                        function sha1_ft(t, b, c, d)
                                        {
                                          if(t < 20) return (b & c) | ((~b) & d);
                                          if(t < 40) return b ^ c ^ d;
                                          if(t < 60) return (b & c) | (b & d) | (c & d);
                                          return b ^ c ^ d;
                                        }
                                        
                                        /*
                                         * Determine the appropriate additive constant for the current iteration
                                         */
                                        function sha1_kt(t)
                                        {
                                          return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
                                                 (t < 60) ? -1894007588 : -899497514;
                                        }
                                        
                                        /*
                                         * Calculate the HMAC-SHA1 of a key and some data
                                         */
                                        function core_hmac_sha1(key, data)
                                        {
                                          var bkey = str2binb(key);
                                          if(bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);
                                        
                                          var ipad = Array(16), opad = Array(16);
                                          for(var i = 0; i < 16; i++)
                                          {
                                            ipad[i] = bkey[i] ^ 0x36363636;
                                            opad[i] = bkey[i] ^ 0x5C5C5C5C;
                                          }
                                        
                                          var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
                                          return core_sha1(opad.concat(hash), 512 + 160);
                                        }
                                        
                                        /*
                                         * Add integers, wrapping at 2^32. This uses 16-bit operations internally
                                         * to work around bugs in some JS interpreters.
                                         */
                                        function safe_add(x, y)
                                        {
                                          var lsw = (x & 0xFFFF) + (y & 0xFFFF);
                                          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                                          return (msw << 16) | (lsw & 0xFFFF);
                                        }
                                        
                                        /*
                                         * Bitwise rotate a 32-bit number to the left.
                                         */
                                        function rol(num, cnt)
                                        {
                                          return (num << cnt) | (num >>> (32 - cnt));
                                        }
                                        
                                        /*
                                         * Convert an 8-bit or 16-bit string to an array of big-endian words
                                         * In 8-bit function, characters >255 have their hi-byte silently ignored.
                                         */
                                        function str2binb(str)
                                        {
                                          var bin = Array();
                                          var mask = (1 << chrsz) - 1;
                                          for(var i = 0; i < str.length * chrsz; i += chrsz)
                                            bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i%32);
                                          return bin;
                                        }
                                        
                                        /*
                                         * Convert an array of big-endian words to a string
                                         */
                                        function binb2str(bin)
                                        {
                                          var str = "";
                                          var mask = (1 << chrsz) - 1;
                                          for(var i = 0; i < bin.length * 32; i += chrsz)
                                            str += String.fromCharCode((bin[i>>5] >>> (32 - chrsz - i%32)) & mask);
                                          return str;
                                        }
                                        
                                        /*
                                         * Convert an array of big-endian words to a hex string.
                                         */
                                        function binb2hex(binarray)
                                        {
                                          var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
                                          var str = "";
                                          for(var i = 0; i < binarray.length * 4; i++)
                                          {
                                            str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
                                                   hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);
                                          }
                                          return str;
                                        }
                                        
                                        /*
                                         * Convert an array of big-endian words to a base-64 string
                                         */
                                        function binb2b64(binarray)
                                        {
                                          var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                                          var str = "";
                                          for(var i = 0; i < binarray.length * 4; i += 3)
                                          {
                                            var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)
                                                        | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )
                                                        |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);
                                            for(var j = 0; j < 4; j++)
                                            {
                                              if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
                                              else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
                                            }
                                          }
                                          return str;
                                        }
                                        
                                        var result = hex_sha1(A);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="ASU_URL"></AlertDefinitions>
                <AlertDefinitions
                 name="ASU_URL_TEST"></AlertDefinitions>
                <AlertDefinitions
                 name="ASU_URL_TEST_1"></AlertDefinitions>
                <AlertDefinitions
                 name="ASU_URL_TEST_2"></AlertDefinitions>
                <AlertDefinitions
                 name="DateTest"></AlertDefinitions>
                <AlertDefinitions
                 name="PLACE_ID"></AlertDefinitions>
                <AlertDefinitions
                 name="producedActions"></AlertDefinitions>
                <AlertDefinitions
                 name="rfidStatuses"></AlertDefinitions>
                <AlertDefinitions
                 name="rfidTypes"></AlertDefinitions>
                <AlertDefinitions
                 name="transferStatuses"></AlertDefinitions>
                <AlertDefinitions
                 name="zoneTypes"></AlertDefinitions>
            </AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties>
                <PLACE_ID>
                    <Value>
                    <![CDATA[
                    5f2e4eca-4b02-11e1-b72e-001517e6ca10
                    ]]>
                    </Value>
                    <Timestamp>2019-06-28T14:23:50.302+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </PLACE_ID>
                <ASU_URL>
                    <Value>
                    <![CDATA[
                    http://docs.tmh-service.ru/urp/ws/eipp.1cws
                    ]]>
                    </Value>
                    <Timestamp>2019-09-17T17:09:20.998+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </ASU_URL>
                <ASU_URL_TEST>
                    <Value>
                    <![CDATA[
                    http://docs.tmh-service.ru/urp/ws/eipp.1cws
                    ]]>
                    </Value>
                    <Timestamp>2019-09-17T17:09:24.998+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </ASU_URL_TEST>
                <DateTest>
                    <Value>1970-01-15T09:56:07.899+03:00</Value>
                    <Timestamp>2019-07-05T14:39:32.153+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </DateTest>
                <ASU_URL_TEST_2>
                    <Value>
                    <![CDATA[
                    http://corp.prmsys.net/urp_TB_02/ru_RU/ws/IntegrationEIPP
                    ]]>
                    </Value>
                    <Timestamp>2019-08-30T11:40:28.910+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </ASU_URL_TEST_2>
                <rfidStatuses>
                    <Value>
                        <json>
                        <![CDATA[
                        {"Actual":"Actual","Outdated":"Outdated"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-08-29T16:23:01.381+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </rfidStatuses>
                <rfidTypes>
                    <Value>
                        <json>
                        <![CDATA[
                        {"TED":"TED","KP":"KP","Section":"Section"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-08-29T16:23:19.756+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </rfidTypes>
                <ASU_URL_TEST_1>
                    <Value>
                    <![CDATA[
                    http://docs.tmh-service.ru/urp/ws/eipp.1cws
                    ]]>
                    </Value>
                    <Timestamp>2019-09-17T17:09:36.974+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </ASU_URL_TEST_1>
                <producedActions>
                    <Value>
                        <json>
                        <![CDATA[
                        {"Installation":"Installation","Dismantling":"Dismantling"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-08-29T16:22:46.366+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </producedActions>
            </ThingProperties>
        </Thing>
    </Things>
</Entities>
