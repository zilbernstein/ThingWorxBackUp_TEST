<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b123"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="3"
 schemaVersion="1052"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         name="connBreakShoesCopy"
         projectName="Connectors"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="ASU_URL"
                     ordinal="2"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetBreakShoes">
                        <ResultType
                         aspect.dataShape="connBreakShoesDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveSectionDate">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnum_section"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveSeries">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotive_serie"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSection">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Проверка номера секции"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionInfo">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description="Идентификатор субномера секции"
                             name="subnum_section"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение Словарей номеров секций"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionsID">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="depo_id"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dict_type"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Получение номеров секций из БД локомотивов полигона"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionsIDPoligon">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="depo_id"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Загрузка данных"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="LoadDataPad">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description="Корреляция (вход 1, выход -1) "
                             name="correlationId"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="crack"
                             ordinal="16"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description="Идентификатор аппаратного устройства "
                             name="eqIq"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description="Путь к фотографии"
                             name="fileId"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="filePath"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description="размер, введенный оператором"
                             name="humanSize"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description="Дата и время проведения замера "
                             name="mesTime"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="false"
                             baseType="STRING"
                             description="Синтетический идентификатор колодки"
                             name="padId"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description="номер колодки"
                             name="padNum"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description="размер, определенный приборно"
                             name="padSize"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description="Признак активности колодки или того, что ее сняли и она уже не используется на секции (1 активна, 0 не используется) "
                             name="padStatus"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description="признак необходимости замены"
                             name="replace"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="rimSize"
                             ordinal="17"></FieldDefinition>
                            <FieldDefinition
                             baseType="LONG"
                             description=""
                             name="session_id"
                             ordinal="18"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="false"
                             baseType="STRING"
                             description="Идентификатор субномера секции "
                             name="subnumSection"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="thinness"
                             ordinal="14"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="wedge"
                             ordinal="15"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description="номер оси по порядку"
                             name="wheelPairNum"
                             ordinal="10"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="loadDataPadAsuSg">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetBreakShoes">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Сбор данных для мэшапа
                                        var BREAK_SHOES_CATALOG_TEMPLATE = 'connBrakeShoesCatalog';
                                        var searchFunctions = Resources['SearchFunctions'];
                                        var result = Resources["InfoTableFunctions"]
                                            .CreateInfoTableFromDataShape({
                                                    infoTableName : "InfoTable",
                                                    dataShapeName : "connBreakShoesDataShape"
                                            });
                                        
                                        // Метод для поиска колодок в ЕИПП
                                        var findBreakShoesCatalogs = function() {
                                            var things = searchFunctions.SearchThingsByTemplate({
                                                thingTemplate: BREAK_SHOES_CATALOG_TEMPLATE /* THINGTEMPLATENAME */,
                                                maxItems: undefined /* NUMBER */,
                                                tags: undefined /* TAGS */,
                                                nameMask: undefined /* STRING */,
                                                query: undefined /* QUERY */
                                            });
                                            return things;
                                        };
                                        
                                        var breakShoesCatalogs = findBreakShoesCatalogs(undefined);
                                        
                                        for (var i = 0; i < breakShoesCatalogs.length; i++) {
                                            var breakShoesCatalog = breakShoesCatalogs.rows[i];
                                            
                                            result.AddRow({
                                                correlationId: breakShoesCatalog.correlationId,
                                                crack: breakShoesCatalog.crack,
                                                eqId: breakShoesCatalog.eqId,
                                                humanSize: breakShoesCatalog.humanSize,
                                                imageUrl: breakShoesCatalog.imageUrl,
                                                mesTime: breakShoesCatalog.mesTime,
                                                padId: breakShoesCatalog.padId,
                                                padNum: breakShoesCatalog.padNum,
                                                padSize: breakShoesCatalog.padSize,
                                                padStatus: breakShoesCatalog.padStatus,
                                                replace: breakShoesCatalog.replace,
                                                rimSize: breakShoesCatalog.rimSize,
                                                session_id: breakShoesCatalog.session_id,
                                                subnumSection: breakShoesCatalog.subnumSection,
                                                thinnes: breakShoesCatalog.thinnes,
                                                wedge: breakShoesCatalog.wedge,
                                                wheelPairNum: breakShoesCatalog.wheelPairNum
                                            });
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveSectionDate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetCompositionLocomotiveSectionDateResponse.* [1];
                                            var containsLocomotiveSectionLine = resultXML.*:: CompositionLocomotiveSectionDateLine.*.length() !== 0;
                                            if (containsLocomotiveSectionLine) {
                                                var node = resultXML.*:: CompositionLocomotiveSectionDateLine;
                                                return {
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    ContractSO: node.*:: ContractSO.toString(),
                                                    Sections: [
                                                        node.*:: Section1.toString(), node.*:: Section2.toString(), node.*:: Section3.toString()
                                                    ]
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Сборка тела soap запроса с параметрами
                                            var content = ['<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetCompositionLocomotiveSectionDate>\
                                                     <eipp:Parameter>\
                                                        <!--Optional:-->',
                                                        '<eipp:Section_n>' + (section || '') + '</eipp:Section_n>',
                                                        '<eipp:Date>' + (date || '') + '</eipp:Date>\
                                                        <!--Optional:-->\
                                                        <eipp:NumberSection>' + (subnum_section || '') + '</eipp:NumberSection>\
                                                     </eipp:Parameter>\
                                                  </eipp:GetCompositionLocomotiveSectionDate>\
                                               </soap:Body>\
                                            </soap:Envelope>'].join('');
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            //this.result = response;
                                        } catch (err) {
                                            // Обработка ошибок
                                            /*result = {
                                                error: err.message,
                                                xmlResponse: xmlResponse
                                            };*/
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveSeries">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        // Метод для парсинга ответа XML от АСУ СГ
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetLocomotiveSeriesResponse.*[1];
                                            var containsSeriesLine = resultXML.*:: LocomotiveSeriesLine.length() !== 0;
                                            if (containsSeriesLine) {
                                                var node = resultXML.*:: LocomotiveSeriesLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString()
                                                };
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Проверка входного параметра и проброс ошибки если параметр не верен
                                            if (!locomotive_serie) throw new Error('Не указана серия локомотива');
                                            // Сборка тела soap запроса
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                            <soapenv:Body>\
                                              <eipp:GetLocomotiveSeries>\
                                                 <eipp:Guid>\
                                                    <!--Zero or more repetitions:-->\
                                                    <eipp:GuidLine>' + locomotive_serie + '</eipp:GuidLine>\
                                                 </eipp:Guid>\
                                              </eipp:GetLocomotiveSeries>\
                                            </soapenv:Body>\
                                            </soapenv:Envelope>';
                                            var xmlResponse = Resources['ContentLoaderFunctions'].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            // Обработка ошибок
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSection">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*::GetSectionsResponse.*[1];
                                            var containsSectionLines = resultXML.*::SectionsLine.length() !== 0;
                                            if (containsSectionLines) {
                                                var node = resultXML.*:: SectionsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString(),
                                                    Number: node.*:: Number.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString()
                                                };
                                            } else {
                                                return { error: resultXML.*:: Error.toString() }
                                            }
                                        }
                                        
                                        /** SCRIPT **/
                                        try {
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetSections>\
                                                     <eipp:Guid>\
                                                        <!--Zero or more repetitions:-->\
                                                        <eipp:GuidLine>' + sectionId + '</eipp:GuidLine>\
                                                        <!--Optional:-->\
                                                        <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                        <!--Optional:-->\
                                                        <eipp:Start></eipp:Start>\
                                                        <!--Optional:-->\
                                                        <eipp:End></eipp:End>\
                                                     </eipp:Guid>\
                                                  </eipp:GetSections>\
                                               </soap:Body>\
                                            </soap:Envelope>';
                                        
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 5000 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                        
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var SECTION_TEMPLATE = '2050Секция';
                                        var result = {};
                                        
                                        function findBySubnumber(subnumber) {
                                           var params = {
                                                maxItems: 1,
                                                nameMask: undefined,
                                                query: {
                                                    filters: { type: 'MATCHES', fieldName: 'НОМЕР', expression: subnumber }
                                                },
                                                thingTemplate: SECTION_TEMPLATE,
                                                tags: undefined
                                            };
                                            return Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        }
                                        
                                        function getCurrentDate() {
                                            var date = new Date();
                                            var day = (date.getDay() < 10 ? '0' : '') + date.getDay();
                                            var month = (date.getMonth() + 1 < 10 ? '0' : '') + (date.getMonth() + 1);
                                            var year = date.getFullYear();
                                            return year + '-' + month + '-' + day;
                                        }
                                        
                                        try {
                                            if (subnum_section) {
                                                if (subnum_section.length !== 8) throw new Error('Некорректный субномер секции');
                                                
                                                var section = findBySubnumber(subnum_section);
                                                var locomotive = me.GetLocomotiveSectionDate({
                                                    section: section.name /* STRING */,
                                                    date: getCurrentDate() /* STRING */,
                                                    subnum_section: section.name ? undefined : subnum_section /* STRING */
                                                });
                                                if (locomotive) {
                                                    var locomotiveSeries = me.GetLocomotiveSeries({ locomotive_serie: locomotive.LocomotiveSeries /* STRING */ });
                                                    if (locomotiveSeries.Name) {
                                                        var sectionsInfo = locomotive.Sections.map(function(item) { return me.GetSection({ sectionId: item /* STRING */ }); });
                                                        var sectionInfo = sectionsInfo.filter(function(item) { 
                                                           return item && !item.error && item.Number === subnum_section; 
                                                        })[0]; //take first which has been found
                                                        if (sectionInfo) {
                                                            this.result = {
                                                                locomotive_ser: locomotiveSeries.ID,
                                                                locomotive_num: locomotiveSeries.Name,
                                                                sld: sectionInfo.HomeDepot,
                                                                sld_toir: '',
                                                                section_id: sectionInfo.ID,
                                                                section_subnum: sectionInfo.Number,
                                                                section_num: sectionInfo.Name
                                                            };
                                                        } else throw new Error('Информация о секции не найдена');
                                                    } else throw new Error('Информация о секции не найдена');
                                                } else throw new Error('Информация о секции не найдена');
                                            } else throw new Error('Укажите субномер секции');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionsID">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        var timeHandler = Things['handlerTime'];
                                        var connAsuSgThing = Things['connAsuSg'];
                                        
                                        // Метод для валидации формата строки даты и времени
                                        function validateDate() {
                                            return date && /^\d{4}-\d{2}-\d{2}(\s+\d{2}:\d{2}:\d{2})?(\+\d{2}:\d{2})?$/i.test(date);
                                        }
                                        
                                        // Метод для получения номера секции по субномеру
                                        function getSectionName(dateParam, sectionNumber) {
                                            var sectionName = '';
                                            // Получаем данные по локомотиву на стороне АСУ СГ
                                            var locoInfoResult = connAsuSgThing.GetCompositionLocomotiveSectionDate({
                                                ParDate: dateParam /* STRING */,
                                                SectionNumber: sectionNumber /* STRING */
                                            }); //Берем первый результат
                                            if (!locoInfoResult.Error)  {
                                                var locoInfo = locoInfoResult.array[0];
                                                // В локомотиве 3 секции, составляем список секций
                                                var sections = [locoInfo.Section1, locoInfo.Section2, locoInfo.Section3];
                                                // Итерируем по списку секций
                                                for (var i = 0; i < sections.length; i++) {
                                                    var sectionInfoResult = connAsuSgThing.GetSection({
                                                        SectionGUID: sections[i] /* STRING */
                                                    }); //take first value
                                                    if (sectionInfoResult.Error) continue;
                                                    var sectionInfo = sectionInfoResult.array[0];
                                                    // Если субномер секции совпал с входным субномером, возвращаем номер
                                                    if (sectionInfo.Number === sectionNumber) {
                                                        sectionName = sectionInfo.Name;
                                                        break;
                                                    }
                                                }
                                            }
                                            return sectionName;
                                        }
                                        
                                        // Метод для получения секций Рфид на стороне ЕИПП
                                        function getSectionsRfid(dateParam, depo) {
                                            var sectionsRfid = connAsuSgThing.GetSectionsRFID({
                                                ParDate: dateParam,
                                                PlaceOfRepair: depo
                                            });
                                            if (sectionsRfid.Error) {
                                                throw new Error(sectionsRfid.Error);
                                            } else {
                                                return sectionsRfid.array.map(function (item) {
                                                    return {
                                                        kp_number: '4',
                                                        section_subnumber: item.section_number,
                                                        section_number: getSectionName(dateParam, item.section_number)
                                                    };
                                                });
                                            }
                                        }
                                        
                                        // Метод для поулчения секций на стороне АСУ СГ
                                        function getSectionsPlan(dateParam, depo) {
                                            var sectionPlan = connAsuSgThing.GetSectionPlan({
                                                ParDate: dateParam,
                                                PlaceOfRepair: depo
                                            });
                                            if (sectionPlan.Error) {
                                                throw new Error(sectionPlan.Error);
                                            }
                                            else {
                                                return sectionPlan.array.map(function (item) {
                                                    return {
                                                        kp_number: '4',
                                                        section_number: item.Name_Section || '',
                                                        section_subumber: item.NumberSection
                                                    };
                                                });
                                            }
                                        }
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Валидируем дату и если она невалидна, генерируем строку из текущей даты
                                            var dateParam = !validateDate(date) ? timeHandler.Generate({ timezone: true /* BOOLEAN */ }) : date;
                                            // Исходя из значения параметра dict_type (Тип справочника [1-RFID; 2-Plan; 3-Poligon]) получаем список секций в АСУ СГ, ЕИПП или Полигоне
                                            switch(dict_type) {
                                                case '1': {
                                                    if (!dict_type) throw new Error('');
                                                    result = {
                                                        sections: getSectionsRfid(dateParam, depo_id) //This function can throw an Error
                                                    };
                                                    break;
                                                }
                                                case '2': {
                                                    if (!dict_type) throw new Error('');
                                                    result = {
                                                        sections: getSectionsPlan(dateParam, depo_id) //This function can throw an Error
                                                    };
                                                    break;
                                                }
                                                case '3': {
                                                    result = me.GetSectionsIDPoligon({
                                                        date: dateParam /* STRING */,
                                                        depo_id: depo_id /* STRING */
                                                    });
                                                    break;
                                                }
                                                default: throw new Error('Задан некорректный тип справочника. Корректные значения (String): 1 для RFID, 2 для Plan, 3 для Poligon');
                                            } 
                                        } catch (err) {
                                            // Обработка ошибок
                                            result = {
                                                Error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionsIDPoligon">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        var connAsuSgThing = Things['connAsuSg']; 
                                        
                                        /**
                                        * Основное тело скрипта
                                        **/
                                        try {
                                            // Получаем список полигонов на стороне АСУ СГ
                                            var polygons = connAsuSgThing.GetPolygon();
                                            if (polygons.Error) throw new Error(polygons.Error);
                                            var sections = [];
                                            // Итерируем по списку полгинов и получаем информацию по секциям
                                            polygons.array.forEach(function (polygon) {
                                                var sectionsOfPolygon = connAsuSgThing.GetSectionsOfPoligon({
                                                    PolygonID: polygon.ID /* STRING */,
                                                    MesTime: date /* STRING */,
                                                    HomeDepot: undefined /* STRING */
                                                });
                                                
                                                if (sectionsOfPolygon.array) {
                                                   // Итерируем по списку полигонов и сохраняем их в массив
                                                   sectionsOfPolygon.array.forEach(function (item) {
                                                       sections.push({
                                                            kp_number: '4',
                                                            section_subnumber: item.NumberSection,
                                                            section_number: item.Name 
                                                       });
                                                   });
                                                }
                                            });
                                            
                                            // Вывод списка секций
                                            result = {
                                                sections: sections
                                            };
                                        } catch (err) {
                                            // Обработка ошибок
                                            result = {
                                                Error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="LoadDataPad">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        var CONN_RFID_CATALOG_TEMPLATE = 'connBrakeShoesCatalog';
                                        
                                        var rfidLibrary = Things['connRfidLibrary'];
                                        var entityServices = Resources['EntityServices'];
                                        var testImageLoader = Things['TestImageLoad'];
                                        
                                        // Метод для генерации имени файла с расширением [fileName.ext]
                                        function generateFileName(fileData) {
                                            var extFirstIndex = fileData.indexOf('/');
                                            var extLastIndex = fileData.indexOf(';');
                                            if (extFirstIndex === -1 || extLastIndex === -1) throw new Error('Некорректный формат base64');
                                            
                                            var ext = fileData.substring(extFirstIndex + 1, extLastIndex);
                                            return rfidLibrary.GetSha1({ A: (filePath + '_' + Date()) /* STRING */ }) + '.' + ext;
                                        }
                                        
                                        // Метод для сохранения изображений в системе, на вход путь к файлу и содержимое в формате base64
                                        function storeImage(filePath, fileData) {
                                            if (!fileData || !filePath) return undefined;
                                            // Извлечение данных изображения из base64
                                            var base64metdataLastIndex = fileData.indexOf('/9j/');
                                            if (base64metdataLastIndex === -1) throw new Error('Некорректный формат base64');
                                            var fileContent = fileId.substring(base64metdataLastIndex);
                                                
                                            var finalFilePath = generateFileName(fileData);
                                            try {
                                                testImageLoader.SaveImage({
                                                    path: finalFilePath /* STRING */,
                                                    content: fileContent /* IMAGE */
                                                });
                                                var imageData = testImageLoader.LoadImage({ path: finalFilePath /* STRING */ });
                                                return { data: imageData, filePath: finalFilePath };
                                            } catch (err) {
                                                return undefined;
                                            }
                                        }
                                        
                                        // Метод для создания колодки на стороне ЕИПП
                                        function createBrakeShoes() {
                                            var shoesThingName = generateBreakShoesThingName(padId, subnumSection);
                                            Resources['EntityServices'].CreateThing({
                                                name: shoesThingName,
                                                //description: thingProps.type /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_RFID_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            
                                            var thing = Things[shoesThingName];
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.subnumSection = subnumSection;
                                            thing.correlationId = correlationId || 1;
                                            thing.mesTime = mesTime || '';
                                            thing.padId = padId;
                                            thing.padStatus = padStatus || 1;
                                            thing.eqIq = eqIq || '';
                                            thing.padSize = padSize || 1;
                                            thing.humanSize = humanSize || 1;
                                            thing.replace = replace || true;
                                            thing.wheelPairNum = wheelPairNum || 1;
                                            thing.padNum = padNum || 1;
                                            thing.thinness = thinness || false;
                                            thing.wedge = wedge || false;
                                            thing.crack = crack || false;
                                            thing.rimSize = rimSize || 0;
                                            thing.session_id = session_id || 0;
                                        
                                            if (fileId && filePath) {
                                                 // Сохранение изображения
                                                 var image = storeImage(filePath, fileId);
                                                 if (image) {
                                                     entityServices.CreateMediaEntity({
                                                        name: image.filePath /* STRING */,
                                                        description: undefined /* STRING */,
                                                        tags: undefined /* TAGS */,
                                                        content: image.data /* IMAGE */
                                                     });
                                                     thing.image = image.data;
                                                     thing.imageUrl = 'http://devplatform.digitaldepot.ru:8085/Thingworx/FileRepositories/TestImageLoad/' + image.filePath;
                                                 }
                                            }
                                            
                                            return thing;
                                        }
                                        
                                        // Метод для генерации идентификатора колодки
                                        function generateBreakShoesThingName(padId, subnumSection) {
                                            var curDate = Date();
                                            return rfidLibrary.GetSha1({ A: (padId  + subnumSection + curDate) /* STRING */ });
                                        }
                                        
                                        try {
                                            //throw new Error(base64DecodeString(fileId));
                                            if (subnumSection && padId) {         
                                                var breakShoesThing = createBrakeShoes();       
                                                result = {
                                                   status: 'Данные измерений успешно сохранены'
                                                };
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        
                                        /*try {
                                           if (!subnumSection || !padId) throw new Error('Проверьте параметры');
                                            // далее создание thing
                                        } catch (err) {
                                           result = { 
                                               error: err.message 
                                           };
                                        }*/
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="loadDataPadAsuSg">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Метод в разработке
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            try {
                                                var resultXML = xmlResponse.*:: Body.*::SetVideoDataASUResponse.*[1];
                                                var containsDiagnosticMap = resultXML.*:: DiagnosticMapslocomotive.toString() != "";
                                                if (containsDiagnosticMap) {
                                                    return {
                                                        DiagnosticMapslocomotive: resultXML.*:: DiagnosticMapslocomotive.toString()
                                                    };
                                                } else {
                                                    return {
                                                        Error: 'Нет данных в АСУ СГ',
                                                        Description: resultXML.*:: ErrorDescription.toString()
                                                    }
                                                }
                                            } catch (err) {
                                                 return {
                                                     Error: 'Ошибка в АСУ СГ'
                                                 }
                                            }
                                           
                                        }
                                        /*
                                        function getFormattedTime() {
                                            var time;
                                            if (/^\d{4}-\d{2}-\d{2} (\d{2}:\d{2}:\d{2})?(\+\d{2}:\d{2})?$/g.test(mes_time)) {
                                                var date = mes_time.match(/\d{4}-\d{2}-\d{2}/g)[0];
                                                var time = mes_time.match(/\d{2}:\d{2}:\d{2}/g)[0];
                                                time = time ? date + 'T' + time : date;
                                            } else throw new Error('Неверный формат времени');
                                            return time;
                                        }
                                        */
                                        
                                        function timeHandling(mes_time) {
                                            var res = {};
                                            res.error = 0;
                                            res.errorDescription = "";
                                            res.date = "";
                                            var date = getFormattedTime();
                                            if (date.indexOf('+') !== -1) {
                                                res.date = date.substring(0, date.indexOf('+'));
                                            } else {
                                                res.date = date;
                                            }
                                            return res;
                                        }
                                        
                                        function getFormattedTime() {
                                            return mes_time.replace(' ', 'T');
                                        }
                                        
                                        try {
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                           <soap:Header/>\
                                           <soap:Body>\
                                              <eipp:SetKolodkaInfo>\
                                                 <eipp:Parameters>\
                                                    <eipp:NumberSection>11385226</eipp:NumberSection>\
                                                    <eipp:OptionAnalytics>параметрФиксации</eipp:OptionAnalytics>\
                                                    <eipp:Mes_time>2019-10-18</eipp:Mes_time>\
                                                    <eipp:MeasurementDevice_ID>123456</eipp:MeasurementDevice_ID>\
                                                    <eipp:Foto>nHBgZGhsUJS0eH/2gAMAwEAAhEDEQA/AP1RRRRQAUUUUAFFFFABRRRQAUUUUAFfCAe9faKAPAjAOa9AYNfaKDKQUUUUGnwjNeWX2x+te6KDKRH4fvj9KjeEE9qnyCTj070ZFMm0ZSKUkSjtVeSEHOMVplVOcgc1CYB3BqkclCtGQ9uQc8ZqJo3zgDitKZDnsc/ArB1vU2tJEtbOJri+k5CKhcRrkAswHOBn/wA+K6Fk8xdJK8bL3OKKz01lpuoDpYsJYZGjLReO4QysBkgA88jPv2570U/ix7maGPlFFFecXCiiigAooooAKKKKACiiigAooooAKKKjnmit4mlnkSKJfzO7BQPuTQB6bNVpbuCGURyyospUusQOXYAZOFHJ/QUqdZ9VRjp2R9AukkklIC3EZJXZu85VgDnjjcOBnOeKSJLzpG2sLe4n0vXL8ZLNdscSR8527yV3emcE4B74p4xtGaTqttf3uoWqT2tk9qjMwVbwYZl25DYUnAJ45Ofil</eipp:Foto>\
                                                    <eipp:ThicknessInstrument>3</eipp:ThicknessInstrument>\
                                                    <eipp:ThicknessManuallyEntered>3</eipp:ThicknessManuallyEntered>\
                                                    <eipp:Thickness_Small>true</eipp:Thickness_Small>\
                                                    <eipp:WedgeShape>true</eipp:WedgeShape>\
                                                    <eipp:PresenceOfCracks>true</eipp:PresenceOfCracks>\
                                                    <eipp:NumberOrder>555</eipp:NumberOrder>\
                                                    <eipp:Number_KP>4</eipp:Number_KP>\
                                                    <eipp:PlaceOfRepair>a84d0a15-08ec-11e5-829d-00155d6cab05</eipp:PlaceOfRepair>\
                                                    <eipp:SyntheticIdentifierPads>987654</eipp:SyntheticIdentifierPads>\
                                                 </eipp:Parameters>\
                                              </eipp:SetKolodkaInfo>\
                                           </soap:Body>\
                                        </soap:Envelope>';
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            
                                            result = response;
                                        } catch (err) {
                                            result = {
                                                status: 'error',
                                                Error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="ASU_URL"></AlertDefinitions>
            </AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties>
                <ASU_URL>
                    <Value></Value>
                    <Timestamp>1970-01-01T03:00:00.000+03:00</Timestamp>
                    <Quality>UNKNOWN</Quality>
                </ASU_URL>
            </ThingProperties>
        </Thing>
    </Things>
</Entities>
