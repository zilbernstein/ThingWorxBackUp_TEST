<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b123"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="3"
 schemaVersion="1052"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         name="connRfidLibrary"
         projectName="Connectors"
         published="false"
         tags=""
         thingTemplate="connRfidLibraryTemplate"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="ASU_URL"
                     ordinal="2"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="producedActions"
                     ordinal="7"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="rfidStatuses"
                     ordinal="5"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="rfidTypes"
                     ordinal="6"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="transferStatuses"
                     ordinal="4"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="zoneTypes"
                     ordinal="4"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddPlannedEntance">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotiveSeries"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="repairStartDatePlan"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sld"
                             ordinal="6"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddUnplannedEntance">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotiveSeries"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="repairStartDatePlan"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sld"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CheckRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionSubnumber"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CheckRfidOnEquipment">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="kpSerial"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionSubnumber"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tedSerial"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CheckSectionOnPlan">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotiveSerie"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="ConvertDate">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="FormatDate">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveSectionDate">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnum_section"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocomotiveSeries">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="locomotive_serie"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSection">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSectionInfo">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subnum_section"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetSha1">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="A"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="InstallRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description="не обязательный"
                             name="rfid"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description="если заполнен, получаем по нему данные по секции и локомотиву"
                             name="sectionSubnumber"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="LinkRfidToEquipment">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="kpSerial"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionSubnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tedSerial"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterLEDismantling">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="kpSerial"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionSubnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tedSerial"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterLEInstallation">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dateTime"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="kpSerial"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="rfid"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="sectionSubnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tedSerial"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterLocomotiveEntranceRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterLocomotiveEntranceVideo">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterLocomotiveExitRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterLocomotiveExitVideo">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="placeOfRepair"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterRfidOnDataBase">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterSectionEntranceRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="equipment"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="pit"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="workShop"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterSectionEntranceVideo">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="pit"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="workShop"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterSectionExitRfid">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="pit"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="workShop"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterSectionExitVideo">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="pit"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="workShop"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="RegisterSectionWashing">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="section_subnumber"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="washing"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="washingDuration"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="StringifyDate">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="date"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="testSoap">
                        <ResultType
                         baseType="XML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="XML"
                             description=""
                             name="input"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddPlannedEntance">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        // params
                                        try {
                                           if (!placeOfRepair || !sectionId || !locomotiveSeries) throw new Error('Проверьте параметры');
                                           result = {status: 'Плановый заход локомотива успешно зарегистрирован'};
                                        } catch (err) {
                                           result = { 
                                               error: err.message 
                                           };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddUnplannedEntance">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = "";
                                        // params
                                        try {
                                            if (!placeOfRepair || !sectionId || !locomotiveSeries) throw new Error('Проверьте параметры');
                                           result = {status: 'Плановый заход локомотива успешно зарегистрирован'};
                                        } catch (err) {
                                           result = { 
                                               error: err.message
                                           };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CheckRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        var smopp = Things['connSmoppLibrary'];
                                        
                                        try {
                                            if (sectionSubnumber && rfid) {
                                                 //var sectionInfo = me.GetSectionInfo({ subnum_section: sectionSubnumber });
                                                var sectionInfo = me.GetSectionInfo({
                                                    subnum_section: "15359466" /* STRING */
                                                });
                                                if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                var date = me.ConvertDate({ date: dateTime /* STRING */ });
                                                //var date = "";
                                                //	var workRfid = smopp.add_work_rfid({
                                                  //  series: sectionInfo.locomotive_ser /* STRING */,
                                                    //number: sectionInfo.locomotive_num /* STRING */,
                                                    //subnumber: sectionSubnumber /* STRING */,
                                                    //dateTime: date /* STRING */,
                                                    //rfid: rfid /* STRING */,
                                                    //sectionId: sectionInfo.section_id /* STRING */
                                                //});
                                                var workRfid = {
                                                    series:"2С5К",
                                                    number:"0275А",
                                                    subnumber:"12025490",
                                                    dateTime:"1562077752",
                                                    rfid:"2545856584",
                                                    sectionId:"3c0afed3-5c25-11e3-9702-ac162db0b20c"
                                                };
                                                result = workRfid;
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CheckRfidOnEquipment">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // params
                                        var serviseParams = {
                                        	
                                        };
                                        
                                        var result = {status : 'Данные успешно переданы в ИС RFID'};
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CheckSectionOnPlan">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetPlanDateResponse.* [1];
                                            var containsPlanDateLines = resultXML.*:: PlanDateLine.*.length() !== 0;
                                            if (containsPlanDateLines) {
                                                var result = [];
                                                for (var i = 0; i < resultXML.*:: PlanDateLine.length(); i++) {
                                                    var node = resultXML.*:: PlanDateLine[i];
                                                    result.push({
                                                        Section: node.*:: Section.toString(),
                                                        DiagnosticMapsLocomotive: node.*:: DiagnosticMapslocomotive.toString(),
                                                        PlaceOfRepair: node.*:: PlaceOfRepair.toString(),
                                                        TypeOfRepair: node.*:: TypeOfRepair.toString(),
                                                        LocomotiveSeries: node.*:: LocomotiveSeries.toString(),
                                                        HomeDepot: node.*:: HomeDepot.toString(),
                                                        RepairStartDatePlan: node.*:: RepairStartDatePlan.toString(),
                                                        RepairStartDateFact: node.*:: RepairStartDateFact.toString()
                                                    });
                                                }
                                                return result;
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ по данным входных параметров',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        var currentDate = function() { 
                                            return me.StringifyDate({ date: new Date() /* STRING */}) 
                                        }
                                        
                                        try {
                                            if (!placeOfRepair) throw new Error('Проверьте параметры');
                                            var content = ['<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetPlanDate>\
                                                     <eipp:Parameter>',
                                                        '<eipp:Date>' + (startDate || currentDate()) + '</eipp:Date>',
                                                        '<eipp:PlaceOfRepair>' + placeOfRepair + '</eipp:PlaceOfRepair>',
                                                        '<eipp:TypeOfRepair></eipp:TypeOfRepair>',
                                                        '<eipp:LocomotiveSeries>' + (locomotiveSerie || '') + '</eipp:LocomotiveSeries>',
                                                        '<eipp:HomeDepot></eipp:HomeDepot>\
                                                     </eipp:Parameter>\
                                                  </eipp:GetPlanDate>\
                                               </soap:Body>\
                                            </soap:Envelope>'].join('');
                                        
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 5000 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                        
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            if (response.Error) throw new Error(response.Error);
                                            this.result = response;
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="ConvertDate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        var digidRegEx = /^[\d]+$/i;
                                        var dateRegEx = /\d{4}-\d{1,2}-\d{1,2}T\d{1,2}:\d{1,2}:\d{1,2}/i;
                                        if (!date) {
                                            this.result = new Date();
                                        } else if (digidRegEx.test(date)) {
                                            this.result = date;
                                        } else if (dateRegEx.test(date)) {
                                            var dateChunks = date.split('T');
                                            var datePart = dateChunks[0].split('-');
                                            var timePart = dateChunks[1].split(':');
                                            var day = parseInt(datePart[2].substring(0, 1) === '0' ? datePart[2].substring(1) : datePart[2]);
                                            var month = parseInt(datePart[1].substring(0, 1) === '0' ? datePart[1].substring(1) : datePart[1]);
                                            var year = parseInt(datePart[0]);
                                            var hours = parseInt(timePart[0].substring(0, 1) === '0' ? timePart[0].substring(1) : timePart[0]);
                                            var minutes = parseInt(timePart[1].substring(0, 1) === '0' ? timePart[1].substring(1) : timePart[1]);
                                            var seconds = parseInt(timePart[2].substring(0, 1) === '0' ? timePart[2].substring(1) : timePart[2]);
                                            this.result = new Date(year, month - 1, day, hours, minutes, seconds);
                                        } else throw new Error('Неверный формат даты и времени');
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="FormatDate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        var dateRegEx = /\d{4}-\d{1,2}-\d{1,2}T\d{1,2}:\d{2}:\d{2}/i;
                                        
                                        if (date) {
                                            if (dateRegEx.test(date)) {
                                                var dateChunks = date.split('T');
                                                result = {
                                                    date: dateChunks[0],
                                                    time: dateChunks[1]
                                                };
                                            } else throw Error('Неверный формат даты');
                                        } else {
                                            var currentDate = new Date();
                                            
                                            var day = currentDate.getDate().toString();
                                            var month = (currentDate.getMonth() + 1).toString();
                                            var year = currentDate.getFullYear().toString();
                                        
                                            day = day.length === 1 ? '0' + day : day;
                                            month = month.length === 1 ? '0' + month : month;
                                        
                                            var hours = currentDate.getHours().toString();
                                            var minutes = currentDate.getMinutes().toString();
                                            var seconds = currentDate.getSeconds().toString();
                                        
                                            minutes = minutes.length === 1 ? '0' + minutes : minutes;
                                            seconds = seconds.length === 1 ? '0' + seconds : seconds;
                                        
                                            result = { 
                                                date: (year + '-' + month + '-' + day),
                                                time: (hours + ':' + minutes + ':' + seconds)
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveSectionDate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetCompositionLocomotiveSectionDateResponse.* [1];
                                            var containsLocomotiveSectionLine = resultXML.*:: CompositionLocomotiveSectionDateLine.*.length() !== 0;
                                            if (containsLocomotiveSectionLine) {
                                                var node = resultXML.*:: CompositionLocomotiveSectionDateLine;
                                                return {
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    ContractSO: node.*:: ContractSO.toString(),
                                                    Sections: [
                                                        node.*:: Section1.toString(), node.*:: Section2.toString(), node.*:: Section3.toString()
                                                    ]
                                                }
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                }
                                            }
                                        }
                                        
                                        try {
                                            var content = ['<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetCompositionLocomotiveSectionDate>\
                                                     <eipp:Parameter>\
                                                        <!--Optional:-->',
                                                        '<eipp:Section_n>' + (section || '') + '</eipp:Section_n>',
                                                        '<eipp:Date>' + (date || '') + '</eipp:Date>\
                                                        <!--Optional:-->\
                                                        <eipp:NumberSection>' + (subnum_section || '') + '</eipp:NumberSection>\
                                                     </eipp:Parameter>\
                                                  </eipp:GetCompositionLocomotiveSectionDate>\
                                               </soap:Body>\
                                            </soap:Envelope>'].join('');
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result = {
                                                error: err.message,
                                                xmlResponse: xmlResponse
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocomotiveSeries">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*:: GetLocomotiveSeriesResponse.*[1];
                                            var containsSeriesLine = resultXML.*:: LocomotiveSeriesLine.length() !== 0;
                                            if (containsSeriesLine) {
                                                var node = resultXML.*:: LocomotiveSeriesLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString()
                                                };
                                            } else {
                                                return {
                                                    Error: 'Нет данных в АСУ СГ',
                                                    ErrorDescription: resultXML.*:: ErrorDescription.toString()
                                                };
                                            }
                                        }
                                        
                                        try {
                                            if (!locomotive_serie) throw new Error('');
                                            var content = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:eipp="http://EIPP.org">\
                                            <soapenv:Header/>\
                                            <soapenv:Body>\
                                              <eipp:GetLocomotiveSeries>\
                                                 <eipp:Guid>\
                                                    <!--Zero or more repetitions:-->\
                                                    <eipp:GuidLine>' + locomotive_serie + '</eipp:GuidLine>\
                                                 </eipp:Guid>\
                                              </eipp:GetLocomotiveSeries>\
                                            </soapenv:Body>\
                                            </soapenv:Envelope>';
                                            var xmlResponse = Resources['ContentLoaderFunctions'].PostXML({
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 0 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            });
                                            var response = parseXMLResponse(xmlResponse);
                                            this.result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSection">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        function parseXMLResponse(xmlResponse) {
                                            var resultXML = xmlResponse.*:: Body.*::GetSectionsResponse.*[1];
                                            var containsSectionLines = resultXML.*::SectionsLine.length() !== 0;
                                            if (containsSectionLines) {
                                                var node = resultXML.*:: SectionsLine;
                                                return {
                                                    ID: node.*:: ID.toString(),
                                                    Kod: node.*:: Kod.toString(),
                                                    Name: node.*:: Name.toString(),
                                                    Number: node.*:: Number.toString(),
                                                    HomeDepot: node.*:: HomeDepot.toString(),
                                                    LocomotiveSeries: node.*:: LocomotiveSeries.toString()
                                                };
                                            } else {
                                                return { error: resultXML.*:: Error.toString() }
                                            }
                                        }
                                        
                                        /** SCRIPT **/
                                        try {
                                            var content = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                               <soap:Header/>\
                                               <soap:Body>\
                                                  <eipp:GetSections>\
                                                     <eipp:Guid>\
                                                        <!--Zero or more repetitions:-->\
                                                        <eipp:GuidLine>' + sectionId + '</eipp:GuidLine>\
                                                        <!--Optional:-->\
                                                        <eipp:PlaceOfRepair></eipp:PlaceOfRepair>\
                                                        <!--Optional:-->\
                                                        <eipp:Start></eipp:Start>\
                                                        <!--Optional:-->\
                                                        <eipp:End></eipp:End>\
                                                     </eipp:Guid>\
                                                  </eipp:GetSections>\
                                               </soap:Body>\
                                            </soap:Envelope>';
                                        
                                            var params = {
                                                proxyScheme: undefined /* STRING */,
                                                headers: undefined /* JSON */,
                                                ignoreSSLErrors: undefined /* BOOLEAN */,
                                                useNTLM: undefined /* BOOLEAN */,
                                                workstation: undefined /* STRING */,
                                                useProxy: undefined /* BOOLEAN */,
                                                withCookies: undefined /* BOOLEAN */,
                                                proxyHost: undefined /* STRING */,
                                                url: me.ASU_URL /* STRING */,
                                                content: content /* STRING */,
                                                timeout: 5000 /* NUMBER */,
                                                proxyPort: undefined /* INTEGER */,
                                                password: "11012019" /* STRING */,
                                                domain: undefined /* STRING */,
                                                contentType: undefined /* STRING */,
                                                username: "ws_eipp" /* STRING */
                                            };
                                        
                                            var xmlResponse = Resources["ContentLoaderFunctions"].PostXML(params);
                                            var response = parseXMLResponse(xmlResponse);
                                            result = response;
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSectionInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var SECTION_TEMPLATE = '2050Секция';
                                        var result = {};
                                        
                                        function findBySubnumber(subnumber) {
                                           var params = {
                                                maxItems: 1,
                                                nameMask: undefined,
                                                query: {
                                                    filters: { type: 'MATCHES', fieldName: 'НОМЕР', expression: subnumber }
                                                },
                                                thingTemplate: SECTION_TEMPLATE,
                                                tags: undefined
                                            };
                                            return Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        }
                                        
                                        function getCurrentDate() {
                                            var date = new Date();
                                            var day = (date.getDay() < 10 ? '0' : '') + date.getDay();
                                            var month = (date.getMonth() + 1 < 10 ? '0' : '') + (date.getMonth() + 1);
                                            var year = date.getFullYear();
                                            return year + '-' + month + '-' + day;
                                        }
                                        
                                        try {
                                            if (subnum_section) {
                                                if (subnum_section.length !== 8) throw new Error('Некорректный субномер секции');
                                                
                                                var section = findBySubnumber(subnum_section);
                                                var locomotive = me.GetLocomotiveSectionDate({
                                                    section: section.name /* STRING */,
                                                    date: getCurrentDate() /* STRING */,
                                                    subnum_section: section.name ? undefined : subnum_section /* STRING */
                                                });
                                                if (locomotive) {
                                                    var locomotiveSeries = me.GetLocomotiveSeries({ locomotive_serie: locomotive.LocomotiveSeries /* STRING */ });
                                                    if (locomotiveSeries.Name) {
                                                        var sectionsInfo = locomotive.Sections.map(function(item) { return me.GetSection({ sectionId: item /* STRING */ }); });
                                                        var sectionInfo = sectionsInfo.filter(function(item) { 
                                                           return item && !item.error && item.Number === subnum_section; 
                                                        })[0]; //take first which has been found
                                                        if (sectionInfo) {
                                                            this.result = {
                                                                locomotive_ser: locomotiveSeries.ID,
                                                                locomotive_num: locomotiveSeries.Name,
                                                                sld: sectionInfo.HomeDepot,
                                                                sld_toir: '',
                                                                section_id: sectionInfo.ID,
                                                                section_subnum: sectionInfo.Number,
                                                                section_num: sectionInfo.Name
                                                            };
                                                        } else throw new Error('Информация о секции не найдена');
                                                    } else throw new Error('Информация о секции не найдена');
                                                } else throw new Error('Информация о секции не найдена');
                                            } else throw new Error('Укажите субномер секции');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetSha1">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        /*
                                         * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
                                         * in FIPS PUB 180-1
                                         * Version 2.1a Copyright Paul Johnston 2000 - 2002.
                                         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
                                         * Distributed under the BSD License
                                         * See http://pajhome.org.uk/crypt/md5 for details.
                                         */
                                        
                                        /*
                                         * Configurable variables. You may need to tweak these to be compatible with
                                         * the server-side, but the defaults work in most cases.
                                         */
                                        var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
                                        var b64pad = ""; /* base-64 pad character. "=" for strict RFC compliance   */
                                        var chrsz = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */
                                        
                                        /*
                                         * These are the functions you'll usually want to call
                                         * They take string arguments and return either hex or base-64 encoded strings
                                         */
                                        function hex_sha1(s) { return binb2hex(core_sha1(str2binb(s), s.length * chrsz)); }
                                        
                                        function b64_sha1(s) { return binb2b64(core_sha1(str2binb(s), s.length * chrsz)); }
                                        function str_sha1(s) { return binb2str(core_sha1(str2binb(s), s.length * chrsz)); }
                                        function hex_hmac_sha1(key, data) { return binb2hex(core_hmac_sha1(key, data)); }
                                        function b64_hmac_sha1(key, data) { return binb2b64(core_hmac_sha1(key, data)); }
                                        function str_hmac_sha1(key, data) { return binb2str(core_hmac_sha1(key, data)); }
                                        
                                        /*
                                         * Perform a simple self-test to see if the VM is working
                                         */
                                        function sha1_vm_test() {
                                            return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
                                        }
                                        
                                        /*
                                         * Calculate the SHA-1 of an array of big-endian words, and a bit length
                                         */
                                        function core_sha1(x, len) {
                                            /* append padding */
                                            x[len >> 5] |= 0x80 << (24 - len % 32);
                                            x[((len + 64 >> 9) << 4) + 15] = len;
                                        
                                            var w = Array(80);
                                            var a = 1732584193;
                                            var b = -271733879;
                                            var c = -1732584194;
                                            var d = 271733878;
                                            var e = -1009589776;
                                        
                                            for (var i = 0; i < x.length; i += 16) {
                                                var olda = a;
                                                var oldb = b;
                                                var oldc = c;
                                                var oldd = d;
                                                var olde = e;
                                        
                                                for (var j = 0; j < 80; j++) {
                                                    if (j < 16) w[j] = x[i + j];
                                                    else w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                                                    var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
                                                        safe_add(safe_add(e, w[j]), sha1_kt(j)));
                                                    e = d;
                                                    d = c;
                                                    c = rol(b, 30);
                                                    b = a;
                                                    a = t;
                                                }
                                        
                                                a = safe_add(a, olda);
                                                b = safe_add(b, oldb);
                                                c = safe_add(c, oldc);
                                                d = safe_add(d, oldd);
                                                e = safe_add(e, olde);
                                            }
                                            return Array(a, b, c, d, e);
                                        
                                        }
                                        
                                        /*
                                         * Perform the appropriate triplet combination function for the current
                                         * iteration
                                         */
                                        function sha1_ft(t, b, c, d) {
                                            if (t < 20) return (b & c) | ((~b) & d);
                                            if (t < 40) return b ^ c ^ d;
                                            if (t < 60) return (b & c) | (b & d) | (c & d);
                                            return b ^ c ^ d;
                                        }
                                        
                                        /*
                                         * Determine the appropriate additive constant for the current iteration
                                         */
                                        function sha1_kt(t) {
                                            return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 :
                                                (t < 60) ? -1894007588 : -899497514;
                                        }
                                        
                                        /*
                                         * Calculate the HMAC-SHA1 of a key and some data
                                         */
                                        function core_hmac_sha1(key, data) {
                                            var bkey = str2binb(key);
                                            if (bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);
                                        
                                            var ipad = Array(16), opad = Array(16);
                                            for (var i = 0; i < 16; i++) {
                                                ipad[i] = bkey[i] ^ 0x36363636;
                                                opad[i] = bkey[i] ^ 0x5C5C5C5C;
                                            }
                                        
                                            var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
                                            return core_sha1(opad.concat(hash), 512 + 160);
                                        }
                                        
                                        /*
                                         * Add integers, wrapping at 2^32. This uses 16-bit operations internally
                                         * to work around bugs in some JS interpreters.
                                         */
                                        function safe_add(x, y) {
                                            var lsw = (x & 0xFFFF) + (y & 0xFFFF);
                                            var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                                            return (msw << 16) | (lsw & 0xFFFF);
                                        }
                                        
                                        /*
                                         * Bitwise rotate a 32-bit number to the left.
                                         */
                                        function rol(num, cnt) {
                                            return (num << cnt) | (num >>> (32 - cnt));
                                        }
                                        
                                        /*
                                         * Convert an 8-bit or 16-bit string to an array of big-endian words
                                         * In 8-bit function, characters >255 have their hi-byte silently ignored.
                                         */
                                        function str2binb(str) {
                                            var bin = Array();
                                            var mask = (1 << chrsz) - 1;
                                            for (var i = 0; i < str.length * chrsz; i += chrsz)
                                                bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i % 32);
                                            return bin;
                                        }
                                        
                                        /*
                                         * Convert an array of big-endian words to a string
                                         */
                                        function binb2str(bin) {
                                            var str = "";
                                            var mask = (1 << chrsz) - 1;
                                            for (var i = 0; i < bin.length * 32; i += chrsz)
                                                str += String.fromCharCode((bin[i >> 5] >>> (32 - chrsz - i % 32)) & mask);
                                            return str;
                                        }
                                        
                                        /*
                                         * Convert an array of big-endian words to a hex string.
                                         */
                                        function binb2hex(binarray) {
                                            var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
                                            var str = "";
                                            for (var i = 0; i < binarray.length * 4; i++) {
                                                str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +
                                                    hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);
                                            }
                                            return str;
                                        }
                                        
                                        /*
                                         * Convert an array of big-endian words to a base-64 string
                                         */
                                        function binb2b64(binarray) {
                                            var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                                            var str = "";
                                            for (var i = 0; i < binarray.length * 4; i += 3) {
                                                var triplet = (((binarray[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16)
                                                    | (((binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8)
                                                    | ((binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF);
                                                for (var j = 0; j < 4; j++) {
                                                    if (i * 8 + j * 6 > binarray.length * 32) str += b64pad;
                                                    else str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
                                                }
                                            }
                                            return str;
                                        }
                                        
                                        var result = hex_sha1(A);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="InstallRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // params
                                        var rfidThing = Things['connRfidLibrary'];
                                        var serviseParams = {
                                        	
                                        };
                                        var result = {
                                            employee: 'Sotrudnik',
                                            date: rfidThing.StringifyDate({ date: undefined }),
                                            rfid: rfid || 'test_value'
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="LinkRfidToEquipment">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        var CONN_RFID_CATALOG_TEMPLATE = 'connRfidCatalog';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        function createRfid(sectionInfo, thingProps) {
                                            var rfidThingName = generateRfidThingName(rfid, thingProps.id);
                                            Resources['EntityServices'].CreateThing({
                                                name: rfidThingName,
                                                description: thingProps.type /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_RFID_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[rfidThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            if (sectionInfo) {
                                                thing.locomotiveSeries = sectionInfo.locomotive_ser;
                                                thing.locomotiveNumber = sectionInfo.locomotive_num;
                                                thing.sectionNumber = sectionInfo.section_num;
                                                thing.sectionSubnumber = sectionInfo.section_subnum;
                                                thing.sectionId = sectionInfo.section_id || '';
                                            }
                                            
                                            thing.kpSerial = kpSerial || '';
                                            thing.tedSerial = tedSerial || '';
                                            thing.rfid = rfid;
                                            thing.type = thingProps.type;
                                            thing.rfidStatus = me.rfidStatuses.Actual;
                                            
                                            return thing;
                                        }
                                        
                                        function generateRfidThingName(rfid, id) {
                                            return me.GetSha1({ A: (rfid + id) /* STRING */ });
                                        }
                                        
                                        try {
                                            if (rfid) {
                                                if (sectionSubnumber || kpSerial || tedSerial) {
                                                    if (kpSerial && tedSerial) throw new Error('Заполнены сразу КП и ТЭД');
                                                    
                                                    var rfidThing = rfidEntityHandler.FindRfid({
                                                        rfid: rfid /* STRING */,
                                                        status: me.rfidStatuses.Actual /* STRING */
                                                    });
                                                    if (rfidThing.name) throw new Error('Метка с id ' + rfid + ' уже существует и привязана к оборудованию');
                                                
                                                     var getRfidProps = function() {
                                                        if (kpSerial) return { type: me.rfidTypes.KP, id: kpSerial };
                                                        else if (tedSerial) return { type: me.rfidTypes.TED, id: tedSerial };
                                                        else if (sectionInfo) return { type: me.rfidTypes.Section, id: sectionInfo.section_id };
                                                        else throw new Error('Неопределенный тип оборудования');
                                                    };
                                                    
                                                    var sectionInfo = me.GetSectionInfo({ subnum_section: sectionSubnumber /* STRING */ });
                                                    if (sectionSubnumber && sectionInfo && sectionInfo.error) throw new Error(sectionInfo.error);
                                                    
                                                    var rfidProps = getRfidProps();
                                                    rfidThings = rfidEntityHandler.FindRfid({
                                                        status: me.rfidStatuses.Actual /* STRING */,
                                                        type: rfidProps.type /* STRING */,
                                                        sectionId: sectionInfo ? sectionInfo.section_id : undefined /* STRING */,
                                                        kpSerial: kpSerial /* STRING */,
                                                        tedSerial: tedSerial /* STRING */
                                                    });
                                                        
                                                    for (var i = 0; i < rfidThings.rows.length; i++) {
                                                        var thing = Things[rfidThings.rows[i].name];
                                                        thing.rfidStatus = me.rfidStatuses.Outdated;
                                                    }
                                                    
                                                    var newRfidThing = createRfid(sectionInfo, rfidProps);
                                                    me.RegisterRfidOnDataBase();
                                        
                                                    result = {
                                                       status: 'Метка успешно привязана'
                                                    };
                                                } else throw new Error('Проверьте параметры');
                                            } else throw new Error('Предоставьте параметр rfid');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterLEDismantling">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        var CONN_INSTALLATION_HISTORY_TEMPLATE = 'connInstallationHistory';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        function generateInstallationHistoryThingName(serial, dateTime) {
                                            return me.GetSha1({ A: ('Dismantling' + serial + JSON.stringify(dateTime)) });
                                        }
                                        
                                        function createInstallationHistory(sectionId) {
                                            var dateTime = me.FormatDate({ date: dateTime /* STRING */ });
                                            var thingName = generateInstallationHistoryThingName(kpSerial || tedSerial, dateTime);
                                            Resources['EntityServices'].CreateThing({
                                                name: thingName,
                                                description: undefined,
                                                thingTemplateName: CONN_INSTALLATION_HISTORY_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[thingName];
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.date = dateTime.date;
                                            thing.time = dateTime.time;
                                            thing.kpSerial = kpSerial || '';
                                            thing.tedSerial = tedSerial || '';
                                            thing.rfid = rfid;
                                            thing.producedAction = me.producedActions.Dismantling;
                                            thing.sectionId = sectionId;
                                            return thing;
                                        }
                                        
                                        try {
                                            if (!sectionSubnumber && !rfid) throw new Error('Проверьте параметры');
                                            if (kpSerial && tedSerial) throw new Error('Проверьте параметры');
                                            else if (kpSerial || tedSerial) {
                                                var sectionInfo = me.GetSectionInfo({
                                                    subnum_section: sectionSubnumber /* STRING */
                                                });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var installationHistoryThing = createInstallationHistory(sectionInfo.section_id);
                                                    var rfidThing = rfidEntityHandler.FindRfid({ rfid: rfid /* STRING */, status: me.rfidStatuses.Actual /* STRING */ });
                                                    if (rfidThing.name) {
                                                        rfidThing = Things[rfidThing.name];
                                                        var isValid = rfidThing.kpSerial === kpSerial || rfidThing.tedSerial === tedSerial;
                                                        if (isValid) {
                                                            rfidThing.locomotiveSeries = '';
                                                            rfidThing.locomotiveNumber = '';
                                                            rfidThing.sectionId = '';
                                                            rfidThing.sectionNumber = '';
                                                            rfidThing.sectionSubnumber = '';
                                                            result = {
                                                                status: 'Демонтаж оборудования зарегистрирован'
                                                            };
                                                        } else throw new Error('Не соответствует привязка RFID - метки к указанному оборудованию');
                                                    } else throw new Error('Не найдена привязка RFID - метки к указанному оборудованию');
                                                } else throw new Error('Не найдена информация по секции');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterLEInstallation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        var CONN_INSTALLATION_HISTORY_TEMPLATE = 'connInstallationHistory';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        function generateInstallationHistoryThingName(serial, dateTime) {
                                            return me.GetSha1({ A: ('Installation' + serial + JSON.stringify(dateTime)) });
                                        }
                                        
                                        function createInstallationHistory(sectionId) {
                                            var dateTime = me.FormatDate({ date: dateTime /* STRING */ });
                                            var thingName = generateInstallationHistoryThingName(kpSerial || tedSerial, dateTime);
                                            Resources['EntityServices'].CreateThing({
                                                name: thingName,
                                                description: undefined,
                                                thingTemplateName: CONN_INSTALLATION_HISTORY_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[thingName];
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.date = dateTime.date;
                                            thing.time = dateTime.time;
                                            thing.kpSerial = kpSerial || '';
                                            thing.tedSerial = tedSerial || '';
                                            thing.rfid = rfid;
                                            thing.producedAction = me.producedActions.Installation;
                                            thing.sectionId = sectionId;
                                            return thing;
                                        }
                                        
                                        try {
                                            if (!sectionSubnumber && !rfid) throw new Error('Проверьте параметры');
                                            else if (kpSerial || tedSerial) {
                                                var sectionInfo = me.GetSectionInfo({
                                                    subnum_section: sectionSubnumber /* STRING */
                                                });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var installationHistoryThing = createInstallationHistory(sectionInfo.section_id);
                                                    var rfidThing = rfidEntityHandler.FindRfid({
                                                        rfid: rfid /* STRING */,
                                                        status: me.rfidStatuses.Actual /* STRING */,
                                                    });
                                                    if (rfidThing.name) {
                                                        var isValid = rfidThing.kpSerial === kpSerial || rfidThing.tedSerial === tedSerial;
                                                        if (isValid) {
                                                            var thing = Things[rfidThing.name];
                                                            thing.locomotiveSeries = sectionInfo.locomotive_ser;
                                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                                            thing.sectionId = sectionInfo.section_id;
                                                            thing.sectionNumber = sectionInfo.section_num;
                                                            thing.sectionSubnumber = sectionSubnumber;
                                                            
                                                            result = {
                                                                status: 'Монтаж оборудования успешно зарегистрирован'
                                                            };
                                                        } else throw new Error('Не соответствует привязка RFID - метки к указанному оборудованию');
                                                    } else throw new Error('Не найдена привязка RFID - метки к указанному оборудованию');
                                                } else throw new Error('Не найдена информация по секции');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterLocomotiveEntranceRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(placeOfRepair, dateTime) {
                                            var zoneType = me.zoneTypes.POR;
                                            var zoneThingName = generateZoneThingName(placeOfRepair, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + placeOfRepair,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.type = zoneType;
                                            thing.id = placeOfRepair;
                                        
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, placeOfRepair) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferThingName(sectionId, placeOfRepair);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: placeOfRepair, type: me.zoneTypes.POR });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(placeOfRepair, dateTime);
                                            }
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.videoanalytics = false;
                                            thing.rfid = true;
                                            thing.status = me.transferStatuses.Actual;
                                            thing.enterDate = dateTime.date;
                                            thing.enterTime = dateTime.time;
                                        
                                            return thing;
                                        }
                                        
                                        function generateTransferThingName(sectionId, sld, date) {
                                            return me.GetSha1({ A: (sectionId + sld + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneThingName(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        /* SCRIPT */
                                        try {
                                            if (section_subnumber && placeOfRepair) {
                                                var dateTime = me.FormatDate({ date: date /* STRING */ });
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var rfid = rfidEntityHandler.FindRfid({ sectionId: sectionInfo.section_id });
                                                    var transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date || '', status: me.transferStatuses.Actual });
                                                    if (transfer.name) {
                                                        var thing = Things[transfer.name];
                                                        if (thing.rfid) {
                                                            thing.status = me.transferStatuses.Completed;
                                                            thing = createTransfer(sectionInfo, placeOfRepair);
                                                        } else if (transfer.videoanalytics) {
                                                            thing.rfid = true;
                                                            thing.enterDate = dateTime.date;
                                                            thing.enterTime = dateTime.time;
                                                        } else {
                                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                                            thing.sectionNumber = sectionInfo.section_num;
                                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                                            thing.videoanalytics = false;
                                                            thing.rfid = true;
                                                            thing.status = me.transferStatuses.Actual;
                                                            thing.enterDate = dateTime.date;
                                                            thing.enterTime = dateTime.time;
                                                        }
                                                        transfer = thing;
                                                    } else {
                                                        transfer = createTransfer(sectionInfo, placeOfRepair);
                                                    }
                                                    var checkSectionOnPlan = me.CheckSectionOnPlan({
                                                        locomotiveSerie: transfer.locomotiveSerie /* STRING */,
                                                        startDate: transfer.enterDate /* STRING */,
                                                        placeOfRepair: placeOfRepair /* STRING */
                                                    });
                                                    var inPlan = checkSectionOnPlan && !checkSectionOnPlan.error;
                                                    if (inPlan) {
                                                        var addedPlannedEntrance = me.AddPlannedEntance({
                                                            placeOfRepair: placeOfRepair /* STRING */,
                                                            sld: '' /* STRING */,
                                                            sectionId: sectionInfo.section_id /* STRING */,
                                                            locomotiveSeries: sectionInfo.locomotive_ser /* STRING */,
                                                            repairStartDatePlan: transfer.enterDate /* STRING */
                                                        });
                                                        if (addedPlannedEntrance.error) throw new Error(addedPlannedEntrance.error);
                                                        var planDateTime = checkSectionOnPlan.array.map(function (checkSectionOnPlan) {
                                                            return checkSectionOnPlan.RepairStartDatePlan;
                                                        });
                                                    } else {
                                                        var addedUnplannedEntrance = me.AddUnplannedEntance({
                                                            placeOfRepair: placeOfRepair /* STRING */,
                                                            sld: '' /* STRING */,
                                                            repairStartDatePlan: transfer.enterDate /* STRING */,
                                                            sectionId: sectionInfo.section_id /* STRING */,
                                                            locomotiveSeries: sectionInfo.locomotive_ser /* STRING */
                                                        });
                                                        if (addedUnplannedEntrance.error) throw new Error(addedUnplannedEntrance.error);
                                                    }
                                                    var place = Things[transfer.place];
                                                    result = {
                                                        sld: sectionInfo.sld,
                                                        rfid: rfid.name || '',
                                                        //transferId: transfer.name,
                                                        placeOfRepair: placeOfRepair,
                                                        place: place.id,
                                                        //zoneId: place.name,
                                                        sectionId: transfer.sectionId,
                                                        sectionSubnumber: transfer.sectionSubnumber,
                                                        sectionNumber: transfer.sectionNumber,
                                                        locomotiveSerie: transfer.locomotiveSerie,
                                                        locomotiveName: transfer.locomotiveNumber,
                                                        //isRfidCheck: transfer.rfid,
                                                        //isVideoCheck: transfer.videoanalytics,
                                                        enterDate: transfer.enterDate,
                                                        enterTime: transfer.enterTime,
                                                        //status: transfer.status,
                                                        inPlan: inPlan,
                                                        planDateTime: planDateTime
                                                    };
                                                } else throw new Error('Секция по данному субномеру не найдена');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterLocomotiveEntranceVideo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(placeOfRepair, dateTime) {
                                            var zoneType = me.zoneTypes.POR;
                                            var zoneThingName = generateZoneThingName(placeOfRepair, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + placeOfRepair,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.id = placeOfRepair;
                                            thing.type = zoneType;
                                        
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, placeOfRepair) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferThingName(sectionId, placeOfRepair);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = Things['RfidEntityHandler'].FindTransferZone({ placeId: placeOfRepair, type: me.zoneTypes.POR });
                                            if (!transferZone.name) { transferZone = createTransferZone(placeOfRepair, dateTime); }
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.status = me.transferStatuses.Actual;
                                            thing.rfid = false;
                                            thing.videoanalytics = true;
                                            thing.enterDate = dateTime.date;
                                            thing.enterTime = dateTime.time;
                                        
                                            return thing;
                                        }
                                        
                                        function generateTransferThingName(sectionId, place, date) {
                                            return me.GetSha1({ A: (sectionId + place + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneThingName(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        try {
                                            if (!section_subnumber) throw new Error('Субномер секции не указан');
                                            var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            if (sectionInfo) {
                                                if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                var rfid = rfidEntityHandler.FindRfid({ sectionId: sectionInfo.section_id });
                                                var transfer = Things['RfidEntityHandler'].FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                if (transfer.name) {
                                                    var thing = Things[transfer.name];
                                                    if (thing.rfid) {
                                                        if (thing.videoanalytics) {
                                                            thing.status = me.transferStatuses.Completed;
                                                            thing = createTransfer(sectionInfo, placeOfRepair);
                                                        } else { thing.videoanalytics = true; }
                                                    } else {
                                                        thing.sectionSubnumber = sectionInfo.section_subnum;
                                                        thing.sectionNumber = sectionInfo.section_num;
                                                        thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                                        thing.locomotiveNumber = sectionInfo.locomotive_num;
                                                        thing.status = me.transferStatuses.Actual;
                                                        thing.rfid = false;
                                                        thing.videoanalytics = true;
                                                        thing.enterDate = dateTime.date;
                                                        thing.enterTime = dateTime.time;
                                                    }
                                                    transfer = thing;
                                                } else {
                                                    transfer = createTransfer(sectionInfo, placeOfRepair);
                                                }
                                                var checkSectionOnPlan = me.CheckSectionOnPlan({
                                                    locomotiveSerie: transfer.locomotiveSerie, 
                                                    startDate: transfer.enterDate, 
                                                    placeOfRepair: placeOfRepair 
                                                });
                                                var inPlan = checkSectionOnPlan && !checkSectionOnPlan.error;
                                                if (inPlan) {
                                                    var addedPlannedEntrance = me.AddPlannedEntance({
                                                        placeOfRepair: placeOfRepair /* STRING */,
                                                        sld: '' /* STRING */,
                                                        sectionId: sectionInfo.section_id /* STRING */,
                                                        locomotiveSeries: sectionInfo.locomotive_ser /* STRING */,
                                                        repairStartDatePlan: transfer.enterDate /* STRING */
                                                    });
                                                    if (addedPlannedEntrance.error) throw new Error(addedPlannedEntrance.error);
                                                    var planDateTime = checkSectionOnPlan.array.map(function (checkSectionOnPlan) {
                                                        return checkSectionOnPlan.RepairStartDatePlan;
                                                    });
                                                    if (addedPlannedEntrance.error) {
                                                        var addedPlannedEntranceError = addedPlannedEntrance.error;
                                                    }
                                                } else {
                                                    var addedUnplannedEntrance = me.AddUnplannedEntance({
                                                        placeOfRepair: placeOfRepair /* STRING */,
                                                        sld: undefined /* STRING */,
                                                        repairStartDatePlan: transfer.enterDate /* STRING */,
                                                        sectionId: sectionInfo.section_id /* STRING */,
                                                        locomotiveSeries: sectionInfo.locomotive_ser /* STRING */
                                                    });
                                                    if (addedUnplannedEntrance.error) throw new Error('Ошибка addedUnplannedEntrance');
                                                }
                                                var place = Things[transfer.place];
                                                result = {
                                                    //transferId: transfer.name,
                                                    place: place.id,
                                                    //zoneId: place.name,
                                                    sectionId: transfer.sectionId,
                                                    sectionSubnumber: transfer.sectionSubnumber,
                                                    sectionNumber: transfer.sectionNumber,
                                                    locomotiveSerie: transfer.locomotiveSerie,
                                                    locomotiveName: transfer.locomotiveNumber,
                                                    //isRfidCheck: transfer.rfid,
                                                    //isVideoCheck: transfer.videoanalytics,
                                                    enterDate: transfer.enterDate,
                                                    enterTime: transfer.enterTime,
                                                    //status: transfer.status,
                                                    rfid: rfid.name || '',
                                                    inPlan: inPlan,
                                                    planDateTime: planDateTime
                                                };
                                            } else throw new Error('Информации по данной секции по субномеру ' + section_subnumber + ' не найдено');
                                        } catch (err) {
                                            result = { 
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterLocomotiveExitRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(placeOfRepair, dateTime) {
                                            var zoneType = me.zoneTypes.POR;
                                            var zoneThingName = generateZoneId(placeOfRepair, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + placeOfRepair,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.type = zoneType;
                                            thing.id = placeOfRepair;
                                            
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, placeOfRepair) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferId(sectionId, placeOfRepair);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: placeOfRepair, type: me.zoneTypes.POR });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(placeOfRepair, dateTime);
                                            }
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.videoanalyticsExit = false;
                                            thing.rfidExit = true;
                                            thing.status = me.transferStatuses.Completed;
                                            thing.exitDate = dateTime.date;
                                            thing.exitTime = dateTime.time;
                                            
                                            return thing;
                                        }
                                        
                                        function generateTransferId(sectionId, sld) {
                                            return me.GetSha1({ A: (sectionId + sld + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneId(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        /* SCRIPT */
                                        try {
                                            if (section_subnumber && placeOfRepair) {
                                                var dateTime = me.FormatDate({ date: date /* STRING */ });
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                    if (transfer.name) {
                                                        var thing = Things[transfer.name];
                                                        thing.rfidExit = true;
                                                        thing.status = me.transferStatuses.Completed;
                                                        thing.exitDate = dateTime.date;
                                                        thing.exitTime = dateTime.time;
                                                        transfer = thing;
                                                    } else {
                                                        var lastExitTransfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, exitDate: dateTime.date, status: me.transferStatuses.Completed });
                                                        if (lastExitTransfer.name && lastExitTransfer.videoanalyticsExit) {
                                                            var transferThing = Things[lastExitTransfer.name];
                                                            transferThing.rfidExit = true;
                                                            transfer = transferThing;
                                                        } else {
                                                            transfer = createTransfer(sectionInfo, placeOfRepair);
                                                        }
                                                    }
                                                    
                                                    var place = Things[transfer.place];
                                                    result = {
                                                        status: 'Выход локомотива зарегистрирован'
                                                        //transferId: transfer.name,
                                                        //place: place.id,
                                                        //zoneId: place.name,
                                                        //sectionId: transfer.sectionId,
                                                        //sectionSubnumber: transfer.sectionSubnumber,
                                                        //sectionNumber: transfer.sectionNumber,
                                                        //locomotiveSerie: transfer.locomotiveSerie,
                                                        //locomotiveName: transfer.locomotiveNumber,
                                                        //rfid: transfer.rfid,
                                                        //video: transfer.videoanalytics,
                                                        //rfidExit: transfer.rfidExit,
                                                        //videoExit: transfer.videoanalyticsExit,
                                                        //enterDate: transfer.enterDate,
                                                        //enterTime: transfer.enterTime,
                                                        //exitDate: transfer.exitDate,
                                                        //exitTime: transfer.exitTime,
                                                        //status: transfer.status,
                                                        //plan: ''
                                                    };
                                                } else throw new Error('Секция по данному субномеру не найдена');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterLocomotiveExitVideo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(placeOfRepair, dateTime) {
                                            var zoneType = me.zoneTypes.POR;
                                            var zoneThingName = generateZoneId(placeOfRepair, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + placeOfRepair,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.type = zoneType;
                                            thing.id = placeOfRepair;
                                            
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, placeOfRepair) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferId(sectionId, placeOfRepair);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: placeOfRepair, type: me.zoneTypes.POR });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(placeOfRepair, dateTime);
                                            }
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.videoanalyticsExit = true;
                                            thing.rfidExit = false;
                                            thing.status = me.transferStatuses.Completed;
                                            thing.exitDate = dateTime.date;
                                            thing.exitTime = dateTime.time;
                                            
                                            return thing;
                                        }
                                        
                                        function generateTransferId(sectionId, sld, date) {
                                            return me.GetSha1({ A: (sectionId + sld + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneId(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        /* SCRIPT */
                                        try {
                                            if (section_subnumber && placeOfRepair) {
                                                var dateTime = me.FormatDate({ date: date /* STRING */ });
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                    if (transfer.name) {
                                                        var thing = Things[transfer.name];
                                                        thing.videoanalyticsExit = true;
                                                        thing.status = me.transferStatuses.Completed;
                                                        thing.exitDate = dateTime.date;
                                                        thing.exitTime = dateTime.time;
                                                        transfer = thing;
                                                    } else {
                                                        transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, exitDate: dateTime.date, status: me.transferStatuses.Completed });
                                                        if (transfer.name && transfer.enterDate && transfer.enterTime) {
                                                            var thing = Things[transfer.name];
                                                            thing.videoanalyticsExit = true;
                                                            transfer = thing;
                                                        } else {
                                                            transfer = createTransfer(sectionInfo, placeOfRepair);
                                                        }
                                                    }
                                                    
                                                    var place = Things[transfer.place];
                                                    result = {
                                                        status: 'Выход локомотива зарегистрирован'
                                                        //transferId: transfer.name,
                                                        //place: place.id,
                                                        //zoneId: place.name,
                                                        //sectionId: transfer.sectionId,
                                                        //sectionSubnumber: transfer.sectionSubnumber,
                                                        //sectionNumber: transfer.sectionNumber,
                                                        //locomotiveSerie: transfer.locomotiveSerie,
                                                        //locomotiveName: transfer.locomotiveNumber,
                                                        //rfid: transfer.rfid,
                                                        //video: transfer.videoanalytics,
                                                        //rfidExit: transfer.rfidExit,
                                                        //videoExit: transfer.videoanalyticsExit,
                                                        //exitDate: transfer.exitDate,
                                                        //exitTime: transfer.exitTime,
                                                        //status: transfer.status,
                                                        //plan: ''
                                                    };
                                                } else throw new Error('Секция по данному субномеру не найдена');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterRfidOnDataBase">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // params
                                        var serviseParams = {
                                        	
                                        };
                                        
                                        var result = {
                                            status: "Success"
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterSectionEntranceRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        var CONN_RFID_CATALOG_TEMPLATE = 'connRfidCatalog';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        var infoTableFunctions = Resources['InfoTableFunctions'];
                                        
                                        var result = {};
                                        
                                        function findRfidBySection(sectionId) {
                                            var params = {
                                                maxItems: undefined,
                                                nameMask: undefined,
                                                query: {
                                                    filters: {
                                                        type: 'And', filters: [
                                                            { type: 'Matches', fieldName: 'sectionId', expression: sectionId },
                                                            { type: 'NotMatches', fieldName: 'type', expression: me.rfidTypes.Section }
                                                        ]
                                                    }
                                                },
                                                thingTemplate: CONN_RFID_CATALOG_TEMPLATE,
                                                tags: undefined
                                            };
                                            var result = Resources['SearchFunctions'].SearchThingsByTemplate(params);
                                            return infoTableFunctions.ToJSON({ table: result /* INFOTABLE */ });
                                        }
                                        
                                        function createTransferZone(workShop, dateTime) {
                                            var zoneType = me.zoneTypes.WSP;
                                            var zoneThingName = generateZoneId(workShop, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + workShop,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.type = zoneType;
                                            thing.id = workShop;
                                            thing.pit = pit;
                                        
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, workShop) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferId(sectionId, workShop);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: workShop, type: me.zoneTypes.WSP });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(workShop, dateTime);
                                            }
                                        
                                            thing.EnableThing();
                                            thing.RestartThing();
                                        
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.videoanalytics = false;
                                            thing.rfid = true;
                                            thing.status = me.transferStatuses.Actual;
                                            thing.enterDate = dateTime.date;
                                            thing.enterTime = dateTime.time;
                                        
                                            return thing;
                                        }
                                        
                                        function generateTransferId(sectionId, sld) {
                                            return me.GetSha1({ A: (sectionId + sld + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneId(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        /* SCRIPT */
                                        try {
                                            if (section_subnumber && workShop) {
                                                var dateTime = me.FormatDate({ date: date /* STRING */ });
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                    if (transfer.name) {
                                                        var thing = Things[transfer.name];
                                                        if (thing.rfid) {
                                                            thing.status = me.transferStatuses.Completed;
                                                            thing = createTransfer(sectionInfo, workShop);
                                                        } else if (transfer.videoanalytics) {
                                                            thing.rfid = true;
                                                            thing.enterDate = dateTime.date;
                                                            thing.enterTime = dateTime.time;
                                                        } else {
                                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                                            thing.sectionNumber = sectionInfo.section_num;
                                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                                            thing.videoanalytics = false;
                                                            thing.rfid = true;
                                                            thing.status = me.transferStatuses.Actual;
                                                            thing.enterDate = dateTime.date;
                                                            thing.enterTime = dateTime.time;
                                                        }
                                                        transfer = thing;
                                                    } else {
                                                        transfer = createTransfer(sectionInfo, workShop);
                                                    }
                                        
                                                    var rfidNotRead = [];
                                                    var notRegisteredEquipment = [];
                                                    var rfidThings = findRfidBySection(sectionInfo.section_id).rows
                                                        .map(function (item) {
                                                            return {
                                                                kpSerial: item.kpSerial,
                                                                tedSerial: item.tedSerial
                                                            };
                                                        });
                                                    
                                                    try {
                                                        var parsedEquipment = JSON.parse(equipment);
                                                        rfidThings.forEach(function (item) {
                                                            var index = parsedEquipment.indexOf(item);
                                                            if (index !== -1) rfidNotRead.push(parsedEquipment[index]);
                                                        });
                                        
                                                        parsedEquipment.forEach(function (item) {
                                                            var index = rfidThings.indexOf(item) ;
                                                            if (index !== -1) notRegisteredEquipment.push(rfidThings[index]);
                                                        });
                                                    } catch (err) { throw new Error(err.message); }
                                                    
                                                    var place = Things[transfer.place];
                                                    result = {
                                                        status: 'Заход секции в цех успешно зарегистрирован'
                                                        //rfidNotRead: rfidNotRead,
                                                        //notRegisteredEquipment: notRegisteredEquipment,
                                                        //transferId: transfer.name,
                                                        //place: place.id,
                                                        //zoneId: place.name,
                                                        //sectionId: transfer.sectionId,
                                                        //sectionSubnumber: transfer.sectionSubnumber,
                                                        //sectionNumber: transfer.sectionNumber,
                                                        //locomotiveSerie: transfer.locomotiveSerie,
                                                        //locomotiveName: transfer.locomotiveNumber,
                                                        //isRfidCheck: transfer.rfid,
                                                        //isVideoCheck: transfer.videoanalytics,
                                                        //enterDate: transfer.enterDate,
                                                        //enterTime: transfer.enterTime,
                                                        //status: transfer.status
                                                    };
                                                } else throw new Error('Секция по данному субномеру не найдена');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterSectionEntranceVideo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(workShop, dateTime) {
                                            var zoneType = me.zoneTypes.WSP;
                                            var zoneThingName = generateZoneId(workShop, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + workShop,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.id = workShop;
                                            thing.type = zoneType;
                                            thing.pit = pit;
                                        
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, workShop) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferId(sectionId, workShop);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: workShop, type: me.zoneTypes.WSP });
                                            if (!transferZone.name) { transferZone = createTransferZone(workShop, dateTime); }
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.status = me.transferStatuses.Actual;
                                            thing.rfid = false;
                                            thing.videoanalytics = true;
                                            thing.enterDate = dateTime.date;
                                            thing.enterTime = dateTime.time;
                                            
                                            return thing;
                                        }
                                        
                                        function generateTransferId(sectionId, place) {
                                            return me.GetSha1({ A: (sectionId + place + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneId(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        try {
                                            if (!section_subnumber) throw new Error('Субномер секции не указан');
                                            var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            if (sectionInfo) {
                                                if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                var transfer = Things['RfidEntityHandler'].FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                if (transfer.name) {
                                                    var thing = Things[transfer.name];
                                                    if (thing.rfid) {
                                                        if (thing.videoanalytics) {
                                                            thing.status = me.transferStatuses.Completed;
                                                            thing = createTransfer(sectionInfo, workShop);
                                                        } else { thing.videoanalytics = true; }
                                                    } else {
                                                        thing.sectionSubnumber = sectionInfo.section_subnum;
                                                        thing.sectionNumber = sectionInfo.section_num;
                                                        thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                                        thing.locomotiveNumber = sectionInfo.locomotive_num;
                                                        thing.status = me.transferStatuses.Actual;
                                                        thing.rfid = false;
                                                        thing.videoanalytics = true;
                                                        thing.enterDate = dateTime.date;
                                                        thing.enterTime = dateTime.time;
                                                    }
                                                    transfer = thing;
                                                } else {
                                                    transfer = createTransfer(sectionInfo, workShop);
                                                }
                                                
                                                var place = Things[transfer.place];
                                                result = {
                                                    status: 'Заход секции в цех успешно зарегистрирован'
                                                    //transferId: transfer.name,
                                                    //place: place.id,
                                                    //zoneId: place.name,
                                                    //sectionId: transfer.sectionId,
                                                    //sectionSubnumber: transfer.sectionSubnumber,
                                                    //sectionNumber: transfer.sectionNumber,
                                                    //locomotiveSerie: transfer.locomotiveSerie,
                                                    ////locomotiveName: transfer.locomotiveNumber,
                                                    //isRfidCheck: transfer.rfid,
                                                    //isVideoCheck: transfer.videoanalytics,
                                                    //enterDate: transfer.enterDate,
                                                    //enterTime: transfer.enterTime,
                                                    //status: transfer.status
                                                };
                                            } else throw new Error('Информации по данной секции по субномеру ' + section_subnumber + ' не найдено');
                                        } catch (err) {
                                            result.error = err.message;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterSectionExitRfid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(workShop, dateTime) {
                                            var zoneType = me.zoneTypes.WSP;
                                            var zoneThingName = generateZoneId(workShop, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + workShop,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.type = zoneType;
                                            thing.pit = pit;
                                            thing.id = workShop;
                                            
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, workShop) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferId(sectionId, workShop);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: workShop, type: me.zoneTypes.WSP });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(workShop, dateTime);
                                            }
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.videoanalyticsExit = false;
                                            thing.rfidExit = true;
                                            thing.status = me.transferStatuses.Completed;
                                            thing.exitDate = dateTime.date;
                                            thing.exitTime = dateTime.time;
                                            
                                            return thing;
                                        }
                                        
                                        function generateTransferId(sectionId, sld) {
                                            return me.GetSha1({ A: (sectionId + sld + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneId(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        /* SCRIPT */
                                        try {
                                            if (section_subnumber && workShop) {
                                                var dateTime = me.FormatDate({ date: date /* STRING */ });
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                    if (transfer.name) {
                                                        var thing = Things[transfer.name];
                                                        thing.rfidExit = true;
                                                        thing.status = me.transferStatuses.Completed;
                                                        thing.exitDate = dateTime.date;
                                                        thing.exitTime = dateTime.time;
                                                        transfer = thing;
                                                    } else {
                                                        var lastExitTransfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, exitDate: dateTime.date, status: me.transferStatuses.Completed });
                                                        if (lastExitTransfer.name && lastExitTransfer.videoanalyticsExit) {
                                                            var transferThing = Things[lastExitTransfer.name];
                                                            transferThing.rfidExit = true;
                                                            transfer = transferThing;
                                                        } else {
                                                            transfer = createTransfer(sectionInfo, workShop);
                                                        }
                                                    }
                                                    
                                                    var place = Things[transfer.place];
                                                    result = {
                                                        status: 'Выход локомотива зарегистрирован'
                                                        //transferId: transfer.name,
                                                        //place: place.id,
                                                        //zoneId: place.name,
                                                        //sectionId: transfer.sectionId,
                                                        //sectionSubnumber: transfer.sectionSubnumber,
                                                        //sectionNumber: transfer.sectionNumber,
                                                        //locomotiveSerie: transfer.locomotiveSerie,
                                                        //locomotiveName: transfer.locomotiveNumber,
                                                        //rfid: transfer.rfid,
                                                        //video: transfer.videoanalytics,
                                                        //rfidExit: transfer.rfidExit,
                                                        //videoExit: transfer.videoanalyticsExit,
                                                        //enterDate: transfer.enterDate,
                                                        //enterTime: transfer.enterTime,
                                                        //exitDate: transfer.exitDate,
                                                        //exitTime: transfer.exitTime,
                                                        //status: transfer.status,
                                                        //plan: ''
                                                    };
                                                } else throw new Error('Секция по данному субномеру не найдена');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result = { error: err.message };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterSectionExitVideo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        var result = {};
                                        
                                        function createTransferZone(workShop, dateTime) {
                                            var zoneType = me.zoneTypes.WSP;
                                            var zoneThingName = generateZoneId(placeOfRepair, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + workShop,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.type = zoneType;
                                            thing.pit = pit;
                                            thing.id = placeOfRepair;
                                            
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, workShop) {
                                            //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            var transferThingName = generateTransferId(sectionId, workShop);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: workShop, type: me.zoneTypes.WSP });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(workShop, dateTime);
                                            }
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.videoanalyticsExit = true;
                                            thing.rfidExit = false;
                                            thing.status = me.transferStatuses.Completed;
                                            thing.exitDate = dateTime.date;
                                            thing.exitTime = dateTime.time;
                                            
                                            return thing;
                                        }
                                        
                                        function generateTransferId(sectionId, sld, date) {
                                            return me.GetSha1({ A: (sectionId + sld + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneId(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        /* SCRIPT */
                                        try {
                                            if (section_subnumber && workShop) {
                                                var dateTime = me.FormatDate({ date: date /* STRING */ });
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, enterDate: dateTime.date, status: me.transferStatuses.Actual });
                                                    if (transfer.name) {
                                                        var thing = Things[transfer.name];
                                                        thing.videoanalyticsExit = true;
                                                        thing.status = me.transferStatuses.Completed;
                                                        thing.exitDate = dateTime.date;
                                                        thing.exitTime = dateTime.time;
                                                        transfer = thing;
                                                    } else {
                                                        transfer = rfidEntityHandler.FindTransfer({ sectionId: sectionInfo.section_id, exitDate: dateTime.date, status: me.transferStatuses.Completed });
                                                        if (transfer.name && transfer.enterDate && transfer.enterTime) {
                                                            var thing = Things[transfer.name];
                                                            thing.videoanalyticsExit = true;
                                                            transfer = thing;
                                                        } else {
                                                            transfer = createTransfer(sectionInfo, workShop);
                                                        }
                                                    }
                                                    
                                                    var place = Things[transfer.place];
                                                    result = {
                                                        status: 'Выход локомотива зарегистрирован'
                                                        //transferId: transfer.name,
                                                        //place: place.id,
                                                        //zoneId: place.name,
                                                        //sectionId: transfer.sectionId,
                                                        //sectionSubnumber: transfer.sectionSubnumber,
                                                        //sectionNumber: transfer.sectionNumber,
                                                        //locomotiveSerie: transfer.locomotiveSerie,
                                                        //locomotiveName: transfer.locomotiveNumber,
                                                        //rfid: transfer.rfid,
                                                        //video: transfer.videoanalytics,
                                                        //rfidExit: transfer.rfidExit,
                                                        //videoExit: transfer.videoanalyticsExit,
                                                        //exitDate: transfer.exitDate,
                                                        //exitTime: transfer.exitTime,
                                                        //status: transfer.status,
                                                        //plan: ''
                                                    };
                                                } else throw new Error('Секция по данному субномеру не найдена');
                                            } else throw new Error('Проверьте параметры');
                                        } catch (err) {
                                            result = { error: err.message };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RegisterSectionWashing">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = {};
                                        
                                        var CONN_ZONE_CATALOG_TEMPLATE = 'connZoneCatalog';
                                        var CONN_TRANSFER_TEMPLATE = 'connTransfer';
                                        var WASHING_ID = 'Washing';
                                        
                                        var rfidEntityHandler = Things['RfidEntityHandler'];
                                        
                                        function createTransferZone(washing, dateTime) {
                                            var zoneType = me.zoneTypes.WSH;
                                            var zoneThingName = generateZoneThingName(washing, dateTime, zoneType);
                                            Resources['EntityServices'].CreateThing({
                                                name: zoneThingName,
                                                description: zoneType + '_' + washing,
                                                thingTemplateName: CONN_ZONE_CATALOG_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[zoneThingName];
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.type = zoneType;
                                            thing.id = washing;
                                            
                                            return thing;
                                        }
                                        
                                        function createTransfer(sectionInfo, washing) {
                                           //Create new transfer thing
                                            var sectionId = sectionInfo.section_id;
                                            var dateTime = me.FormatDate({ date: date /* STRING */ });
                                            
                                            var dateTimeInMillis = me.ConvertDate({ date: (dateTime.date + 'T' + dateTime.time) /* STRING */});
                                            var dateTimeWithElapsedDuration = me.StringifyDate({ date: (parseInt(dateTimeInMillis)).toString() /* STRING */ });
                                            var dateTimeExit = me.FormatDate({ date: dateTimeWithElapsedDuration /* STRING */ });
                                            
                                            var transferThingName = generateTransferThingName(sectionId, washing);
                                            Resources['EntityServices'].CreateThing({
                                                name: transferThingName,
                                                description: sectionId /* Or provide equipment as a description */,
                                                thingTemplateName: CONN_TRANSFER_TEMPLATE,
                                                tags: undefined
                                            });
                                            var thing = Things[transferThingName];
                                            var transferZone = rfidEntityHandler.FindTransferZone({ placeId: washing, type: me.zoneTypes.WSH });
                                            if (!transferZone.name) {
                                                transferZone = createTransferZone(washing, dateTime);
                                            }
                                            
                                            thing.EnableThing();
                                            thing.RestartThing();
                                            
                                            thing.place = transferZone.name;
                                            thing.sectionId = sectionId;
                                            thing.sectionSubnumber = sectionInfo.section_subnum;
                                            thing.sectionNumber = sectionInfo.section_num;
                                            thing.locomotiveSerie = sectionInfo.locomotive_ser;
                                            thing.locomotiveNumber = sectionInfo.locomotive_num;
                                            thing.status = me.transferStatuses.Completed;
                                            thing.enterDate = dateTime.date;
                                            thing.enterTime = dateTime.time;
                                            
                                            thing.exitDate = dateTimeExit.date;
                                            thing.exitTime = dateTimeExit.time;
                                            
                                            return thing;
                                        }
                                        
                                        function generateTransferThingName(sectionId, place) {
                                            return me.GetSha1({ A: (sectionId + place + (new Date())) /* STRING */ });
                                        }
                                        
                                        function generateZoneThingName(place, date, type) {
                                            return me.GetSha1({ A: (place + type + JSON.stringify(date)) /* STRING */ });
                                        }
                                        
                                        try {
                                            if (section_subnumber && washingDuration) {
                                                var sectionInfo = me.GetSectionInfo({ subnum_section: section_subnumber /* STRING */ });
                                                if (sectionInfo) {
                                                    if (sectionInfo.error) throw new Error(sectionInfo.error);
                                                    var transfer = washing ? createTransfer(sectionInfo, washing) : createTransfer(sectionInfo, WASHING_ID);
                                                    var place = transfer.place;
                                                    result = {
                                                        status: 'Заход секции в мойку успешно зарегистрирован'
                                                        //transferId: transfer.name,
                                                        //place: place.id,
                                                        //zoneId: place.name,
                                                        //sectionId: transfer.sectionId,
                                                        //sectionSubnumber: transfer.sectionSubnumber,
                                                        //sectionNumber: transfer.sectionNumber,
                                                        //locomotiveSerie: transfer.locomotiveSerie,
                                                        //locomotiveName: transfer.locomotiveNumber,
                                                        //rfid: transfer.rfid,
                                                        //video: transfer.videoanalytics,
                                                        //rfidExit: transfer.rfidExit,
                                                        //videoExit: transfer.videoanalyticsExit,
                                                        //exitDate: transfer.exitDate,
                                                        //exitTime: transfer.exitTime,
                                                        //status: transfer.status,
                                                        //plan: ''
                                                    };
                                                } else throw new Error('Не найдена информация по секции');
                                            } else throw new Error('Проверьте входные параметры');
                                        } catch (err) {
                                            result = {
                                                error: err.message
                                            };
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="StringifyDate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var d = date ? new Date(parseInt(date)) : new Date();
                                        
                                        var day = (d.getDate() < 10 ? '0' : '') + d.getDate();
                                        var month = ((d.getMonth() + 1) < 10 ? '0' : '') + (d.getMonth() + 1);
                                        var year = d.getFullYear();
                                        var hours = (d.getHours() < 10 ? '0' : '') + d.getHours();
                                        var minutes = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();
                                        var seconds = (d.getSeconds() < 10 ? '0' : '') + d.getSeconds() ;
                                        
                                        var result = year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="testSoap">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = input;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="ASU_URL"></AlertDefinitions>
                <AlertDefinitions
                 name="producedActions"></AlertDefinitions>
                <AlertDefinitions
                 name="rfidStatuses"></AlertDefinitions>
                <AlertDefinitions
                 name="rfidTypes"></AlertDefinitions>
                <AlertDefinitions
                 name="transferStatuses"></AlertDefinitions>
                <AlertDefinitions
                 name="zoneTypes"></AlertDefinitions>
            </AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties>
                <rfid>
                    <Value></Value>
                    <Timestamp>1970-01-01T03:00:00.000+03:00</Timestamp>
                    <Quality>UNKNOWN</Quality>
                </rfid>
                <sectionId>
                    <Value></Value>
                    <Timestamp>1970-01-01T03:00:00.000+03:00</Timestamp>
                    <Quality>UNKNOWN</Quality>
                </sectionId>
                <ASU_URL>
                    <Value>
                    <![CDATA[
                    http://1cdev.locotech.ru/urp_TB_02/ru_RU/ws/IntegrationEIPP
                    ]]>
                    </Value>
                    <Timestamp>2019-08-07T14:42:35.091+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </ASU_URL>
                <zoneTypes>
                    <Value>
                        <json>
                        <![CDATA[
                        {"POR":"POR","WSP":"WSP","SLD":"SLD","WSH":"WSH"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-07-25T17:28:35.471+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </zoneTypes>
                <rfidStatuses>
                    <Value>
                        <json>
                        <![CDATA[
                        {"Actual":"Actual","Outdated":"Outdated"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-08-05T17:14:11.053+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </rfidStatuses>
                <rfidTypes>
                    <Value>
                        <json>
                        <![CDATA[
                        {"TED":"TED","KP":"KP","Section":"Section"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-08-05T17:16:10.725+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </rfidTypes>
                <producedActions>
                    <Value>
                        <json>
                        <![CDATA[
                        {"Installation":"Installation","Dismantling":"Dismantling"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-08-13T15:32:15.172+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </producedActions>
                <transferStatuses>
                    <Value>
                        <json>
                        <![CDATA[
                        {"Completed":"Completed","Actual":"Actual"}
                        ]]>
                        </json>
                    </Value>
                    <Timestamp>2019-07-29T09:28:36.250+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </transferStatuses>
            </ThingProperties>
        </Thing>
    </Things>
</Entities>
