<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b123"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="3"
 schemaVersion="1052"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         name="connCLOVERLibrary"
         projectName="CLOVER"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getBreakShoesData">
                        <ResultType
                         aspect.dataShape="connBreakShoesDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateFrom"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateTo"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getFilteredBrakeShoeMeasurementRecordsWithTotals">
                        <ResultType
                         aspect.dataShape="BrakeShoeMeasurementsRecordsWithTotals"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="QUERY"
                             description=""
                             name="query"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getFilteredWorkMeasurementRecords">
                        <ResultType
                         aspect.dataShape="WPMeasurementsRecord"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="QUERY"
                             description=""
                             name="query"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getFilteredWorkMeasurementRecordsWithTotals">
                        <ResultType
                         aspect.dataShape="WPMeasurementsRecordsWithTotals"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="QUERY"
                             description=""
                             name="query"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getFilteredWPMeasurementRecordsWithTotals">
                        <ResultType
                         aspect.dataShape="WPMeasurementsRecordsWithTotals"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="QUERY"
                             description=""
                             name="query"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRIFTECMeasurements">
                        <ResultType
                         aspect.dataShape="Riftec_WheelPairs_Shape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateFrom"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateTo"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="INgetRepair">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="INgetSection">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postBrakeShoeToClover">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.thingTemplate="connBrakeShoesCatalog"
                             baseType="THINGNAME"
                             description=""
                             name="brakeShoesThingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postBrakeShoeToCloverOLD">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endTime"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startTime"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postRiftecToClover">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateFrom"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateTo"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postWorkMeasurementsNew">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="dk"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="measurements_list"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="work_id"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="true"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postWorksMeasurement">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="measurements_list"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="work_id"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="true"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postWorksMeasurementOld">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="measurements_list"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="work_id"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="postWPMeasurement">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="wheelPair"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="sendQueuedRecords">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="streamName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test">
                        <ResultType
                         baseType="TEXT"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test1">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test2">
                        <ResultType
                         baseType="XML"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="ads"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateFrom"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="dateTo"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test3">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test4">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test5">
                        <ResultType
                         baseType="DATETIME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="XML"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="TestClover">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getBreakShoesData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var BRAKESHOES_TEMPLATE = 'connBrakeShoesCatalog';
                                        var searchFunctions = Resources['SearchFunctions'];
                                        var result = Resources["InfoTableFunctions"]
                                            .CreateInfoTableFromDataShape({
                                                    infoTableName : "InfoTable",
                                                    dataShapeName : "connBreakShoesDataShape"
                                            });
                                        
                                        var findBrakeShoes = function() {
                                            var things = searchFunctions.SearchThingsByTemplate({
                                                thingTemplate: BRAKESHOES_TEMPLATE /* THINGTEMPLATENAME */,
                                                maxItems: undefined /* NUMBER */,
                                                tags: undefined /* TAGS */,
                                                nameMask: undefined /* STRING */,
                                                query: undefined /* QUERY */
                                            });
                                            return things;
                                        };
                                        
                                        var addRows = function(brakeShoes) {
                                        	for (var i = 0; i < brakeShoes.length; i++) {
                                        		var brakeShoe = brakeShoes.rows[i];
                                        		var time = brakeShoe.mesTime;
                                        		if (time !== undefined && time !== "" && time !== "test") {
                                        			if (time.indexOf("+") >= 0)
                                        				time = time.split("+")[0];
                                        			time = parseDate(time, "yyyy-MM-dd HH:mm:ss");
                                        
                                        			if (time.getTime() >= dateFrom.getTime() && time.getTime() <= dateTo.getTime()) {
                                        				result.AddRow({
                                        					correlationId: brakeShoe.correlationId,
                                        					crack: brakeShoe.crack,
                                        					eqId: brakeShoe.eqId,
                                        					humanSize: brakeShoe.humanSize,
                                        					imageUrl: brakeShoe.imageUrl,
                                        					mesTime: brakeShoe.mesTime,
                                        					padId: brakeShoe.padId,
                                        					padNum: brakeShoe.padNum,
                                        					padSize: brakeShoe.padSize,
                                        					padStatus: brakeShoe.padStatus,
                                        					replace: brakeShoe.replace,
                                        					rimSize: brakeShoe.rimSize,
                                        					session_id: brakeShoe.session_id,
                                        					subnumSection: brakeShoe.subnumSection,
                                        					thinnes: brakeShoe.thinnes,
                                        					wedge: brakeShoe.wedge,
                                        					wheelPairNum: brakeShoe.wheelPairNum
                                        				});
                                        			}
                                        		}
                                        	}
                                        };
                                        
                                        var datas = findBrakeShoes();
                                        addRows(datas);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getFilteredBrakeShoeMeasurementRecordsWithTotals">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var datasets = Things["BrakeShoeMeasurementRecords"].QueryStreamEntriesWithData({
                                        	maxItems: 1000 /* NUMBER */ ,
                                        	startDate: undefined /* DATETIME */ ,
                                        	endDate: undefined /* DATETIME */ ,
                                        	oldestFirst: undefined /* BOOLEAN */ ,
                                        	query: query /* QUERY */
                                        });
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "BrakeShoeMeasurementsRecord"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(WorkMeasurementsRecord)
                                        var records = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var numberOfDatasets = 0;
                                        var numberOfMeasurements = 0;
                                        
                                        for (var x=0; x < datasets.rows.length; x++) {
                                            var row = datasets.rows[x];
                                        	var newEntry = new Object();
                                        
                                            newEntry.send_time = row.send_time;
                                        	newEntry.delivered = row.delivered;
                                            newEntry.send_counter = row.send_counter;
                                            newEntry.errors = row.errors;
                                            
                                            numberOfDatasets++;
                                            
                                            var recordContent = row.content;
                                            if (recordContent === undefined){
                                                records.AddRow(newEntry);
                                            } else {
                                                if (recordContent.BrakeShoe === undefined || recordContent.BrakeShoe.length <= 0){
                                                    records.AddRow(newEntry);
                                                } else {
                                                    var measurements = recordContent.BrakeShoe;
                                                    for(var y=0; y<measurements.length; y++) {
                                        
                                                		newEntry.isAnalytic = measurements[y].isAnalytic; // STRING
                                        				newEntry.Section_serial = measurements[y].Section_serial; // STRING
                                                        newEntry.crack = measurements[y].crack;
                                        				newEntry.Name_dataset = measurements[y].Name_dataset; // STRING
                                        				newEntry.Section_id = measurements[y].Section_id; // STRING
                                                        newEntry.Section_subnum = measurements[y].Section_subnum; // STRING
                                                        newEntry.pad_size = measurements[y].pad_size;
                                                        newEntry.wedge = measurements[y].wedge;
                                        				newEntry.Type_dataset = measurements[y].Type_dataset; // STRING
                                                        newEntry.Section_num = measurements[y].Section_num;
                                                        newEntry.thinness = measurements[y].thinness;
                                                        newEntry.Mes_time = measurements[y].Mes_time;                
                                        
                                                        numberOfMeasurements++;
                                                    	records.AddRow(newEntry);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({infoTableName : "InfoTable2", dataShapeName : "BrakeShoeMeasurementsRecordsWithTotals"});
                                        var entry = new Object();
                                        entry.numberOfDatasets = numberOfDatasets;
                                        entry.numberOfMeasurements = numberOfMeasurements;
                                        entry.records = records;
                                        result.AddRow(entry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getFilteredWorkMeasurementRecords">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var records = Things["WorkMeasurementRecords"].QueryStreamEntriesWithData({
                                        	maxItems: 1000 /* NUMBER */ ,
                                        	startDate: undefined /* DATETIME */ ,
                                        	endDate: undefined /* DATETIME */ ,
                                        	oldestFirst: undefined /* BOOLEAN */ ,
                                        	query: query /* QUERY */
                                        });
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "WorkMeasurementsRecord"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(WorkMeasurementsRecord)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        for (var x=0; x < records.rows.length; x++) {
                                            var row = records.rows[x];
                                        	var newEntry = new Object();
                                        
                                            newEntry.send_time = row.send_time;
                                        	newEntry.delivered = row.delivered;
                                            
                                            var recordContent = row.content;
                                            if (recordContent === undefined){
                                                result.AddRow(newEntry);
                                            } else {
                                                var section = Things[recordContent.Section_id];
                                                var sectionName = "<Section not found>";
                                                var sectionSeries = "<Section not found>";
                                                if(section !== null){
                                                    sectionName = section.НАИМЕНОВАНИЕ;
                                                    sectionSeries = section.СЕРИЯ;
                                                }
                                        
                                                newEntry.isAnalytic = recordContent.isAnalytic; // STRING
                                        		newEntry.Section_serial = recordContent.Section_serial; // STRING
                                        		newEntry.Name_dataset = recordContent.Name_dataset; // STRING
                                        		newEntry.Section_id = recordContent.Section_id; // STRING
                                        		newEntry.Section_subnum = recordContent.Section_subnum; // STRING
                                        		newEntry.classifierEquipment = recordContent.classifierEquipment; // STRING
                                        		newEntry.Type_dataset = recordContent.Type_dataset; // STRING
                                        
                                        		newEntry.sectionName = sectionName; // STRING
                                                newEntry.sectionSeries = sectionSeries; // STRING
                                                
                                                if (recordContent.Mes_content === undefined || recordContent.Mes_content.measurements === undefined || recordContent.Mes_content.measurements.length <= 0){
                                                    result.AddRow(newEntry);
                                                } else {
                                                    var measurements = recordContent.Mes_content.measurements;
                                                    for(var y=0; y<measurements.length; y++) {
                                                        newEntry.is_hw_measurement = measurements[y].is_hw_measurement;
                                                        newEntry.value_type = measurements[y].value_type;
                                                        newEntry.measurement_norm = measurements[y].measurement_norm;
                                                        newEntry.measurement_comment_text = measurements[y].measurement_comment_text;
                                                        newEntry.measurement_stage = measurements[y].measurement_stage;
                                                        newEntry.measurement_date = measurements[y].measurement_date;
                                                        newEntry.characteristic_id = measurements[y].characteristic_id;
                                                        newEntry.measurement_id = measurements[y].measurement_id;
                                                        newEntry.worker_id = measurements[y].worker_id;
                                                        newEntry.characteristic_name = measurements[y].characteristic_name;
                                                        newEntry.measurement_complete = measurements[y].measurement_complete;
                                                        newEntry.measurement_value = measurements[y].measurement_value;
                                                        newEntry.equipement_name = measurements[y].equipement_name;
                                                        newEntry.measurement_name = measurements[y].measurement_name;
                                                        newEntry.worker_fio = measurements[y].worker_fio;
                                                        newEntry.value_compliance = measurements[y].value_compliance;
                                                        
                                                    	result.AddRow(newEntry);
                                                    }
                                                }
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getFilteredWorkMeasurementRecordsWithTotals">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var datasets = Things["WorkMeasurementRecords"].QueryStreamEntriesWithData({
                                        	maxItems: 1000 /* NUMBER */ ,
                                        	startDate: undefined /* DATETIME */ ,
                                        	endDate: undefined /* DATETIME */ ,
                                        	oldestFirst: undefined /* BOOLEAN */ ,
                                        	query: query /* QUERY */
                                        });
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "WorkMeasurementsRecord"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(WorkMeasurementsRecord)
                                        var records = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var numberOfDatasets = 0;
                                        var numberOfMeasurements = 0;
                                        
                                        for (var x=0; x < datasets.rows.length; x++) {
                                            var row = datasets.rows[x];
                                        	var newEntry = new Object();
                                        
                                            newEntry.send_time = row.send_time;
                                        	newEntry.delivered = row.delivered;
                                            newEntry.send_counter = row.send_counter;
                                        	newEntry.section = row.section;
                                            newEntry.errors = row.errors;
                                            
                                            numberOfDatasets++;
                                            
                                            var recordContent = row.content;
                                            if (recordContent === undefined){
                                                records.AddRow(newEntry);
                                            } else {
                                                var section = Things[recordContent.Section_id];
                                                var sectionName = "<Section not found>";
                                                var sectionSeries = "<Section not found>";
                                                if(section !== null){
                                                    sectionName = section.НАИМЕНОВАНИЕ;
                                                    sectionSeries = section.СЕРИЯ;
                                                }
                                        
                                                newEntry.isAnalytic = recordContent.isAnalytic; // STRING
                                        		newEntry.Section_serial = recordContent.Section_serial; // STRING
                                        		newEntry.Name_dataset = recordContent.Name_dataset; // STRING
                                        		newEntry.Section_id = recordContent.Section_id; // STRING
                                        		newEntry.Section_subnum = recordContent.Section_subnum; // STRING
                                        		newEntry.classifierEquipment = recordContent.classifierEquipment; // STRING
                                        		newEntry.Type_dataset = recordContent.Type_dataset; // STRING
                                        
                                        		newEntry.sectionName = sectionName; // STRING
                                                newEntry.sectionSeries = sectionSeries; // STRING
                                                
                                                if (recordContent.Mes_content === undefined || recordContent.Mes_content.measurements === undefined || recordContent.Mes_content.measurements.length <= 0){
                                                    records.AddRow(newEntry);
                                                } else {
                                                    var measurements = recordContent.Mes_content.measurements;
                                                    for(var y=0; y<measurements.length; y++) {
                                                        newEntry.is_hw_measurement = measurements[y].is_hw_measurement;
                                                        newEntry.value_type = measurements[y].value_type;
                                                        newEntry.measurement_norm = measurements[y].measurement_norm;
                                                        newEntry.measurement_comment_text = measurements[y].measurement_comment_text;
                                                        newEntry.measurement_stage = measurements[y].measurement_stage;
                                                        newEntry.measurement_date = measurements[y].measurement_date;
                                                        newEntry.characteristic_id = measurements[y].characteristic_id;
                                                        newEntry.measurement_id = measurements[y].measurement_id;
                                                        newEntry.worker_id = measurements[y].worker_id;
                                                        newEntry.characteristic_name = measurements[y].characteristic_name;
                                                        newEntry.measurement_complete = measurements[y].measurement_complete;
                                                        newEntry.measurement_value = measurements[y].measurement_value;
                                                        newEntry.equipement_name = measurements[y].equipement_name;
                                                        newEntry.measurement_name = measurements[y].measurement_name;
                                                        newEntry.worker_fio = measurements[y].worker_fio;
                                                        newEntry.value_compliance = measurements[y].value_compliance;
                                        
                                                        numberOfMeasurements++;
                                                    	records.AddRow(newEntry);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({infoTableName : "InfoTable2", dataShapeName : "WorkMeasurementsRecordsWithTotals"});
                                        var entry = new Object();
                                        entry.numberOfDatasets = numberOfDatasets;
                                        entry.numberOfMeasurements = numberOfMeasurements;
                                        entry.records = records;
                                        result.AddRow(entry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getFilteredWPMeasurementRecordsWithTotals">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var datasets = Things["WPMeasurementRecords"].QueryStreamEntriesWithData({
                                        	maxItems: 1000 /* NUMBER */ ,
                                        	startDate: undefined /* DATETIME */ ,
                                        	endDate: undefined /* DATETIME */ ,
                                        	oldestFirst: undefined /* BOOLEAN */ ,
                                        	query: query /* QUERY */
                                        });
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "WPMeasurementsRecord"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(WorkMeasurementsRecord)
                                        var records = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var numberOfDatasets = 0;
                                        var numberOfMeasurements = 0;
                                        
                                        for (var x=0; x < datasets.rows.length; x++) {
                                            var row = datasets.rows[x];
                                        	var newEntry = new Object();
                                        
                                            newEntry.send_time = row.send_time;
                                        	newEntry.delivered = row.delivered;
                                            newEntry.send_counter = row.send_counter;
                                        	newEntry.section = row.section;
                                            newEntry.errors = row.errors;
                                            
                                            numberOfDatasets++;
                                            
                                            var recordContent = row.content;
                                            if (recordContent === undefined){
                                                records.AddRow(newEntry);
                                            } else {
                                                var section = Things[recordContent.Section_id];
                                                var sectionName = "<Section not found>";
                                                var sectionSeries = "<Section not found>";
                                                if(section !== null){
                                                    sectionName = section.НАИМЕНОВАНИЕ;
                                                    sectionSeries = section.СЕРИЯ;
                                                }
                                        		newEntry.Mes_type = recordContent.Mes_type; // STRING
                                                newEntry.isAnalytic = recordContent.isAnalytic; // STRING
                                                newEntry.Section_serial = recordContent.Section_serial; // STRING
                                        		newEntry.Name_dataset = recordContent.Name_dataset; // STRING
                                        		newEntry.Section_id = recordContent.Section_id; // STRING
                                        		newEntry.Section_subnum = recordContent.Section_subnum; // STRING
                                        		newEntry.Mes_ed = recordContent.Mes_ed; // STRING
                                        		newEntry.Type_dataset = recordContent.Type_dataset; // STRING
                                        		newEntry.Mes_content = recordContent.Mes_content; // STRING
                                        		newEntry.Section_num = recordContent.Section_num; // STRING
                                        		newEntry.Mes_time = recordContent.Mes_time; // STRING
                                        
                                        		newEntry.sectionName = sectionName; // STRING
                                                newEntry.sectionSeries = sectionSeries; // STRING
                                                
                                                if (recordContent.Mes_size === undefined || recordContent.Mes_size.length <= 0){
                                                    records.AddRow(newEntry);
                                                } else {
                                                    var measurements = recordContent.Mes_size;
                                                    for(var y=0; y<measurements.length; y++) {
                                        				newEntry.sd = measurements[y].sd; // STRING
                                        				newEntry.stire = measurements[y].stire; // STRING
                                        				newEntry.swt = measurements[y].swt; // STRING
                                        				newEntry.side = measurements[y].side; // STRING
                                        				newEntry.qe = measurements[y].qe; // STRING
                                        				newEntry.slope2 = measurements[y].slope2; // STRING
                                        				newEntry.sh = measurements[y].sh; // STRING
                                        				newEntry.slope1 = measurements[y].slope1; // STRING
                                        				newEntry.sdiam = measurements[y].sdiam; // STRING                
                                        				newEntry.sangle = measurements[y].sangle; // STRING
                                                        
                                                        var profile = JSON.stringify(measurements[y].profile);
                                        				if(profile.length > 100){
                                            				profile = profile.slice(0, 100) + "...";
                                        				}
                                        				newEntry.profile = profile; // STRING
                                        
                                                        numberOfMeasurements++;
                                                    	records.AddRow(newEntry);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({infoTableName : "InfoTable2", dataShapeName : "WPMeasurementsRecordsWithTotals"});
                                        var entry = new Object();
                                        entry.numberOfDatasets = numberOfDatasets;
                                        entry.numberOfMeasurements = numberOfMeasurements;
                                        entry.records = records;
                                        result.AddRow(entry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRIFTECMeasurements">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var RIFTEC_MEASUREMENTS_TEMPLATE = 'riftecMeasurement';
                                        var RIFTEC_WHEEL_PAIR_TEMPLATE = 'riftecWheelPair';
                                        var searchFunctions = Resources['SearchFunctions'];
                                        var result = Resources["InfoTableFunctions"]
                                            .CreateInfoTableFromDataShape({
                                                    infoTableName : "InfoTable",
                                                    dataShapeName : "Riftec_WheelPairs_Shape"
                                            });
                                        
                                        var findMeasurements = function() {
                                            var queryFilters = [];
                                            var things = searchFunctions.SearchThingsByTemplate({
                                                thingTemplate: RIFTEC_MEASUREMENTS_TEMPLATE /* THINGTEMPLATENAME */,
                                                maxItems: undefined /* NUMBER */,
                                                tags: undefined /* TAGS */,
                                                nameMask: undefined /* STRING */,
                                                query: undefined /* QUERY */
                                            });
                                            return things;
                                        };
                                        
                                        var findWheelPairs = function(signatures) {
                                             var arr = [];
                                        //     var queryFilters = [];
                                        //     if (dateFrom !== undefined && dateTo !== undefined) {
                                        //         queryFilters.push({ type: 'BETWEEN', fieldName: 'dateTime', from: dateFrom, to: dateTo });
                                        //     }
                                             for (var i = 0; i < signatures.length; i++) {
                                               // queryFilters.push({type: 'Matches', fieldName: 'signature', expression: signatures[i]});
                                                var thing = searchFunctions.SearchThingsByTemplate({
                                                    thingTemplate: RIFTEC_WHEEL_PAIR_TEMPLATE /* THINGTEMPLATENAME */,
                                                    maxItems: 1 /* NUMBER */,
                                                    tags: undefined /* TAGS */,
                                                    nameMask: undefined /* STRING */,
                                                    query: {
                                                        filters: {
                                                            type: 'Matches', fieldName: 'signature', expression: signatures[i]
                                                        }
                                                    } /* QUERY */
                                                });
                                                arr.push(thing);
                                             }
                                            return arr;
                                        };
                                        
                                        var addRows = function(wheelPairs) {
                                            for (var i = 0; i < wheelPairs.length; i++) {
                                                var wheelPair = wheelPairs[i];
                                        //        var data = Resources["InfoTableFunctions"]
                                        //            .CreateInfoTableFromDataShape({
                                        //                   infoTableName : "InfoTable",
                                        //                    dataShapeName : "RiF_WheelSet_Options"
                                        //            });
                                                if (wheelPair.dateTime !== null) continue;
                                                if ((dateFrom && dateFrom >= wheelPair.dateTime) || 
                                                     (dateTo && dateTo <= wheelPair.dateTime)) continue;
                                                result.AddRow({
                                                    Signature: wheelPair.signature,
                                                    IKP_Serial: wheelPair.ikpSerial,
                                                    Section: wheelPair.section,
                                                    DateTime: wheelPair.dateTime,
                                                    Series: wheelPair.series,
                                                    WheelPair: wheelPair.wheelPair,
                                                    Axle: wheelPair.axle,
                                                    Worker: wheelPair.worker
                                                });
                                            }
                                        };
                                        
                                        var measurements = findMeasurements();
                                        for (var i = 0; i < measurements.rows.length; i++) {
                                            var measurement = measurements.rows[i];
                                            if (measurement.signatures.array) {
                                                  var wheelPairs = findWheelPairs(measurement.signatures.array);
                                                  addRows(wheelPairs);
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="INgetRepair">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var userProp = Resources["CurrentSessionInfo"].GetCurrentUserExtensionProperties();
                                        var user_id = "a9e201e7-fa0c-11e5-b9ab-00155d6cab04";
                                        var user = Things[user_id];
                                        var result = "";
                                        if (user&& user.thingTemplate === "2050Пользователь") {
                                        	var key = user.ВЫБРАННОЕ_ОБОРУДОВАНИЕ;
                                        	var home = user.МЕСТО_ПРИВЯЗКИ;
                                        	var unknown = Things[key];
                                        	if (unknown) {
                                        		if (unknown.thingTemplate === "2050Оборудование") {
                                        			var query1 = {
                                        				"filters": {
                                        					"type": "And",
                                        					"filters": [
                                                                {
                                        							"type": "Matches",
                                        							"fieldName": "ОБОРУДОВАНИЕ",
                                        							"expression": eq_id
                                        						},
                                        
                                        					]
                                        				}
                                        			};
                                        			var params = {
                                        				maxItems: undefined /* NUMBER */ ,
                                        				nameMask: undefined /* STRING */ ,
                                        				query: query /* QUERY */ ,
                                        				thingTemplate: "2050LokoRepair" /* THINGTEMPLATENAME */ ,
                                        				tags: undefined /* TAGS */
                                        			};
                                        			var table = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        			var result = table.name;
                                        		} else {
                                        			var eq_id = unknown.ОБОРУДОВАНИЕ;
                                        			var query1 = {
                                        				"filters": {
                                        					"type": "And",
                                        					"filters": [
                                        						{
                                        							"type": "Matches",
                                        							"fieldName": "ОБОРУДОВАНИЕ",
                                        							"expression": eq_id
                                        						},
                                        
                                        					]
                                        				}
                                        			};
                                        			var params = {
                                        				maxItems: undefined /* NUMBER */ ,
                                        				nameMask: undefined /* STRING */ ,
                                        				query: query1 /* QUERY */ ,
                                        				thingTemplate: "2050LokoRepair" /* THINGTEMPLATENAME */ ,
                                        				tags: undefined /* TAGS */
                                        			};
                                        			var table = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        			var result = table.name;
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="INgetSection">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var userProp = Resources["CurrentSessionInfo"].GetCurrentUserExtensionProperties();
                                        var user_id = "a9e201e7-fa0c-11e5-b9ab-00155d6cab04";
                                        var user = Things[user_id];
                                        var result ="";
                                        if (user!=null&&user.thingTemplate==="2050Пользователь") {
                                        result = user.ВЫБРАННОЕ_ОБОРУДОВАНИЕ;    
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postBrakeShoeToClover">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Получение параметры начала и конца отбора данных
                                        function getTimeStampKey(streamName) {
                                        	var stream = Things[streamName];
                                            var entries = stream.QueryStreamEntries({
                                            	maxItems: 1 /* NUMBER */ ,
                                            	source: undefined /* STRING */ ,
                                            	tags: undefined /* TAGS */ ,
                                            	sourceTags: undefined /* TAGS */ ,
                                            	startDate: undefined /* DATETIME */ ,
                                            	endDate: undefined /* DATETIME */ ,
                                            	oldestFirst: false /* BOOLEAN */ ,
                                            	query: undefined /* QUERY */
                                            });
                                            
                                            if (entries.length > 0)
                                                return entries[0].timestamp.getTime();
                                            
                                            if (entries.length === 0)
                                                return (new Date()).getTime();
                                        }
                                        
                                        function getSection(subnum) {
                                        	var query = {
                                        		"filters": {
                                        			"type": "And",
                                        			"filters": [{
                                        				"type": "Matches",
                                        				"fieldName": "НОМЕР",
                                        				"expression": subnum
                                        			}]
                                        		}
                                        	};
                                        
                                        	var params = {
                                        		maxItems: 1 /* NUMBER */ ,
                                        		nameMask: undefined /* STRING */ ,
                                        		query: query /* QUERY */ ,
                                        		thingTemplate: "2050Секция" /* THINGTEMPLATENAME */ ,
                                        		tags: undefined /* TAGS */
                                        	};
                                        
                                        	var infotable = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                            
                                        	if (infotable.length > 0) {
                                            	return infotable[0].name;
                                            } else {
                                            	return "";
                                            }
                                        }
                                        
                                        logger.info("CLOVER postBrakeShoeToClover");
                                        
                                        var obj = {"BrakeShoe": []};
                                        var brakeShoe = Things[brakeShoesThingName];
                                        if(brakeShoe !== null){
                                        	var section_id = getSection(brakeShoe.subnumSection);
                                            var sectionSeries = "";
                                            var sectionNumber = "";
                                            if (section_id !== "") {
                                            	var section = Things[section_id];
                                                sectionSeries = section.СЕРИЯ;
                                                sectionNumber = section.НАИМЕНОВАНИЕ;
                                            }
                                        	obj.BrakeShoe.push({
                                        		"Type_dataset": "BrakeShoe",
                                            	"Name_dataset": "BrakeShoe_measurements",
                                            	"Mes_time": brakeShoe.mesTime,
                                            	"Section_id": section_id,
                                            	"Section_serial": sectionSeries,
                                            	"Section_num": sectionNumber,
                                        		"Section_subnum": brakeShoe.subnumSection,
                                        		"pad_size": brakeShoe.padSize,
                                        		"thinness": brakeShoe.thinness,
                                        		"crack": brakeShoe.crack,
                                        		"wedge": brakeShoe.wedge,
                                        		"isAnalytic": false
                                        	});    
                                            
                                            var stream = Things["BrakeShoeMeasurementRecords"];
                                            
                                            var timeStampKey = getTimeStampKey(stream.name);
                                            //logger.info("timeStampKey: " + timeStampKey);
                                            timeStampKey += 1;
                                            
                                            var values = stream.CreateValues();
                                            values.content = obj;
                                            values.delivered = false;
                                            
                                            stream.AddStreamEntry({
                                            	timestamp: timeStampKey /* DATETIME */ ,
                                            	location: undefined /* LOCATION */ ,
                                            	source: me.name /* STRING */ ,
                                            	sourceType: undefined /* STRING */ ,
                                            	tags: undefined /* TAGS */ ,
                                            	values: values /* INFOTABLE */
                                            });
                                            
                                            var milliseconds = pause(5000);
                                            me.sendQueuedRecords({
                                            	streamName: stream.name /* STRING */
                                            });
                                        } 
                                        var result = obj;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postBrakeShoeToCloverOLD">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.info("CLOVER postBrakeShoeToClover");
                                        var BRAKESHOES_TEMPLATE = 'connBrakeShoesCatalog';
                                        var searchFunctions = Resources['SearchFunctions'];
                                        var result = {};
                                        
                                        var findBrakeShoes = function() {
                                            var things = searchFunctions.SearchThingsByTemplate({
                                                thingTemplate: BRAKESHOES_TEMPLATE /* THINGTEMPLATENAME */,
                                                maxItems: undefined /* NUMBER */,
                                                tags: undefined /* TAGS */,
                                                nameMask: undefined /* STRING */,
                                                query: undefined /* QUERY */
                                            });
                                            return things;
                                        };
                                        
                                        var addArray = function(brakeShoes) {
                                        	var arr = [];
                                        	for (var i = 0; i < brakeShoes.length; i++) {
                                        		var brakeShoe = brakeShoes[i];
                                        		var time = brakeShoe.mesTime;
                                        		if (time !== undefined && time !== "" && time !== "test") {
                                        			if (time.indexOf("+") >= 0)
                                        				time = time.split("+")[0];
                                        			time = parseDate(time, "yyyy-MM-dd HH:mm:ss");
                                        
                                        			if (time.getTime() >= startTime.getTime() && time.getTime() <= endTime.getTime()) {
                                        				arr.push({
                                        					correlationId: brakeShoe.correlationId,
                                        					crack: brakeShoe.crack,
                                        					eqId: brakeShoe.eqId,
                                        					humanSize: brakeShoe.humanSize,
                                        					imageUrl: brakeShoe.imageUrl,
                                        					mesTime: brakeShoe.mesTime,
                                        					padId: brakeShoe.padId,
                                        					padNum: brakeShoe.padNum,
                                        					padSize: brakeShoe.padSize,
                                        					padStatus: brakeShoe.padStatus,
                                        					replace: brakeShoe.replace,
                                        					rimSize: brakeShoe.rimSize,
                                        					session_id: brakeShoe.session_id,
                                        					subnumSection: brakeShoe.subnumSection,
                                        					thinnes: brakeShoe.thinnes,
                                        					wedge: brakeShoe.wedge,
                                        					wheelPairNum: brakeShoe.wheelPairNum
                                        				});
                                        			}
                                        		}
                                        	}
                                        	return arr;
                                        };
                                        
                                        var datas = findBrakeShoes();
                                        result = addArray(datas);
                                        
                                        
                                        
                                        var headers = {
                                            	"Content-Type": "application/vnd.kafka.json.v2+json",
                                        	};
                                        var content = {"records": [{"value": {"BrakeShoe": []}}]};
                                        for (var j = 0; j < result.length; j++) {
                                        	content.records[0].value.BrakeShoe.push({
                                            	"Type_dataset": "BrakeShoe",
                                                "Name_dataset": "BrakeShoe_measurements",
                                           	    "Mes_time": result[j].mesTime,
                                           	    "Section_id": "",
                                             	"Section_serial": "",
                                           	    "Section_num": "",
                                             	"Section_subnum": result[j].subnumSection,
                                             	"Mes_type": "",
                                             	"Mes_content": "",
                                             	"padSize": result[j].padSize,
                                             	"Mes_ed": "",
                                                "isAnalytic": false
                                        
                                            });
                                        }
                                        logger.info("Clover content: " + JSON.stringify(content));
                                        var requestParams = {
                                            	proxyScheme: undefined,
                                                headers: headers,
                                                ignoreSSLErrors: true,
                                                useNTLM: undefined,
                                                workstation: undefined,
                                                useProxy: undefined,
                                                withCookies: undefined,
                                                proxyHost: undefined,
                                                url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka',
                                                content: content,
                                                timeout: undefined,
                                                proxyPort: undefined,
                                                password: undefined,
                                                domain: undefined,
                                                contentType: undefined,
                                                username: undefined
                                        	};
                                        var response = Resources["ContentLoaderFunctions"].PostText(requestParams);
                                        
                                        logger.info("CLOVER postBrakeShoeToClover response " + response);
                                        
                                        result = response;
                                        //result = {"result": true};
                                        
                                        
                                        //"Type_dataset": "BrakeShoe",
                                        //        "Name_dataset": "BrakeShoe_measurements",
                                        //   	    "Mes_time": result[j].mesTime,
                                        //   	    "Section_id": result[j].correlationId,
                                        //     	"Section_serial": result[j].session_id,
                                        //   	    "Section_num": "",
                                        //     	"Section_subnum": result[j].subnumSection,
                                        //     	"Mes_type": "",
                                        //     	"Mes_content": "",
                                        //     	"padSize": result[j].padSize,
                                        //     	"Mes_ed": "",
                                        //        "isAnalytic": false
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postRiftecToClover">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var arr1 = [];
                                        var section = Things["56edc8c2-f04a-11e1-8e8b-001517e6ca10"];
                                        var params = {
                                        	maxItems: undefined /* NUMBER */ ,
                                        	nameMask: undefined /* STRING */ ,
                                        	query: undefined /* QUERY */ ,
                                        	thingTemplate: "riftecMeasurement" /* THINGTEMPLATENAME */ ,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        var measurementsTable = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        var arr = [];
                                        
                                        for (var i = 0; i < measurementsTable.length; i++) {
                                        	var measurement = Things[measurementsTable[i].name];
                                            var axles = measurement.signatures;
                                            if (typeof axles.array !== "undefined") {
                                            	for (var j = 0; j < axles.array.length; j++) {
                                                	var axle = Things[axles.array[j]];
                                                    if (axle) {
                                                        var sectionNumber = axle.section;
                                                        //if (arr.indexOf(sectionNumber) < 0) {
                                                    		arr.push(sectionNumber);
                                                            if(sectionNumber.indexOf("-1") > 0) {
                                                            	sectionNumber = sectionNumber.replace("-1", "А");
                                                            } else if (sectionNumber.indexOf("-2") > 0) {
                                                            	sectionNumber = sectionNumber.replace("-2", "Б");
                                                            } else if (sectionNumber.indexOf("-3") > 0) {
                                                            	sectionNumber = sectionNumber.replace("-3", "В");
                                                            }
                                                            var query1 = {
                                        						"filters": {
                                        							"type": "And",
                                        							"filters": [ 
                                                           				{
                                        									"type": "Matches",
                                        									"fieldName": "НАИМЕНОВАНИЕ",
                                        									"expression": sectionNumber
                                        								}
                                                                    ]
                                        						}
                                        					};
                                                            var params1 = {
                                        						maxItems: undefined /* NUMBER */ ,
                                        						nameMask: undefined /* STRING */ ,
                                        						query: query1 /* QUERY */ ,
                                        						thingTemplate: "2050Секция" /* THINGTEMPLATENAME */ ,
                                        						tags: undefined /* TAGS */
                                        					};
                                        
                                        					var sectionFromMeasurement = Resources["SearchFunctions"].SearchThingsByTemplate(params1);
                                                            if (sectionFromMeasurement.length > 0) {
                                                                if (sectionFromMeasurement[0].name === section.name) {
                                                                    var JSONrow = new Object();
                                                        			JSONrow.Type_dataset = measurement.name;
                                                            		JSONrow.Name_dataset = "";
                                                                    JSONrow.Section_subnum = section.НОМЕР;
                                                                    JSONrow.Section_id = section.name;
                                                                    JSONrow.Section_serial = "";
                                                                    JSONrow.Section_num = section.НАИМЕНОВАНИЕ;
                                                                    var date = measurement.date;
                                                                    date = date.replace("T", " ");
                                                                    date = parseDate(date.split('.')[0], "yyyy-MM-dd HH:mm:ss").getTime();
                                                                    JSONrow.Mes_time = date;
                                                                    JSONrow.Mes_type = "контрольный";
                                                                    JSONrow.Mes_content = axle.data;
                                                                    JSONrow.Mes_size = "";
                                                                    JSONrow.Mes_ed = "";
                                                                    JSONrow.isAnalytic = false;
                                                                    arr1.push(JSONrow);
                                                                }
                                                            }
                                                    	//}
                                                    }
                                                }
                                            }
                                        }
                                        
                                        //var result = arr1;
                                        
                                        //var RIFTEC_MEASUREMENTS_TEMPLATE = 'riftecMeasurement';
                                        //var RIFTEC_WHEEL_PAIR_TEMPLATE = 'riftecWheelPair';
                                        //var searchFunctions = Resources['SearchFunctions'];
                                        //var result = {};
                                        //var arr1 = [];
                                        //var findMeasurements = function() {
                                        //    var queryFilters = [];
                                        //    var things = searchFunctions.SearchThingsByTemplate({
                                        //        thingTemplate: RIFTEC_MEASUREMENTS_TEMPLATE /* THINGTEMPLATENAME */,
                                        //        maxItems: undefined /* NUMBER */,
                                        //        tags: undefined /* TAGS */,
                                        //        nameMask: undefined /* STRING */,
                                        //        query: undefined /* QUERY */
                                        //    });
                                        //    return things;
                                        //};
                                        //
                                        //var findWheelPairs = function(signatures) {
                                        //     var arr = [];
                                        //     for (var i = 0; i < signatures.length; i++) {
                                        //        var thing = searchFunctions.SearchThingsByTemplate({
                                        //            thingTemplate: RIFTEC_WHEEL_PAIR_TEMPLATE /* THINGTEMPLATENAME */,
                                        //            maxItems: 1 /* NUMBER */,
                                        //            tags: undefined /* TAGS */,
                                        //            nameMask: undefined /* STRING */,
                                        //            query: {
                                        //                filters: {
                                        //                    type: 'Matches', fieldName: 'signature', expression: signatures[i]
                                        //                }
                                        //            } /* QUERY */
                                        //        });
                                        //        arr.push(thing);
                                        //     }
                                        //    return arr;
                                        //};
                                        //
                                        //
                                        //var addContent = function(wheelPairs) {
                                        //    for (var i = 0; i < wheelPairs.length; i++) {
                                        //        var wheelPair = wheelPairs[i];
                                        ////        var data = Resources["InfoTableFunctions"]
                                        ////            .CreateInfoTableFromDataShape({
                                        ////                   infoTableName : "InfoTable",
                                        ////                    dataShapeName : "RiF_WheelSet_Options"
                                        ////            });
                                        //        if ((dateFrom && dateFrom.getTime() >= wheelPair.dateTime.getTime()) || 
                                        //             (dateTo && dateTo.getTime() <= wheelPair.dateTime.getTime())) continue;
                                        //        arr1.push({
                                        //            Signature: wheelPair.signature,
                                        //            IKP_Serial: wheelPair.ikpSerial,
                                        //            Section: wheelPair.section,
                                        //            DateTime: wheelPair.dateTime,
                                        //            Series: wheelPair.series,
                                        //            WheelPair: wheelPair.wheelPair,
                                        //            Axle: wheelPair.axle,
                                        //            Worker: wheelPair.worker
                                        //        });
                                        //    }
                                        //    result = arr1;
                                        //    return result;
                                        //};
                                        //
                                        //var measurements = findMeasurements();
                                        //for (var i = 0; i < measurements.length; i++) {
                                        //    var measurement = measurements[i];
                                        //    if (measurement.signatures.array) {
                                        //          var wheelPairs = findWheelPairs(measurement.signatures.array);
                                        //          addContent(wheelPairs); 
                                        //    }
                                        //}
                                        
                                        
                                        var headers = {
                                            	"Content-Type": "application/vnd.kafka.json.v2+json",
                                        	};
                                        var content = {"records": [{"value": []}]};
                                        content.records[0].value = arr1;
                                        
                                        logger.info("content CLOVER: " + JSON.stringify(content));
                                        
                                        var requestParams = {
                                            	proxyScheme: undefined,
                                                headers: headers,
                                                ignoreSSLErrors: true,
                                                useNTLM: undefined,
                                                workstation: undefined,
                                                useProxy: undefined,
                                                withCookies: undefined,
                                                proxyHost: undefined,
                                                url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka',
                                                content: content,
                                                timeout: undefined,
                                                proxyPort: undefined,
                                                password: undefined,
                                                domain: undefined,
                                                contentType: undefined,
                                                username: undefined
                                        	};
                                        var response = Resources["ContentLoaderFunctions"].PostText(requestParams);
                                        
                                        logger.info("response CLOVER: " + response);
                                        
                                        result = response;
                                        
                                        
                                        
                                        
                                        
                                        //var wheelPairs = findWheelPairs(measurements[0].signatures.array);
                                        //addContent(wheelPairs);
                                        
                                        
                                        
                                        //
                                        //var content = {"records": [{value: {KolesPara: []}}]};
                                        //for (var j = 0; j < result.length; j++) {
                                        //	content.records[0].value.Riftec.push({
                                        //    	"Type_dataset": "Riftec",
                                        //        "Name_dataset": "Riftec_measurements",
                                        //   	    "Mes_time": result[j].DateTime,
                                        //   	    "Section_id": result[j].Signature,
                                        //     	"Section_serial": result[j].IKP_Serial,
                                        //   	    "Section_num": result[j].Section,
                                        //     	"Section_subnum": "12345678",
                                        //     	"Mes_type": "контрольный",
                                        //     	"Mes_content": "Axle",
                                        //     	"Mes_size": "21234123",
                                        //     	"Mes_ed": "m"
                                        //
                                        //    });
                                        //}
                                        
                                        //url: 'https://kafka-rest.digital-depo.loco-test.itclover.ru/topics/test_2050',
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postWorkMeasurementsNew">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // Получение параметры начала и конца отбора данных
                                        function getTimeStampKey(streamName) {
                                        	var stream = Things[streamName];
                                        	var entries = stream.QueryStreamEntries({
                                        		maxItems: 1 /* NUMBER */ ,
                                        		source: undefined /* STRING */ ,
                                        		tags: undefined /* TAGS */ ,
                                        		sourceTags: undefined /* TAGS */ ,
                                        		startDate: undefined /* DATETIME */ ,
                                        		endDate: undefined /* DATETIME */ ,
                                        		oldestFirst: false /* BOOLEAN */ ,
                                        		query: undefined /* QUERY */
                                        	});
                                        
                                        	if (entries.length > 0)
                                        		return entries[0].timestamp.getTime();
                                        
                                        	if (entries.length === 0)
                                        		return (new Date()).getTime();
                                        }
                                        // Запись в лог о событии добавления нового замера 
                                        //logger.info("CLOVER postWorksMeasurement-------------------------------------------");
                                        var result = {
                                        	result: "true",
                                        	data: []
                                        };
                                        
                                        try {
                                        	if (work_id && measurements_list) {
                                        		// Проверка work_id и получение ДК
                                        		//logger.info("Measurement: " + JSON.stringify(measurements_list));
                                        		var work =Things[work_id];
                                        		var arr = [];
                                        
                                        		/*var query = {
                                        			"filters": {
                                        				"type": "And",
                                        				"filters": [{
                                        					"type": "Matches",
                                        					"fieldName": "ID_ШАБЛОНА",
                                        					"expression": work_id
                                        				}]
                                        			}
                                        		};
                                        		var params = {
                                        			maxItems: undefined,
                                        			nameMask: undefined,
                                        			query: query,
                                        			thingTemplate: "2050ЭкземплярРаботы",
                                        			tags: undefined
                                        		}; 
                                        
                                        		var infotableWorks = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        
                                        		var classifierEquipment = "";
                                        		if (infotableWorks.length > 0) {*/
                                        			
                                        			//var work = Things[infotableWorks[0].name];
                                                    logger.info("CLOVER classifierEquipment 0 "+work.name );
                                        			var groupId = work.ГРУППА;
                                        			//if (groupId) {
                                        			logger.info("CLOVER classifierEquipment 1 "+groupId);
                                        			var groupNameJson = Things["2050DataLoadLibrary"].GET_CLASSIFIER_EQUIPMENT({
                                        				id: groupId /* STRING */
                                        			});
                                        			classifierEquipment = groupNameJson.Name;
                                        			//}
                                        		//}
                                        		logger.info("CLOVER classifierEquipment " + classifierEquipment);
                                        
                                        		var query1 = {
                                        			"filters": {
                                        				"type": "And",
                                        				"filters": [{
                                        					"type": "Matches",
                                        					"fieldName": "ТЕКУЩАЯ_ДК",
                                        					"expression": dk
                                        				}]
                                        			}
                                        		};
                                        		var params1 = {
                                        			maxItems: undefined /* NUMBER */ ,
                                        			nameMask: undefined /* STRING */ ,
                                        			query: query1 /* QUERY */ ,
                                        			thingTemplate: "2050Секция" /* THINGTEMPLATENAME */ ,
                                        			tags: undefined /* TAGS */
                                        		};
                                        
                                        		var infotable = Resources["SearchFunctions"].SearchThingsByTemplate(params1);
                                        
                                        		var section = null;
                                        		var locomotive = null;
                                        
                                        		if (infotable.length > 0) {
                                        			section = Things[infotable[0].name];
                                        			if (section) {
                                        				locomotive = Things[section.ОБОРУДОВАНИЕ];
                                        			}
                                        		}
                                        
                                        		//logger.info("Measurements_list for CLOVER: " + JSON.stringify(measurements_list));
                                        
                                        		if (measurements_list) {
                                        			var JSONrow = new Object();
                                        			JSONrow.Type_dataset = "";
                                        			JSONrow.Name_dataset = "";
                                        			JSONrow.Mes_time = new Date();
                                        			if (section) {
                                        				JSONrow.Section_id = section.name;
                                        				JSONrow.Section_num = section.НАИМЕНОВАНИЕ;
                                        				JSONrow.Section_subnum = section.НОМЕР;
                                        			}
                                        			if (locomotive) {
                                        				JSONrow.Section_serial = locomotive.НАИМЕНОВАНИЕ;
                                        			}
                                        			JSONrow.classifierEquipment = classifierEquipment;
                                        			JSONrow.Mes_content = measurements_list;
                                        			JSONrow.isAnalytic = false;
                                        
                                        			var stream = Things["WorkMeasurementRecords"];
                                        
                                        			var timeStampKey = getTimeStampKey(stream.name);
                                        			//logger.info("timeStampKey: " + timeStampKey);
                                        			timeStampKey += 1;
                                        
                                        			var values = stream.CreateValues();
                                        			values.content = JSONrow;
                                        			values.delivered = false;
                                        			if (section) {
                                        				values.section = section.НАИМЕНОВАНИЕ;
                                        			}
                                        
                                        			stream.AddStreamEntry({
                                        				timestamp: timeStampKey /* DATETIME */ ,
                                        				location: undefined /* LOCATION */ ,
                                        				source: me.name /* STRING */ ,
                                        				sourceType: undefined /* STRING */ ,
                                        				tags: undefined /* TAGS */ ,
                                        				values: values /* INFOTABLE */
                                        			});
                                        
                                        
                                        			// Вызов метода записи замеров в Clover
                                        			var milliseconds = pause(5000);
                                        			me.sendQueuedRecords({
                                        				streamName: stream.name /* STRING */
                                        			});
                                        		}
                                        		// Тестовый набор параметров
                                        		//		var headers = {
                                        		//			"Content-Type": "application/vnd.kafka.json.v2+json",
                                        		//		};
                                        		//		var content = {
                                        		//			"records": [{
                                        		//				"value": []
                                        		//			}]
                                        		//		};
                                        		//		content.records[0].value = arr;
                                        		//
                                        		//		logger.info("content CLOVER: " + JSON.stringify(content));
                                        		//
                                        		//		var params = {
                                        		//			proxyScheme: undefined /* STRING */ ,
                                        		//			headers: headers /* JSON */ ,
                                        		//			ignoreSSLErrors: true /* BOOLEAN */ ,
                                        		//			useNTLM: undefined /* BOOLEAN */ ,
                                        		//			workstation: undefined /* STRING */ ,
                                        		//			useProxy: undefined /* BOOLEAN */ ,
                                        		//			withCookies: undefined /* BOOLEAN */ ,
                                        		//			proxyHost: undefined /* STRING */ ,
                                        		//			url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka' /* STRING */ ,
                                        		//			content: content /* STRING */ ,
                                        		//			timeout: undefined /* NUMBER */ ,
                                        		//			proxyPort: undefined /* INTEGER */ ,
                                        		//			password: undefined /* STRING */ ,
                                        		//			domain: undefined /* STRING */ ,
                                        		//			contentType: undefined /* STRING */ ,
                                        		//			username: undefined /* STRING */
                                        		//		};
                                        		//
                                        		//		var response = Resources["ContentLoaderFunctions"].PostText(params);
                                        		//		logger.info("CLOVER postWorksMeasurement response " + response);
                                        
                                        	} else throw new Error('Не хватает обязательного параметра');
                                        
                                        	// Обработка ошибок
                                        } catch (err) {
                                        	logger.error("Error in " + me.name + "; Message: " + err.message);
                                        	result = {
                                        		Error: {
                                        			code: 1,
                                        			description: err.message
                                        		}
                                        	};
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postWorksMeasurement">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.info("CLOVER postWorksMeasurement");
                                        var result = {
                                        	result: "true",
                                        	data: []
                                        };
                                        
                                        try {
                                        	if (work_id && measurements_list) {
                                        		// Проверка work_id и получение ДК
                                        
                                        		var arr = [];
                                        
                                        		var work = Things["2050MeasurementsLibrary"].get_work_info({
                                        			work_name: work_id
                                        		});
                                        		if (work.error) throw new Error(work.error);
                                                
                                                var groupId = Things[work_id].ГРУППА;
                                                
                                                var groupNameJson = Things["2050DataLoadLibrary"].GET_CLASSIFIER_EQUIPMENT({
                                                	id: groupId /* STRING */
                                                });
                                                
                                                var classifierEquipment = groupNameJson.Name;
                                                
                                        		var query1 = {
                                        			"filters": {
                                        				"type": "And",
                                        				"filters": [{
                                        					"type": "Matches",
                                        					"fieldName": "ТЕКУЩАЯ_ДК",
                                        					"expression": work.dk
                                        				}]
                                        			}
                                        		};
                                        		var params1 = {
                                        			maxItems: undefined /* NUMBER */ ,
                                        			nameMask: undefined /* STRING */ ,
                                        			query: query1 /* QUERY */ ,
                                        			thingTemplate: "2050Секция" /* THINGTEMPLATENAME */ ,
                                        			tags: undefined /* TAGS */
                                        		};
                                        
                                        		var infotable = Resources["SearchFunctions"].SearchThingsByTemplate(params1);
                                        
                                        		if (infotable.length > 0) {
                                        			var section = Things[infotable[0].name];
                                        			var locomotive = Things[section.ОБОРУДОВАНИЕ];
                                        		}
                                        
                                        		for (var n = 0; n < measurements_list.array.length; n++) {
                                        			var measurement = measurements_list.array[n];
                                        			var JSONrow = new Object();
                                        			JSONrow.Type_dataset = "";
                                        			JSONrow.Name_dataset = "";
                                        			JSONrow.Mes_time = "";
                                        			JSONrow.Section_id = section.name;
                                        			JSONrow.Section_serial = locomotive.НАИМЕНОВАНИЕ;
                                        			JSONrow.Section_num = section.НАИМЕНОВАНИЕ;
                                        			JSONrow.Section_subnum = section.НОМЕР;
                                                    JSONrow.classifierEquipment = classifierEquipment;
                                        			// Обработка Этапа - Stage
                                        			if (measurement.measurement_stage !== undefined && measurement.measurement_stage !== "") {
                                        				var stageNumber = measurement.measurement_stage;
                                        				stageNumber = stageNumber * 1;
                                        				var stage = "";
                                        				switch (stageNumber) {
                                        					case 0:
                                        						stage = "До ремонта";
                                        						break;
                                        					case 1:
                                        						stage = "Контрольный";
                                        						break;
                                        					case 2:
                                        						stage = "После ремонта";
                                        						break;
                                        					default:
                                        						throw new Error('Некорректно указан код этапа');
                                        				}
                                        			} else {
                                        				throw new Error('Код этапа не указан');
                                        			}
                                        
                                        			JSONrow.Mes_type = stage;
                                        			JSONrow.Mes_content = "";
                                        			// Обработка значения
                                        			//logger.info(measurement.measurement_value);
                                        			if (measurement.measurement_value !== undefined) {
                                        				var value = measurement.measurement_value;
                                        			} else {
                                        				throw new Error('Значение замера не указано');
                                        			}
                                        
                                        			JSONrow.Mes_size = value;
                                        			JSONrow.Mes_ed = "";
                                        			JSONrow.isAnalytic = false;
                                        			arr.push(JSONrow);
                                        		}
                                        
                                        		var headers = {
                                        			"Content-Type": "application/vnd.kafka.json.v2+json",
                                        		};
                                        		var content = {
                                        			"records": [{
                                        				"value": []
                                        			}]
                                        		};
                                        		content.records[0].value = arr;
                                        
                                        		logger.info("content CLOVER: " + JSON.stringify(content));
                                                
                                        		var params = {
                                        			proxyScheme: undefined /* STRING */ ,
                                        			headers: headers /* JSON */ ,
                                        			ignoreSSLErrors: true /* BOOLEAN */ ,
                                        			useNTLM: undefined /* BOOLEAN */ ,
                                        			workstation: undefined /* STRING */ ,
                                        			useProxy: undefined /* BOOLEAN */ ,
                                        			withCookies: undefined /* BOOLEAN */ ,
                                        			proxyHost: undefined /* STRING */ ,
                                        			url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka' /* STRING */ ,
                                        			content: content /* STRING */ ,
                                        			timeout: undefined /* NUMBER */ ,
                                        			proxyPort: undefined /* INTEGER */ ,
                                        			password: undefined /* STRING */ ,
                                        			domain: undefined /* STRING */ ,
                                        			contentType: undefined /* STRING */ ,
                                        			username: undefined /* STRING */
                                        		};
                                                
                                        		var response = Resources["ContentLoaderFunctions"].PostText(params);
                                        		logger.info("CLOVER postWorksMeasurement responce " + response);
                                                
                                        	} else throw new Error('Не хватает обязательного параметра');
                                            
                                        } catch (err) {
                                        	logger.error("Error in " + me.name + "; Message: " + err.message);
                                        	result = {
                                        		Error: {
                                        			code: 1,
                                        			description: err.message
                                        		}
                                        	};
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postWorksMeasurementOld">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var result = {
                                        //	result: "true",
                                        //	data: []
                                        //};
                                        //
                                        //try {
                                        //	if (work_id && measurements_list) {
                                        //		// Проверка work_id и получение ДК
                                        //
                                        //		var arr = [];
                                        //
                                        //		var work = Things["2050MeasurementsLibrary"].get_work_info({
                                        //			work_name: work_id
                                        //		});
                                        //		if (work.error) throw new Error(work.error);
                                        //
                                        //		var query1 = {
                                        //			"filters": {
                                        //				"type": "And",
                                        //				"filters": [{
                                        //					"type": "Matches",
                                        //					"fieldName": "ТЕКУЩАЯ_ДК",
                                        //					"expression": work.dk
                                        //				}]
                                        //			}
                                        //		};
                                        //		var params1 = {
                                        //			maxItems: undefined /* NUMBER */ ,
                                        //			nameMask: undefined /* STRING */ ,
                                        //			query: query1 /* QUERY */ ,
                                        //			thingTemplate: "2050Секция" /* THINGTEMPLATENAME */ ,
                                        //			tags: undefined /* TAGS */
                                        //		};
                                        //
                                        //		var infotable = Resources["SearchFunctions"].SearchThingsByTemplate(params1);
                                        //
                                        //		if (infotable.length > 0) {
                                        //			var section = Things[infotable[0].name];
                                        //			var locomotive = Things[section.ОБОРУДОВАНИЕ];
                                        //		}
                                        //
                                        //		for (var n = 0; n < measurements_list.array.length; n++) {
                                        //			var measurement = measurements_list.array[n];
                                        //			var JSONrow = new Object();
                                        //			JSONrow.Type_dataset = "";
                                        //			JSONrow.Name_dataset = "";
                                        //			JSONrow.Mes_time = "";
                                        //			JSONrow.Section_id = section.name;
                                        //			JSONrow.Section_serial = locomotive.НАИМЕНОВАНИЕ;
                                        //			JSONrow.Section_num = section.НАИМЕНОВАНИЕ;
                                        //			JSONrow.Section_subnum = section.НОМЕР;
                                        //			// Обработка Этапа - Stage
                                        //			if (measurement.measurement_stage !== undefined && measurement.measurement_stage !== "") {
                                        //				var stageNumber = measurement.measurement_stage;
                                        //				stageNumber = stageNumber * 1;
                                        //				var stage = "";
                                        //				switch (stageNumber) {
                                        //					case 0:
                                        //						stage = "До ремонта";
                                        //						break;
                                        //					case 1:
                                        //						stage = "Контрольный";
                                        //						break;
                                        //					case 2:
                                        //						stage = "После ремонта";
                                        //						break;
                                        //					default:
                                        //						throw new Error('Некорректно указан код этапа');
                                        //				}
                                        //			} else {
                                        //				throw new Error('Код этапа не указан');
                                        //			}
                                        //
                                        //			JSONrow.Mes_type = stage;
                                        //			JSONrow.Mes_content = "";
                                        //			// Обработка значения
                                        //			//logger.info(measurement.measurement_value);
                                        //			if (measurement.measurement_value !== undefined) {
                                        //				var value = measurement.measurement_value;
                                        //			} else {
                                        //				throw new Error('Значение замера не указано');
                                        //			}
                                        //
                                        //			JSONrow.Mes_size = value;
                                        //			JSONrow.Mes_ed = "";
                                        //			JSONrow.isAnalytic = false;
                                        //			arr.push(JSONrow);
                                        //		}
                                        //
                                        //		var headers = {
                                        //			"Content-Type": "application/vnd.kafka.json.v2+json",
                                        //		};
                                        //		var content = {
                                        //			"records": [{
                                        //				"value": []
                                        //			}]
                                        //		};
                                        //		content.records[0].value = arr;
                                        //
                                        //		logger.info("content: " + JSON.stringify(content));
                                        //        
                                        //		var params = {
                                        //			proxyScheme: undefined /* STRING */ ,
                                        //			headers: headers /* JSON */ ,
                                        //			ignoreSSLErrors: true /* BOOLEAN */ ,
                                        //			useNTLM: undefined /* BOOLEAN */ ,
                                        //			workstation: undefined /* STRING */ ,
                                        //			useProxy: undefined /* BOOLEAN */ ,
                                        //			withCookies: undefined /* BOOLEAN */ ,
                                        //			proxyHost: undefined /* STRING */ ,
                                        //			url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka' /* STRING */ ,
                                        //			content: content /* STRING */ ,
                                        //			timeout: undefined /* NUMBER */ ,
                                        //			proxyPort: undefined /* INTEGER */ ,
                                        //			password: undefined /* STRING */ ,
                                        //			domain: undefined /* STRING */ ,
                                        //			contentType: undefined /* STRING */ ,
                                        //			username: undefined /* STRING */
                                        //		};
                                        //        
                                        //		var response = Resources["ContentLoaderFunctions"].PostText(params);
                                        //		logger.info("response: " + response);
                                        //        
                                        //	} else throw new Error('Не хватает обязательного параметра');
                                        //    
                                        //} catch (err) {
                                        //	logger.error("Error in " + me.name + "; Message: " + err.message);
                                        //	result = {
                                        //		Error: {
                                        //			code: 1,
                                        //			description: err.message
                                        //		}
                                        //	};
                                        //}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="postWPMeasurement">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.info("CLOVER postWPMeasurement");
                                        var result = {
                                        	result: "true",
                                        	data: []
                                        };
                                        
                                        // Метод для получения информации по секции на стороне ЕИПП
                                        function findInfoBySection(section) {
                                        	var query1 = {
                                        		"filters": {
                                        			"type": "And",
                                        			"filters": [{
                                        				"type": "Matches",
                                        				"fieldName": "SectionNumber",
                                        				"expression": section
                                        			}, ]
                                        		}
                                        	};
                                        	// Поиск сущностей
                                        	var searchResult = Resources['InfoTableFunctions'].ToJSON({
                                        		table: Resources['SearchFunctions'].SearchThingsByTemplate({
                                        			thingTemplate: 'connPoligonSections' /* THINGTEMPLATENAME */ ,
                                        			maxItems: 1 /* NUMBER */ ,
                                        			tags: undefined /* TAGS */ ,
                                        			nameMask: undefined /* STRING */ ,
                                        			query: query1
                                        		}) /* INFOTABLE */
                                        	}).rows;
                                        	return searchResult ? searchResult[0] : undefined;
                                        }
                                        
                                        function getTimeStampKey(streamName) {
                                        	var stream = Things[streamName];
                                            var entries = stream.QueryStreamEntries({
                                            	maxItems: 1 /* NUMBER */ ,
                                            	source: undefined /* STRING */ ,
                                            	tags: undefined /* TAGS */ ,
                                            	sourceTags: undefined /* TAGS */ ,
                                            	startDate: undefined /* DATETIME */ ,
                                            	endDate: undefined /* DATETIME */ ,
                                            	oldestFirst: false /* BOOLEAN */ ,
                                            	query: undefined /* QUERY */
                                            });
                                            
                                            if (entries.length > 0)
                                                return entries[0].timestamp.getTime();
                                            
                                            if (entries.length === 0)
                                                return (new Date()).getTime();
                                        }
                                        
                                        var getSectionType = function(type) {
                                        	switch (type) {
                                        		case '1':
                                        			return 'А';
                                        		case '2':
                                        			return 'Б';
                                        		case '3':
                                        			return 'В';
                                        		default:
                                        			return 'A';
                                        	}
                                        };
                                        
                                        // Метод для получения секции, соответствующией 2050КПИ
                                        var getWheelPairSection = function(section) {
                                        	var chunks = section.split('-');
                                        	var digits = chunks[0];
                                        	var type = chunks[1];
                                        
                                        	for (var i = digits.length; i < 4; i++) {
                                        		digits = '0' + digits;
                                        	}
                                        	return digits + getSectionType(type);
                                        };
                                        
                                        try {
                                        	if (wheelPair) {
                                        		// Проверка work_id и получение ДК
                                        		var formattedSection = getWheelPairSection(wheelPair.Section);
                                        
                                        		var info = Things["connAsuSg"].GetInfoBySection_V2({
                                        			Section: formattedSection, /* STRING */
                                        			Serie: wheelPair.Series /* STRING */
                                        		});
                                                
                                                var sectionSubumber = "";
                                        		if (info) {
                                        			if (info.sectionSubnumber) {
                                        				sectionSubumber = info.sectionSubnumber;
                                        			} else {
                                        				var section = findInfoBySection(formattedSection);
                                        				sectionSubumber = section ? section.SectionSubnumber : "";
                                        			}
                                        		}
                                        		var arr = [];
                                        		var JSONrow = new Object();
                                        		JSONrow.Type_dataset = "Riftec";
                                        		JSONrow.Name_dataset = "Riftec";
                                        		JSONrow.Mes_time = wheelPair.DateTime;
                                        		JSONrow.Section_num = formattedSection;
                                        		JSONrow.Section_subnum = sectionSubumber;
                                        		JSONrow.Section_serial = wheelPair.Series;
                                        		JSONrow.Mes_type = wheelPair.MeasureType;
                                        		JSONrow.Mes_content = "";
                                        		JSONrow.Mes_size = wheelPair.Data;
                                        		JSONrow.Mes_ed = "";
                                        		JSONrow.isAnalytic = false;
                                        		//arr.push(JSONrow);
                                                
                                                var stream = Things["WPMeasurementRecords"];
                                                logger.info('postWPMeasurement stream: ' + stream);
                                                var timeStampKey = getTimeStampKey(stream.name);
                                                timeStampKey += 1;
                                        
                                                var values = stream.CreateValues();
                                                values.content = JSONrow;
                                                values.delivered = false;
                                                values.section = formattedSection;
                                        
                                                stream.AddStreamEntry({
                                                	timestamp: timeStampKey /* DATETIME */ ,
                                                	location: undefined /* LOCATION */ ,
                                                	source: me.name /* STRING */ ,
                                                	sourceType: undefined /* STRING */ ,
                                                	tags: undefined /* TAGS */ ,
                                                	values: values /* INFOTABLE */
                                                });
                                        
                                                var milliseconds = pause(5000);
                                                me.sendQueuedRecords({
                                                	streamName: stream.name /* STRING */
                                                });
                                        
                                        //		var headers = {
                                        //			"Content-Type": "application/vnd.kafka.json.v2+json",
                                        //		};
                                        //		var content = {
                                        //			"records": [{
                                        //				"value": []
                                        //			}]
                                        //		};
                                        //		content.records[0].value = arr;
                                        //
                                        //		logger.info("content: " + JSON.stringify(content));
                                        //
                                        //		var params = {
                                        //			proxyScheme: undefined /* STRING */ ,
                                        //			headers: headers /* JSON */ ,
                                        //			ignoreSSLErrors: true /* BOOLEAN */ ,
                                        //			useNTLM: undefined /* BOOLEAN */ ,
                                        //			workstation: undefined /* STRING */ ,
                                        //			useProxy: undefined /* BOOLEAN */ ,
                                        //			withCookies: undefined /* BOOLEAN */ ,
                                        //			proxyHost: undefined /* STRING */ ,
                                        //			url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka' /* STRING */ ,
                                        //			content: content /* STRING */ ,
                                        //			timeout: undefined /* NUMBER */ ,
                                        //			proxyPort: undefined /* INTEGER */ ,
                                        //			password: undefined /* STRING */ ,
                                        //			domain: undefined /* STRING */ ,
                                        //			contentType: undefined /* STRING */ ,
                                        //			username: undefined /* STRING */
                                        //		};
                                        //
                                        //		var response = Resources["ContentLoaderFunctions"].PostText(params);
                                        //        logger.info("CLOVER postWPMeasurement response "+response);
                                        		//logger.info("response: " + xmlResponse);
                                        
                                        	} else throw new Error('Не хватает обязательного параметра');
                                        
                                        } catch (err) {
                                        	logger.error("Error in " + me.name + "; Message: " + err.message);
                                        	result = {
                                        		Error: {
                                        			code: 1,
                                        			description: err.message
                                        		}
                                        	};
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="sendQueuedRecords">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        function getTimeStampKey(streamName) {
                                        	var stream = Things[streamName];
                                        	var entries = stream.QueryStreamEntries({
                                        		maxItems: 1 /* NUMBER */ ,
                                        		source: undefined /* STRING */ ,
                                        		tags: undefined /* TAGS */ ,
                                        		sourceTags: undefined /* TAGS */ ,
                                        		startDate: undefined /* DATETIME */ ,
                                        		endDate: undefined /* DATETIME */ ,
                                        		oldestFirst: false /* BOOLEAN */ ,
                                        		query: undefined /* QUERY */
                                        	});
                                        
                                        	if (entries.length > 0)
                                        		return entries[0].timestamp.getTime();
                                        
                                        	if (entries.length === 0)
                                        		return (new Date()).getTime();
                                        }
                                        
                                        var stream = Things[streamName];
                                        
                                        var query = {
                                        	"filters": {
                                        		"type": "And",
                                        		"filters": [{
                                        				"type": "EQ",
                                        				"fieldName": "delivered",
                                        				"value": false
                                        			}
                                        		]
                                        	}
                                        };
                                        
                                        var rows = stream.QueryStreamEntriesWithData({
                                        	maxItems: 10000000 /* NUMBER */ ,
                                        	source: undefined /* STRING */ ,
                                        	tags: undefined /* TAGS */ ,
                                        	sourceTags: undefined /* TAGS */ ,
                                        	startDate: undefined /* DATETIME */ ,
                                        	endDate: undefined /* DATETIME */ ,
                                        	oldestFirst: undefined /* BOOLEAN */ ,
                                        	query: query /* QUERY */
                                        });
                                        
                                        for (var i = 0; i < rows.length; i++) {
                                            var row = rows[i];
                                            var id = row.id;
                                            var measurement = row.content;
                                        
                                        	var headers = {
                                        		"Content-Type": "application/vnd.kafka.json.v2+json",
                                        	};
                                        	var content = {
                                        		"records": [{
                                        			"value": []
                                        		}]
                                        	};
                                        	content.records[0].value = measurement;
                                        
                                        	//logger.info("content CLOVER: " + JSON.stringify(content));
                                        
                                        	var params = {
                                        		proxyScheme: undefined /* STRING */ ,
                                        		headers: headers /* JSON */ ,
                                        		ignoreSSLErrors: true /* BOOLEAN */ ,
                                        		useNTLM: undefined /* BOOLEAN */ ,
                                        		workstation: undefined /* STRING */ ,
                                        		useProxy: undefined /* BOOLEAN */ ,
                                        		withCookies: undefined /* BOOLEAN */ ,
                                        		proxyHost: undefined /* STRING */ ,
                                        		url: 'https://kafka-rest.cp-kafka-rest.loco-prod.itclover.ru/topics/Kolodka' /* STRING */ ,
                                        		content: content /* STRING */ ,
                                        		timeout: undefined /* NUMBER */ ,
                                        		proxyPort: undefined /* INTEGER */ ,
                                        		password: undefined /* STRING */ ,
                                        		domain: undefined /* STRING */ ,
                                        		contentType: undefined /* STRING */ ,
                                        		username: undefined /* STRING */
                                        	};
                                        
                                        	var response = Resources["ContentLoaderFunctions"].PostText(params);
                                            //logger.info("CLOVER postWorksMeasurement response " + response);
                                            response = response.split("^")[0];
                                            response = JSON.parse(response);
                                            
                                            var deliveryStream = Things["DeliveryTasks"];
                                            var timeStampKey = getTimeStampKey(deliveryStream.name);
                                            timeStampKey += 1;
                                            
                                            var values = deliveryStream.CreateValues();
                                            values.time = new Date();
                                            values.response = response;
                                            values.content = measurement;
                                            
                                            deliveryStream.AddStreamEntry({
                                            	timestamp: timeStampKey /* DATETIME */ ,
                                            	location: undefined /* LOCATION */ ,
                                            	source: me.name /* STRING */ ,
                                            	sourceType: undefined /* STRING */ ,
                                            	tags: undefined /* TAGS */ ,
                                            	values: values /* INFOTABLE */
                                            });
                                            
                                            if (response.offsets[0].error === null) {
                                                var updateValues = stream.CreateValues();
                                                updateValues.send_time = new Date();
                                                updateValues.content = measurement;
                                                updateValues.delivered = true;
                                                
                                            	stream.UpdateStreamEntry({
                                            		streamEntryId: id /* STRING */ ,
                                            		location: undefined /* LOCATION */ ,
                                            		source: me.name /* STRING */ ,
                                            		tags: undefined /* TAGS */ ,
                                            		values: updateValues /* INFOTABLE */
                                            	});
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var key = me.INgetRepair();
                                        var lo = false;
                                        var section = me.INgetSection();
                                        var section_thing = Things[section];
                                        if (section_thing.thingTemplate === "2050Оборудование") {
                                        	lo = true;
                                        }
                                        var result = {
                                        	result: "true",
                                        	data: []
                                        };
                                        var repair = Things[key];
                                        var works_to_complete = [];
                                        if (repair) {
                                        	var notReady = false;
                                        	main_works = repair.РАБОТЫ;
                                        	main_remarks = repair.ЗАМЕЧАНИЯ;
                                        	for (var x = 0; x < main_works.length; x++) {
                                        		var work_id = main_works.getRow(x).РАБОТА;
                                        		var work = Things[work_id];
                                        		if (work) {
                                        			if (work.СТАТУС === 11) {
                                        				works_to_complete.Push(work.name);
                                        			} else {
                                        				notReady = true;
                                        				break;
                                        			}
                                        		}
                                        	}
                                        	if (!notReady) {
                                        		for (var y = 0; y < main_remarks.length; y++) {
                                        			var remark_id = main_remarks.getRow(y).remark;
                                        			var remark = Things[remark_id];
                                        			if (remark) {
                                        				var works = remark.РАБОТЫ;
                                        				for (var x = 0; x < works.length; x++) {
                                        					var work_id = works.getRow(x).РАБОТА;
                                        					var work = Things[work_id];
                                        					if (work) {
                                        						if (work.СТАТУС === 11) {
                                        							works_to_complete.Push(work.name);
                                        						} else {
                                        							notReady = true;
                                        							break;
                                        						}
                                        					}
                                        				}
                                        			}
                                        		}
                                        	}
                                        
                                        
                                        
                                        	if (!notReady) {
                                        		for (var z = 0; z < works_to_complete.length; z++) {
                                        			var work_id = works_to_complete[z];
                                        			var work = Things[work_id];
                                        			if (work) {
                                        				work.СТАТУС = 14;
                                        			}
                                        		}
                                                
                                        	} else {
                                        		JSONErrow = new Object();
                                        		JSONErrow.code = "0001";
                                        		JSONErrow.description = "Не все работы и КСО приняты РЖД";
                                        		result = {
                                        			result: "false",
                                        			Error: JSONErrow
                                        		};
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test1">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var streamData = Things["ESMT_getLocState_Stream"].GetStreamData();
                                        //    for (var j = 0; j < streamData.rows.length; j++) {
                                        //        var json = JSON.parse(streamData.getRow(2));
                                        
                                        
                                        //var result = Object.keys(streamData.getRow(0)).length;
                                        //var comp = streamData.getRow(0);
                                        //for (var i = 0; i < 3; i++) {
                                        //for (var key in streamData.getRow(i)) { 
                                        //    if (comp[key] == streamData.getRow(i)[key]) {
                                        //    	result++;
                                        //    }
                                        //}
                                        //}
                                        
                                        //	for (var x = 0; x < infotable.getRowCount(); x++) {
                                        //		var row = infotable.getRow(x);
                                        
                                        //var query1 = {
                                        //	"filters": {
                                        //		"type": "And",
                                        //		"filters": [ {
                                        //			"type": "Matches",
                                        //			"fieldName": "ВИД_ЗАМЕРА",
                                        //			"expression": "После обточки"
                                        //		}]
                                        //	}
                                        //};
                                        //
                                        //var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                        //        thingTemplate: "2050КолеснаяПараЗамеры" /* THINGTEMPLATENAME */,
                                        //        maxItems: undefined /* NUMBER */,
                                        //        tags: undefined /* TAGS */,
                                        //        nameMask: undefined /* STRING */,
                                        //        query: query1 /* QUERY */
                                        //    });
                                        //var result = [];
                                        //for (var i = 0; i < things.length; i++) {
                                        //	var name = things[i].name;
                                        //    var measurement = Things[name];
                                        //    measurement.ВИД_ЗАМЕРА = "ПослеТО4";
                                        //    result.push(name);
                                        //}
                                        
                                        
                                        //var a = "asd";
                                        //a = parseInt(a);
                                        //if (isNaN(a)) {
                                        //	var result = {"result": true};
                                        //}
                                        
                                        //var query1 = {
                                        //	"filters": {
                                        //		"type": "And",
                                        //		"filters": [ 
                                        //                   {
                                        //			"type": "Matches",
                                        //			"fieldName": "СЕКЦИЯ",
                                        //			"expression": "ac895a51-f049-11e1-8e8b-001517e6ca10"
                                        //		},
                                        //        {
                                        //			"type": "Matches",
                                        //			"fieldName": "НАРЯД",
                                        //			"expression": "558"
                                        //		}]
                                        //	}
                                        //};
                                        //var arr = [];
                                        //var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                        //        thingTemplate: "2050ЭкземплярРаботы" /* THINGTEMPLATENAME */,
                                        //        maxItems: 3000 /*NUMBER */,
                                        //        tags: undefined /* TAGS */,
                                        //        nameMask: undefined /* STRING */,
                                        //        query: query1 /* QUERY */
                                        //    });
                                        //for (var i = 0; i < things.length; i++) {
                                        // var thing = Things[things[i].name];
                                        ////	//var thing = Things["3f575592-2656-4c7c-a36f-e489ed7a80d8"];
                                        ////
                                        //    	arr.push(thing.name);
                                        ////
                                        //}
                                        //////var result = {"arr": things.length};
                                        //var result = arr;
                                        
                                        
                                        //function findSection(dkId) {
                                        
                                        //
                                        //var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                        //        thingTemplate: "2050КолеснаяПараПараметрыЗамеров" /* THINGTEMPLATENAME */,
                                        //        maxItems: undefined /* NUMBER */,
                                        //        tags: undefined /* TAGS */,
                                        //        nameMask: undefined /* STRING */,
                                        //        query: undefined /* QUERY */
                                        //    });
                                        //for (var i = 0; i < things.length; i++) {
                                        //	var name = things[i].name;
                                        //}
                                        //    return name;
                                        //}
                                        //
                                        //result = [findSection("8e5abb76-ef23-11e9-80e7-0050560104a9")];
                                        
                                        
                                        
                                        
                                        
                                        
                                        ////var arr = {"data": []};
                                        //for (var j = 0; j < things.length; j++) {
                                        //    if (things[j].description === "0266") {
                                        //        var result = {"arr": things[j].name};
                                        //        }
                                        //}
                                        //	var photos = Things[things[j].name].ФОТОГРАФИИ;
                                        //	for (var i = 0; i < photos.getRowCount(); i++) {	
                                        //		var photo = photos.getRow(i).ФОТО;
                                        //        if (photo) {
                                        //    	arr.data.push(things[j].name);
                                        //    }
                                        //    }
                                        //    if (photos.Value != null) {
                                        //    arr.data.push(things[j].name);
                                        //}
                                        //}
                                        
                                        //var result = {"arr": arr.data.length};
                                        
                                        //var str = "http://62.141.88.61:8085/Thingworx/FileRepositories/SystemRepository/JPEG_20191018_133622.jpg";
                                        //str = str.replace('62.141.88.61','devplatform.digitaldepot.ru');
                                        //var result = {"photo_id": me.System_repository + "JPEG_20191018_133622.jpg"};
                                        //
                                        
                                        //var user = Things["edfa3864-e472-11e2-aaad-ac162db0b20c"].ДАТА_НАЧАЛА_СМЕНЫ;
                                        //user = parseDate(dateFormat(user, "yyyy-MM-dd HH:mm:ss+00:00"), "yyyy-MM-dd HH:mm:ss+00:00");
                                        //var date = "0001-01-01T00:00:00";
                                        //date = date.replace('T',' ');
                                        //var result = parseDate(date,"yyyy-MM-dd HH:mm:ss");
                                        //var date = new Date();
                                        //date = date.getTimezoneOffset() * 60000;
                                        //var result = user - date;
                                        
                                        //for (var i = 0; i < things.rows.length; i++) {
                                        //	result.data.push(things.rows[i]);
                                        //}
                                        //var work = Things[id_work];
                                        //if (work!=null&&work.thingTemplate==="2050ЭкземплярРаботы") {
                                        //var result = {result:"true" , data: []};  
                                        //
                                        //var photos = work.ФОТОГРАФИИ;
                                        //for (var x=0;x<photos.getRowCount();x++){
                                        //var photo_id=photos.getRow(x).ФОТО;
                                        //var JSON = new Object();
                                        //JSON.id_photo =photo_id;     
                                        //JSON.url_photo = photo_id;
                                        //result.data[x] = JSON;
                                        //}
                                        //
                                        //}
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        //var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                        //        thingTemplate: "2050ЭкземплярРаботы" /* THINGTEMPLATENAME */,
                                        //        maxItems: undefined /* NUMBER */,
                                        //        tags: undefined /* TAGS */,
                                        //        nameMask: undefined /* STRING */,
                                        //        query: undefined /* QUERY */
                                        //    });
                                        //
                                        //var arr = {"data": []};
                                        //for (var j = 0; j < things.length; j++) {
                                        //	var photos = Things[things[j].name].ПОТРЕБНОСТЬ_В_ТМЦ;
                                        //	for (var i = 0; i < photos.getRowCount(); i++) {	
                                        //		var photo = photos.getRow(i);
                                        //        if (photo) {
                                        //    	arr.data.push(photo.ТМЦ);
                                        //    }
                                        //    }
                                        ////    if (photos.Value != null) {
                                        ////    arr.data.push(things[j].name);
                                        ////}
                                        //}
                                        //var result = arr;
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        var result = [];
                                        
                                        var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                                thingTemplate: "2050Секция" /* THINGTEMPLATENAME */,
                                                maxItems: 100000 /* NUMBER */,
                                                tags: undefined /* TAGS */,
                                                nameMask: undefined /* STRING */,
                                                query: undefined /* QUERY */
                                            });
                                        
                                        for (var j = 0; j < things.length; j++) {
                                        	var section = Things[things[j].name];
                                        	var num = 1;
                                        	if (section.КП.length === 0 && section.НАИМЕНОВАНИЕ === "0126А") {
                                                result.push(section.name);
                                        //		for (var i = 0; i < 4; i++) {
                                        //			var id = generateGUID();
                                        //			var params = {
                                        //				name: id /* STRING */,
                                        //				description: undefined /* STRING */,
                                        //				thingTemplateName: "2050КолеснаяПара" /* THINGTEMPLATENAME */,
                                        //				tags: undefined /* TAGS */
                                        //			};
                                        //			// no return
                                        //			Resources["EntityServices"].CreateThing(params);
                                        //			Things[id].EnableThing();
                                        //			Things[id].RestartThing();
                                        //			Things[id].НАИМЕНОВАНИЕ_СЕКЦИИ = section.СУБНОМЕР;
                                        //			Things[id].НОМЕР_СЕКЦИИ = section.НАИМЕНОВАНИЕ;
                                        //			Things[id].СУБНОМЕР_СЕКЦИИ = section.НОМЕР;
                                        //			Things[id].НОМЕР_КП = num.toString();
                                        //            var wheelPairs = section.КП;
                                        //			wheelPairs.AddRow({КП: Things[id].name});
                                        //            section.КП = wheelPairs;
                                        //			num++;
                                        //			result.push(Things[id].name);
                                        //		}
                                        	}
                                        }
                                        
                                        
                                        
                                        
                                        
                                        //
                                        //var arr = "МаксимальныйДиаметрБандажа";
                                        //var result = {"arr": arr.indexOf("Максимальная")};
                                        
                                        
                                        
                                        //var result = [];
                                        //
                                        //var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                        //        thingTemplate: "2050Оборудование" /* THINGTEMPLATENAME */,
                                        //        maxItems: undefined /* NUMBER */,
                                        //        tags: undefined /* TAGS */,
                                        //        nameMask: undefined /* STRING */,
                                        //        query: undefined /* QUERY */
                                        //    });
                                        //
                                        //for (var i = 0; i < things.length; i++) {
                                        //	var thing = Things[things[i].name];
                                        //    
                                        //    	result.push(thing.name);
                                        //    
                                        //}
                                        
                                        
                                        
                                        
                                        //var text = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"> <soap:Body> <m:SetOperationalReportCardBrigadeResponse xmlns:m="http://EIPP.org"> <m:return xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="m:Error"> <m:Answer>false</m:Answer> <m:ErrorDescription>Дата окончания:19.11.2019 8:33:21, [19.11.2019 8:33:21] [ws_eipp] Дата начала:19.11.2019 8:33:21 [19.11.2019 8:33:21] [ws_eipp] Начат обмен данными ЕИПП метод SetOperationalReportCardBrigade(Указание Оперативного Табеля Бригады) [19.11.2019 8:33:21] [ws_eipp] Входящие параметры(Список): 1) PlaceOfRepair = a84d0a15-08ec-11e5-829d-00155d6cab05, 2) Brigade = d928f336-bb06-11e6-96e2-00155d6cab05, 3) Date = 19.11.2019 0:00:00, 4) TypeOfWorkingHours = День, 5) ReportCard = СписокXDTO, [19.11.2019 8:33:21] [ws_eipp] Описание ошибки: [19.11.2019 8:33:21] [ws_eipp] У сотрудника Андрианов Олег Анатольевич продолжительность смены (9 ч) превышает количество рабочих (0 ч) часов более, чем на 3 часа</m:ErrorDescription> </m:return> </m:SetOperationalReportCardBrigadeResponse> </soap:Body> </soap:Envelope>';
                                        //var arr = text.split("[ws_eipp] Описание ошибки:");
                                        //var row = arr[1];
                                        //var arr2 = row.split("</m:ErrorDescription>");
                                        //var answer = arr2[0];
                                        //var result = answer;
                                        
                                        //var date1 = parseDate('2019-11-19 08:00:00', "yyyy-MM-dd HH:mm:ss");
                                        //var date2 = parseDate('2019-11-19 17:00:00', "yyyy-MM-dd HH:mm:ss");
                                        //var result = {
                                        //	"date1": date1,
                                        //    "date2": date2
                                        //};
                                        
                                        //var text = "2019-11-19T07:32:49.346Z";
                                        //text = text.replace("T", " ");
                                        //text = parseDate(text.split('.')[0], "yyyy-MM-dd HH:mm:ss").getTime();
                                        //var result = text;
                                        
                                        
                                        //var result = {
                                        //	"result": true,
                                        //    "data": []
                                        //};
                                        //var section = Things["ac895a51-f049-11e1-8e8b-001517e6ca10"];
                                        //var measurement = Things["3664d98a-3498-4b21-98e2-6d4702196aff"];
                                        //var KPs = measurement.КП;
                                        //for (var j = 0; j < KPs.length; j++) {
                                        //	var KP = Things[KPs.getRow(j).КП];
                                        //    var JSON = new Object();
                                        //    JSON.pair_id = KP.name;
                                        //    JSON.pair_number = KP.НОМЕР_КП;
                                        //    JSON.axis_number = "";
                                        //    JSON.flange_left_number = "";
                                        //    JSON.flange_right_number = "";
                                        //    JSON.must_repair = false;
                                        //    JSON.repair_reason_id = "";
                                        //    JSON.repair_reason_name = "";
                                        //    JSON.wheel_params = [];
                                        //    var parameters = KP.ПАРАМЕТРЫ_ЗАМЕРА;
                                        //     for (var z = 0; z < parameters.length; z++) {
                                        //     	var parameter = Things[parameters.getRow(z).Параметр];
                                        //        if (parameter.ЗАМЕР === measurement.name) {
                                        //        	var JSONrow = new Object();
                                        //            JSONrow.param_id = parameter.name;
                                        //            JSONrow.param_name = parameter.НАЗВАНИЕ_ПАРАМЕТРА;
                                        //            JSONrow.param_type = parameter.ТИП_ДАННЫХ;
                                        //            if (isNaN(parseInt(parameter.ЗНАЧЕНИЕ_ЛЕВОГО))) {
                                        //            	JSONrow.left_value = parameter.ЗНАЧЕНИЕ_ЛЕВОГО;
                                        //            } else {
                                        //            	JSONrow.left_value = parseFloat(parameter.ЗНАЧЕНИЕ_ЛЕВОГО);
                                        //            }
                                        //            if (isNaN(parseInt(parameter.ЗНАЧЕНИЕ_ПРАВОГО))) {
                                        //            	JSONrow.left_value = parameter.ЗНАЧЕНИЕ_ПРАВОГО;
                                        //            } else {
                                        //            	JSONrow.left_value = parseFloat(parameter.ЗНАЧЕНИЕ_ПРАВОГО);
                                        //            }
                                        //            JSON.norm_value = parameter.ЗНАЧЕНИЕ;
                                        //            JSONrow.date_change = measurement.ДАТА_ЗАМЕРА;
                                        //            JSONrow.user_change = {};
                                        //            var user = Things[measurement.СОТРУДНИК];
                                        //            if (user !== null) {
                                        //            	JSONrow.user_change.id = user.name;
                                        //                JSONrow.user_change.fio = user.ФИО;
                                        //            } else {
                                        //            	JSONrow.user_change.id = measurement.СОТРУДНИК;
                                        //                JSONrow.user_change.fio = "";
                                        //            }
                                        //            JSON.wheel_params.push(JSONrow);
                                        //       }
                                        //    }
                                        //    result.data.push(JSON);
                                        //}
                                        
                                        
                                        
                                        
                                        
                                        //var result = [];
                                        //var arr = ["Выщербина", "Кольцевые выработки", "Крутизна гребня", "Остроконечный накат", "Откол гребня", "Отслоение", "По разнице диаметров", "Ползун", "Прокат", "Раздавленность бандажа", "Раковина", "Риски по гребню", "Толщина гребня", "Трещина на вершине гребня"];
                                        //		for (var i = 0; i < arr.length; i++) {
                                        //			var id = generateGUID();
                                        //			var params = {
                                        //				name: id /* STRING */,
                                        //				description: "Причина обточки: "  + arr[i] /* STRING */,
                                        //				thingTemplateName: "2050КПЗПричиныОбточки" /* THINGTEMPLATENAME */,
                                        //				tags: undefined /* TAGS */
                                        //			};
                                        //			// no return
                                        //			Resources["EntityServices"].CreateThing(params);
                                        //			Things[id].EnableThing();
                                        //			Things[id].RestartThing();
                                        //			Things[id].НАИМЕНОВАНИЕ = arr[i];
                                        //			result.push(Things[id].name);
                                        //		}
                                        
                                        
                                        
                                        //var result = {"result": true};
                                        //var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                        //	thingTemplate: "2050КолеснаяПараПараметрыЗамеров" /* THINGTEMPLATENAME */ ,
                                        //	maxItems: 3000 /* NUMBER */ ,
                                        //	tags: undefined /* TAGS */ ,
                                        //	nameMask: undefined /* STRING */ ,
                                        //	query: undefined /* QUERY */
                                        //});
                                        //for (var i = 0; i < things.length; i++) {
                                        //	var parameter_id = things[i].name;
                                        //	var parameter = Things[things[i].name];
                                        //	if (parameter.НАЗВАНИЕ_ПАРАМЕТРА === "ДиаметрБандажа") {
                                        //		Things[parameter_id].МАКСИМУМ = "1260";
                                        //		Things[parameter_id].МИНИМУМ = "1160";
                                        //		Things[parameter_id].ЗНАЧЕНИЕ = "1210";
                                        ///*	} else*/ if (parameter.НАЗВАНИЕ_ПАРАМЕТРА === "КрутизнаГребняБандажа") {
                                        //		Things[parameter_id].МИНИМУМ = "6";
                                        //    	Things[parameter_id].МАКСИМУМ = "10";
                                        //		Things[parameter_id].ЗНАЧЕНИЕ = "8";
                                        //	} //else if (parameter.НАЗВАНИЕ_ПАРАМЕТРА === "ПрокатБандажа") {
                                        //		Things[parameter_id].МАКСИМУМ = "7";
                                        //		Things[parameter_id].МИНИМУМ = "0";
                                        //		Things[parameter_id].ЗНАЧЕНИЕ = "< 7";
                                        //	} else if (parameter.НАЗВАНИЕ_ПАРАМЕТРА === "ТолщинаГребняБандажа") {
                                        //		Things[parameter_id].МАКСИМУМ = "33";
                                        //		Things[parameter_id].МИНИМУМ = "25";
                                        //		Things[parameter_id].ЗНАЧЕНИЕ = "29";
                                        //	} else if (parameter.НАЗВАНИЕ_ПАРАМЕТРА === "ТолщинаБандажа") {
                                        //		Things[parameter_id].МАКСИМУМ = "98";
                                        //		Things[parameter_id].МИНИМУМ = "45";
                                        //		Things[parameter_id].ЗНАЧЕНИЕ = "71.5";
                                        //	}
                                        //}
                                        
                                        
                                        
                                        //var ar = "ТЭД 1 слева";
                                        //var ar1 = "ТЭД 1 слева";
                                        //var ar2 = "Редуктороная смазка";
                                        //var ar3 = "Редукторная смазка";
                                        //if (ar === ar1 && ar2 === ar3) {
                                        //	var result = {"result": true};
                                        //} else {
                                        //	result = {"result": false};
                                        //}
                                        
                                        //var result = [];
                                        //var arr = ["ТУ-16", "ТУ-17", "ТУ-18", "ТУ-21", "ТУ-28", "ТУ-162", "Акт состояния", "Чек лист"];
                                        //		for (var i in arr) {
                                        //			var id = generateGUID();
                                        //			var params = {
                                        //				name: id /* STRING */,
                                        //				description: arr[i] /* STRING */,
                                        //				thingTemplateName: "2050Документ" /* THINGTEMPLATENAME */,
                                        //				tags: undefined /* TAGS */
                                        //			};
                                        //			// no return
                                        //			Resources["EntityServices"].CreateThing(params);
                                        //			Things[id].EnableThing();
                                        //			Things[id].RestartThing();
                                        //			Things[id].НАИМЕНОВАНИЕ = arr[i];
                                        //            Things[id].МЕСТО_ПРИВЯЗКИ = "a84d0a15-08ec-11e5-829d-00155d6cab05";
                                        //            Things[id].СЕКЦИЯ = "ac895a51-f049-11e1-8e8b-001517e6ca10";
                                        //			result.push(Things[id].name);
                                        ////            result.push(arr[i]);
                                        //		}
                                        
                                        
                                        
                                        
                                        
                                        
                                        //var arr = [];
                                        //var query1 = {
                                        //				"filters": {
                                        //					"type": "And",
                                        //					"filters": [
                                        //                        {
                                        //							"type": "Matches",
                                        //							"fieldName": "ОБОРУДОВАНИЕ",
                                        //							"expression": "0163"
                                        //						},
                                        //
                                        //					]
                                        //				}
                                        //			};
                                        //			var params = {
                                        //				maxItems: undefined /* NUMBER */ ,
                                        //				nameMask: undefined /* STRING */ ,
                                        //				query: query1 /* QUERY */ ,
                                        //				thingTemplate: "2050LokoRepair" /* THINGTEMPLATENAME */ ,
                                        //				tags: undefined /* TAGS */
                                        //			};
                                        //var table = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        //for (var i = 0; i < table.length; i++) {
                                        // var thing = Things[table[i].name];
                                        //    	arr.push(thing.name);
                                        //
                                        //}
                                        //var result = arr;
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        //var result = [];
                                        //var query1 = {
                                        //			"filters": {
                                        //				"type": "And",
                                        //				"filters": [{
                                        //						"type": "EQ",
                                        //						"fieldName": "НАИМЕНОВАНИЕ",
                                        //						"value": "Акт испытаний (Приложение 9)"
                                        //					},
                                        //					{
                                        //						"type": "EQ",
                                        //						"fieldName": "СЕКЦИЯ",
                                        //						"value": "c1e633c7-63e9-11e8-80cf-005056011052"
                                        //					}
                                        //				]
                                        //			}
                                        //		};
                                        //
                                        //		var params = {
                                        //			maxItems: undefined,
                                        //			nameMask: undefined,
                                        //			query: query1,
                                        //			thingTemplate: "2050Документ",
                                        //			tags: undefined
                                        //		};
                                        //		var infotable = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        //for (var i = 0; i < infotable.length; i++) {
                                        //	
                                        //var params = {
                                        //	name: infotable[i].name /* THINGNAME */
                                        //};
                                        //
                                        //// no return
                                        //Resources["EntityServices"].DeleteThing(params);
                                        //
                                        //
                                        //}
                                        
                                        
                                        //var params = {
                                        //	name: infotable[i].name /* THINGNAME */
                                        //};
                                        //
                                        //// no return
                                        //Resources["EntityServices"].DeleteThing(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test2">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var thing = Things['000daf9cba0030514aa366b043cb34113c45a693'];
                                        //var result = {};
                                        //if ((dateFrom && dateFrom >= thing.dateTime.getTime()) || (dateTo && dateTo <= thing.dateTime.getTime())) {
                                        //	result = {"date": thing.dateTime};
                                        //}
                                        //var section = "3c0afed1-5c25-11e3-9702-ac162db0b20c";
                                        //var query1 = {
                                        //	"filters": {
                                        //		"type": "And",
                                        //		"filters": [{
                                        //			"type": "Matches",
                                        //			"fieldName": "СЕКЦИЯ",
                                        //			"expression": section
                                        //		}, ]
                                        //	}
                                        //};
                                        //
                                        //var params = {
                                        //	maxItems: undefined /* NUMBER */ ,
                                        //	nameMask: undefined /* STRING */ ,
                                        //	query: query1 /* QUERY */ ,
                                        //	thingTemplate: "2050Пользователь" /* THINGTEMPLATENAME */ ,
                                        //	tags: undefined /* TAGS */
                                        //};
                                        //var infotable = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        //var result = infotable.getRow(0).name;
                                        
                                        
                                        //var result = {"asd": ads};
                                        
                                        
                                        
                                        
                                        var content ='<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:eipp="http://EIPP.org">\
                                           <soap:Header/>\
                                           <soap:Body>\
                                              <eipp:GetOperationalReportCardBrigade>\
                                                 <eipp:Parameters>\
                                                    <eipp:PlaceOfRepair>a84d0a15-08ec-11e5-829d-00155d6cab05</eipp:PlaceOfRepair>\
                                                    <eipp:Brigade>d928f33f-bb06-11e6-96e2-00155d6cab05</eipp:Brigade>\
                                        			<eipp:Date>2019-11-11</eipp:Date>\
                                                    </eipp:Parameters>\
                                              </eipp:GetOperationalReportCardBrigade>\
                                           </soap:Body>\
                                        </soap:Envelope>';
                                            
                                        var params = {
                                        	proxyScheme: undefined /* STRING */,
                                        	headers: undefined /* JSON */,
                                        	ignoreSSLErrors: undefined /* BOOLEAN */,
                                        	useNTLM: undefined /* BOOLEAN */,
                                        	workstation: undefined /* STRING */,
                                        	useProxy: undefined /* BOOLEAN */,
                                        	withCookies: undefined /* BOOLEAN */,
                                        	proxyHost: undefined /* STRING */,
                                        	url: 'http://1cdev.locotech.ru/urp_TB_02/ru_RU/ws/IntegrationEIPP' /* STRING */,
                                        	content: content /* STRING */,
                                        	timeout: 5000 /* NUMBER */,
                                        	proxyPort: undefined /* INTEGER */,
                                        	password: "11012019" /* STRING */,
                                        	domain: undefined /* STRING */,
                                        	contentType: undefined /* STRING */,
                                        	username: "ws_eipp" /* STRING */
                                        };
                                        
                                        var text = Resources["ContentLoaderFunctions"].PostXML(params);
                                        //text = text.replace(/\b/g,'');
                                        //text = text.replace(/\r/g,'');
                                        //text = text.replace(/\t/g,'');
                                        //text = text.replace(/\n/g,'');
                                        //text = text.replace('</m:return>','');
                                        //text = text.replace('</m:GetOperationalReportCardBrigade','');
                                        //text = text.replace('</soap:Body>','');
                                        //text = text.replace('</soap:Envelope>','');  
                                        
                                        var result = text;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test3">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: undefined /* NUMBER */ ,
                                        	nameMask: undefined /* STRING */ ,
                                        	query: undefined /* QUERY */ ,
                                        	thingTemplate: "2050Бригада" /* THINGTEMPLATENAME */ ,
                                        	tags: undefined /* TAGS */
                                        };
                                        var brigadeTable = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        
                                        for (var i = 0; i < brigadeTable.length; i++) {
                                        	var brigade = Things[brigadeTable.getRow(i).name];
                                            if (typeof brigade.МЕСТО_ПРИВЯЗКИ !== "undefined") {
                                            	var usersDatas = Things["2050RepairsLibrary"].GetOperationalReportCardBrigade({
                                        				PlaceOfRepair: brigade.МЕСТО_ПРИВЯЗКИ /* STRING */,
                                        				BrigadeId: brigade.name /* STRING */
                                        			});
                                        	if (usersDatas !== null) {
                                            for (var x = 0; x < usersDatas.array.length; x++) {
                                                    	var userData = Things[usersDatas.array[x].Sotrudnik];
                                                if (userData !== null && userData.thingTemplate === "2050Пользователь") {
                                                        userData.НОМЕР_ТАБЕЛЯ = usersDatas.array[x].PersonalNumber;
                                                    }
                                             }
                                            }
                                           }
                                        }
                                        
                                        var result = {"result": true};
                                        
                                        
                                        //PlaceOfRepair: brigade.МЕСТО_ПРИВЯЗКИ /* STRING */,
                                        //				BrigadeId: brigade.name
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test4">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var query1 = {
                                        	"filters": {
                                        		"type": "And",
                                        		"filters": [ {
                                        			"type": "Matches",
                                        			"fieldName": "НОМЕР_СЕКЦИИ",
                                        			"expression": "0163А"
                                        		},]
                                        	}
                                        };
                                        
                                        var things = Resources['SearchFunctions'].SearchThingsByTemplate({
                                                thingTemplate: "2050КолеснаяПараЗамеры" /* THINGTEMPLATENAME */,
                                                maxItems: undefined /* NUMBER */,
                                                tags: undefined /* TAGS */,
                                                nameMask: undefined /* STRING */,
                                                query: query1 /* QUERY */
                                            });
                                        var section = "0163А";
                                        var result = [];
                                        var commonParameters = ["МаксимальныйДиаметрБандажа", "МинимальныйДиаметрБандажа", "МаксимальнаяКрутизнаГребняБандажа", "МинимальнаяКрутизнаГребняБандажа", "МаксимальныйПрокатБандажа", "МинимальныйПрокатБандажа", "МаксимальнаяТолщинаГребняБандажа", "МинимальнаяТолщинаГребняБандажа", "МаксимальнаяТолщинаБандажа", "МинимальнаяТолщинаБандажа"];
                                        for (var i = 0; i < things.length; i++) {
                                            var measurement_id = things[i].name;
                                        for (var j = 0; j < commonParameters.length; j++) {
                                            	var common_parameter_id = generateGUID();
                                                var params2 = {
                                        				name: common_parameter_id /* STRING */,
                                        				description: "commonParameter of KP Measurement" + " " + section /* STRING */,
                                        				thingTemplateName: "2050КПЗОбщиеПараметры" /* THINGTEMPLATENAME */,
                                        				tags: undefined /* TAGS */
                                        		};
                                        		Resources["EntityServices"].CreateThing(params2);
                                                Things[common_parameter_id].EnableThing();
                                        		Things[common_parameter_id].RestartThing();
                                        		Things[common_parameter_id].НАИМЕНОВАНИЕ = commonParameters[j];
                                                Things[common_parameter_id].ЗАМЕР = measurement_id;
                                            	var commonParametersTable = Things[measurement_id].ОБЩИЕ_ПАРАМЕТРЫ;
                                                commonParametersTable.AddRow({id: common_parameter_id});
                                            	Things[measurement_id].ОБЩИЕ_ПАРАМЕТРЫ = commonParametersTable;
                                        }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test5">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //function parseXMLResponse(xmlResponse) {
                                        //    var arr = [];
                                        //    var obj = {};
                                        //    var resultXML = xmlResponse.*:: Body.*::CreateRemarksOfGrindDataKPofDKResponse.*[1];
                                        //    var comments = resultXML.*:: Comment.*.length() !== 0;
                                        //    if (comments) {
                                        //        for (var i = 0; i < resultXML.*:: Comment.*.length(); i++) {
                                        //        	var node = resultXML.*:: Comment.*[i];
                                        //            var JSON = new Object();
                                        //            JSON.comment = node.toString();
                                        //            arr.push(JSON);
                                        //        }
                                        //        obj.comments = arr;
                                        //        obj.result = true;
                                        //    } else {
                                        //    	obj.result = false;
                                        //    }
                                        //    
                                        //    return obj;
                                        //}
                                        
                                        //function parseXMLResponse(xmlResponse) {
                                        //    var arr = [];
                                        //    var obj = {};
                                        //    var resultXML = xmlResponse.*:: Body.*::GetListCommentsOnRecreationCenterRenovationOfLocomotiveResponse.*[1];
                                        ////    obj.GrindRequired = resultXML.*::RemarkList.*::ListOfWork[0].*::Work.toString();
                                        ////    obj.GrindRequired = resultXML.*::RemarkList.*::ListOfWork.length();
                                        //    var works = resultXML.*::RemarkList.*::ListOfWork.length() !== 0;
                                        //    if (works) {
                                        //        for (var i = 0; i < resultXML.*::RemarkList.*::ListOfWork.length(); i++) {
                                        //        	var node = resultXML.*::RemarkList.*::ListOfWork[i].*::Work;
                                        //            var JSON = new Object();
                                        //            JSON.work = node.toString();
                                        //            arr.push(JSON);
                                        //        }
                                        //        obj.works = arr;
                                        //        obj.result = true;
                                        //    } else {
                                        //    	obj.result = false;
                                        //    }
                                        //    
                                        //    return obj;
                                        //}
                                        //
                                        //var result = parseXMLResponse(data);
                                        
                                        
                                        
                                        
                                        //var time = "2020-01-19 02:16:04+00:00";
                                        //time = time.split("+")[0];
                                        //time = parseDate(time, "yyyy-MM-dd HH:mm:ss");
                                        //var result = time;
                                        
                                        
                                        var section = Things[me.INgetSection()];
                                        
                                        var result = {
                                        	"result": true,
                                            "data": []
                                        };
                                        
                                        var params = {
                                        	maxItems: undefined /* NUMBER */ ,
                                        	nameMask: undefined /* STRING */ ,
                                        	query: undefined /* QUERY */ ,
                                        	thingTemplate: "2050КолеснаяПараИзмерения" /* THINGTEMPLATENAME */ ,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        var measurementsTable = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        
                                        var requiredParams = {
                                        	maxItems: undefined /* NUMBER */ ,
                                        	nameMask: undefined /* STRING */ ,
                                        	query: undefined /* QUERY */ ,
                                        	thingTemplate: "2050КолеснаяПараКатегорииЗамеров" /* THINGTEMPLATENAME */ ,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        var measurementsCategoryTable = Resources["SearchFunctions"].SearchThingsByTemplate(requiredParams);
                                        
                                        for (var i = 0; i < measurementsCategoryTable.length; i++) {
                                        	var measurementsCategory = Things[measurementsCategoryTable[i].name];
                                            var JSONcategory = new Object();
                                            JSONcategory.category_id = measurementsCategory.name;
                                            JSONcategory.category_name = measurementsCategory.НАИМЕНОВАНИЕ;
                                            JSONcategory.category_order = measurementsCategory.НОМЕР;
                                            JSONcategory.has_measurement = false;
                                            var measurements = measurementsCategory.ЗАМЕРЫ;
                                            if (measurements.length > 0) {
                                            	for (var j = 0; j < measurements.length; j++) {
                                                	var measurement = Things[measurements.getRow(j).ЗАМЕР];
                                                    if (measurement !== null) {
                                        	    		if (measurement.НОМЕР_СЕКЦИИ === section.НАИМЕНОВАНИЕ) {
                                        	    			JSONcategory.has_measurement = true;
                                        	            	break;
                                            			}
                                                	}
                                            	}
                                        	}
                                            result.data.push(JSONcategory);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="TestClover">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var headers = {
                                            	"Content-Type": "application/vnd.kafka.json.v2+json",
                                        	};
                                        var content = {"records": [{"value": {
                                        	  	"Type_dataset": "Measurements",
                                          		"Mes_time": 1335205592410,
                                          		"Section_id": "12312313",
                                            	"Section_serial": "2323232456",
                                          		"Section_num": "45654565",
                                            	"Section_subnum": "12345678",
                                            	"Mes_type": 2,
                                            	"Mes_content": "Axle",
                                            	"Mes_size": "21234123",
                                            	"Mes_ed": "m"
                                        	}}, 
                                            {"value": {
                                        	  	"Type_dataset": "Measuremeasdasdadants",
                                          		"Mes_time": 1335205592410,
                                          		"Section_id": "1231231asdasdada3",
                                            	"Section_serial": "2323232sdadada456",
                                          		"Section_num": "4565456adsdad5",
                                            	"Section_subnum": "12345678",
                                            	"Mes_type": 2,
                                            	"Mes_content": "Axle",
                                            	"Mes_size": "21234123",
                                            	"Mes_ed": "m"
                                        	}}]};
                                        var requestParams = {
                                            	proxyScheme: undefined,
                                                headers: headers,
                                                ignoreSSLErrors: true,
                                                useNTLM: undefined,
                                                workstation: undefined,
                                                useProxy: undefined,
                                                withCookies: undefined,
                                                proxyHost: undefined,
                                                url: 'https://kafka-rest.digital-depo.loco-test.itclover.ru/topics/test_2050',
                                                content: content,
                                                timeout: undefined,
                                                proxyPort: undefined,
                                                password: undefined,
                                                domain: undefined,
                                                contentType: undefined,
                                                username: undefined
                                        	};
                                        var response = Resources["ContentLoaderFunctions"].PostText(requestParams);
                                        result = response;
                                        
                                        
                                        //{
                                        //	  	"Type_dataset": "Measurements",
                                        //  		"Mes_time": 1335205592410,
                                        //  		"Section_id": "12312313",
                                        //    	"Section_serial": "2323232456",
                                        //  		"Section_num": "45654565",
                                        //    	"Section_subnum": "12345678",
                                        //    	"Mes_type": 2,
                                        //    	"Mes_content": "Axle",
                                        //    	"Mes_size": "21234123",
                                        //    	"Mes_ed": "m"
                                        //	};
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
